<html xmlns="http://www.w3.org/1999/xhtml"><head><title>Reaction RuleML 0.1 Syntax</title><meta name="description" content="Reaction RuleML" /><meta name="keywords" content="Reaction Rules, Production Rules, ECA Rules, Active Rules, RuleML, ECA-RuleML, Event Logic, Event Algebra, Action Algebra, Event Condition Action ECA, Event Notification, Event Messaging, Forward-Reasoning, Backward-Reasoning, Prova, Rule Markup, RIF, Semantic Web, Rewerse" /><meta name="Generator" content="&copy; 2002-2006 RuleML" /><meta name="robots" content="index, follow" /><meta http-equiv="Content-Type" content="text/html;>charset=iso-8859-1" /><link href="../css/template_css.css" rel="stylesheet" type="text/css" /> </head><body bgcolor=#ffffff leftmargin="3" topmargin="3"><font color="#FFFFFF"></font> <table width="800" border="0" cellspacing="1" cellpadding="0" bordercolor="#FFFFFF">  <tr>     <td height="10"><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"></font><font color="#FFFFFF" size="2">       </font><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"></font></b></font><font color="#FFFFFF" size="2">       </font><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FF8000" size="5" face="Geneva, Arial, Helvetica, san-serif"><span class="pathway"><span class="pathway"><strong><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><img src="../images/transparent.gif" width="15" height="5" align="absmiddle" /></span></font></b></font></b></font></strong></span></span></font></b></font></b></font><font color="#FFFFFF" size="2">       </font><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><img src="../images/transparent.gif" width="181" height="8" align="absmiddle" /></span></font><font color="#FFFFFF" size="2">       </font></b></font></td>    <td width="289" height="10">&nbsp;</td>    <td width="93" height="10" valign="bottom"> <div align="right"></div></td>    <td colspan="2" valign="bottom"> <div align="right"><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><img src="../images/transparent.gif" width="10" height="10" /></b></font></b></font>       </div></td>  </tr>  <tr>     <td height="27" colspan="2" bgcolor="#666666"><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"><span class="pathway"><span class="pathway"><strong><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><img src="../images/transparent.gif" width="15" height="5" align="absmiddle" /></span></font></b></font></b></font></strong></span></span></font></b></font></b></font><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;">Reaction Rules for the Rule Markup Language</span></font></td>    <td height="27" colspan="3" bgcolor="#666666"> <div align="right"><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><a href="http://reaction.ruleml.org/"><font color="#333333"><u>Reaction       RuleML Home</u></font></a><img src="../images/transparent.gif" width="10" height="10" align="absmiddle" />         </span></font></div></td>  </tr>  <tr>     <td colspan="4" background="../images/striche_rechts_nur_rechts_breit.gif">       <div align="left"><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"><span class="pathway"><span class="pathway"><strong><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><img src="../images/transparent.gif" width="15" height="5" align="absmiddle" /></span></font></b></font></b></font></strong></span></span></font></b></font></b></font><font color="#FF8000" size="5" face="Geneva, Arial, Helvetica, san-serif">Reaction RuleML</font></b></font></div></td>	<td height="60"><div align="right"><a href="http://www.ruleml.org/" target="_blank"><img src="../images/RuleMLlogo2005.jpg" width="120" height="29" hspace="10" /></a></div></td>  </tr>    <tr>     <td height="13" bgcolor="#FF8000"><span class="pathway"><span class="pathway"><strong><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><img src="../images/transparent.gif" width="15" height="5" align="absmiddle" /></span></font></b></font></b></font></strong></span></span><a href="http://reaction.ruleml.org/"><font color="#333333"><u>Reaction       RuleML Home</u></font></a></td>    <td height="13" colspan="4" bgcolor="#666666"><span class="pathway"><span class="pathway"><strong><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><img src="../images/transparent.gif" width="10" height="5" align="absmiddle" /><img src="../images/transparent.gif" width="10" height="18" align="absmiddle" /></span></font></b></font></b></font></strong></span></span></td>  </tr>  <tr>     <td height="106" valign="top"> <table width="100%" border="0" cellspacing="12">        <tr>           <td colspan="2" valign="top" > <div align="justify">               <table border="0" align="left">                <tr>                  <td width="134" valign="top"><strong><font color="#FF8000">Content</font></strong></td>                </tr>                <tr>                  <td valign="top"><p align="left"> <a href="./index.htm#overview">Overview</a><br />				  				  <a href="./index.htm#scope">Scope</a><br>                      <a href="./index.htm#layers">Modularization</a><br />					   <a href="./index.htm#changes">Changes</a><br />                      <a href="./index.htm#examples">Examples</a><br />                      <a href="./index.htm#xsd">XSD Schema</a><br />                      <a href="./index.htm#syntax">Syntax</a><br>                      <a href="./index.htm#glossary">Glossary</a><br />					   <a href="./index.htm#editor">Editor</a><br />                      <a href="./index.htm#validation">Validation</a><br />					  <a href="./index.htm#translation">Translators</a><br />                      <a href="./index.htm#links">References</a></p>                    <p align="left">&nbsp;</p>                    </td>                </tr>                <tr>                  <td valign="top"><strong><font color="#FF8000">News</font><font color="#FFFFFF"></font></strong></td>                </tr>				<tr>                 <td valign="top">				 <p>Reaction RuleML 0.2 Release, 2007-07-01 (<a href="./xsd.htm">xsd</a>)</p>				    <p><a href="http://2007.ruleml.org" target="_blank">Int. RuleML                       Symposium on Rule Interchange and Applications</a> (<a href="http://2007.ruleml.org" target="_blank">RuleML-2007</a>),                       2007-10-25/26, co-located with the 10th International Business                       Rules Forum <br>                      <a href="http://2007.ruleml.org/index-Dateien/Page930.htm" target="_blank"><font color="#FF0000">Register                       NOW !!!</font></a></p>				  	<p><a href="../news.htm" >all news&gt;&gt;</a></p>                    <p>&nbsp;</p></td>                </tr>				<tr>                  <td valign="top"><strongA><font color="#FF8000">Reaction RuleML                    List </font></strong></td>                </tr>                <tr>                  <td valign="top">				  	<p><a href="http://mail.ruleml.org/pipermail/reaction-tg/" target="_blank">Archives</a><br>                      <a href="http://mail.ruleml.org/mailman/listinfo/reaction-tg" target="_blank">Subscribe</a><br>                      <br>                      <em>post a message:</em><br>                      <a href="mailto:reaction-tg@ruleml.org">reaction-tg@ruleml.org</a></p>                    <p>&nbsp;</p></td>                </tr>                <tr>                  <td valign="top"><strong><font color="#FF8000">Publications</font><font color="#FFFFFF"></font></strong></td>                </tr>              <tr>                  <td valign="top">				  	  <p>Paper at VLDB EDA-PS'07 (<a href="../docs/vldb_eda-ps07.pdf" target="_blank">pdf</a>)<p><a href="../docs/Reaction-RuleM_tutorial06.pdf" target="_blank">Reaction                       RuleML 0.1 Tutorial</a> at <a href="http://2006.ruleml.org/group3.html#tutorials" target="_blank">RuleML'06</a>                       (<a href="../docs/Reaction-RuleM_tutorial06.pdf" target="_blank">slides</a>)</p>                    <p>Reaction RuleML Poster at <a href="http://2006.ruleml.org/" target="_blank">RuleML                      2006</a> (<a href="../docs/RuleML06_Poster.pdf" target="_blank">pdf</a>)</p>                    <p>Position Paper at Business Rules Forum 2006 (<a href="../docs/ReactionRuleML_BusinessRulesForum_06.pdf" target="_blank">pdf</a>)<br>                    </p>                    <p><a href="../publications.htm" >all publications&gt;&gt;</a></p>                    <p>&nbsp;</p></td>                </tr>				<tr>                  <td valign="top"><strong><font color="#FF8000">Members Section</font></strong></td>                </tr>                <tr>                  <td valign="top"><p><a href="../members/index.htm">Login</a></p></td>                </tr>                <tr>                  <td valign="top">&nbsp;</td>                </tr>              </table>            </div></td>        </tr>      </table>      <br />      <font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><img src="../images/transparent.gif" width="190" height="8" align="absmiddle" /></span></font>     </td>    <td height="106" colspan="4" valign="top"> <table width="100%" border="0" cellspacing="10">        <tr>           <td height="610" colspan="2" valign="top" >             <div align="justify">               <h3 align="center">Reaction RuleML 0.2 Syntax</h3>              <p align="center"><font size="2"><strong>Quick Links:</strong><br>                <a href="#ebnf">EBNF Syntax</a>, <a href="#content">Content Models</a>,                 <a href="#meta">Meta Models</a></font></p>              <p align="center">&nbsp;</p>               <p><a name="ebnf"></a>The syntax of Reaction RuleML is specified                 by means of extended BNF (EBNF), i.e. alternatives are separated                 by vertical bars (|); zero to one occurrences are written in square                 brackets ([]) and zero to many occurrences in braces ({}).</p>              <p><b>RuleML 0.91 Layer (<a href="http://www.ruleml.org/0.91/xsd/hornlogeq.xsd" target="_blank">RuleML                 hornlogeq.xsd</a>)</b></p>              <p>see <a href="http://www.ruleml.org/0.91/xsd/content_models_091.pdf"><font size="3">RuleML                 0.91 content models</font></a></p>              <p><b>Derivation RuleML Layer (<a href="./dr.xsd" target="_blank">dr.xsd</a>)</b></p>              <p><em>Derivation Rules with Naf, Neg, Equal and optional meta data                 label, scope and rule quantification; Replaces &quot;Implies&quot;                 with general &quot;Rule&quot;</em></p>              <p>Rule ::= [label,] [scope,] [quantification,] [oid,] if, then,                 [else]<br>                label ::= Ind | Expr | Plex<br>                scope ::= Ind<br>                quantification ::= Ind | Expr | Plex<br>                if ::= Atom | And | Or | Equal | Naf | Neg<br>                then ::= Atom | Equal | Neg<br>                else ::= then<br>                Naf ::= [oid,] weak | Atom | Neg | Equal<br>                Neg ::= [oid,] strong | Atom | Equal </p>              <p>RuleML ::= [label,] [scope,] [quantification,] [oid,] {Assert                 | Retract | Query}<br>                Assert ::= [label,] [scope,] [quantification,] [oid,] <br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{formula                 | Rulebase | Atom | Rule | Equivalent | Entails | Forall | Equal                 | Neg}<br>                Retract ::= Assert<br>                Query ::= [label,] [scope,] [quantification,] [oid,] {formula                 | Rulebase | Naf | Neg | Atom | And | Or | Entails | Exists |                 Equal} <br>                Rulebase ::= [label,] [scope,] [quantification,] [oid,]<br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{formula                 | Atom | Neg | Rule | Equivalent | Equal | Forall}<br>                Atom ::= [label,] [scope,] [quantification,] [oid,] (op | Rel,)                 {slot,}<br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{arg                 | Ind | Data | Skolem | Var | Reify,} {slot}<br>                Expr ::= [label,] [scope,] [quantification,] [oid,] (op|Fun,)                 {slot,} [resl,]<br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{arg|Ind|Data|Skolem|Var|Reify|Expr|Plex,}                 [repo,] {slot,} [resl]<br>              </p>              <p><b>PR RuleML Layer (<a href="./pr.xsd" target="_blank">pr.xsd</a>)</b></p>			  <p><em>Production Rules and Serial Derivation Rules with transactional                 update actions (Assert, Retract, Update)</em></p>              <p>Rule ::= [label,] [scope,] [quantification,] [oid,]<br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(if,                 do, [after,] [else,] [elseDo,] [elseAfter]) | <br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(if,                 then, [else,] [elseDo,] [elseAfter]) <br>                if ::= Atom | And | Or | Equal | Naf | Neg | Assert | Retract                 | Update<br>                do ::= {Atom | Assert | Retract | Update | Rule}<br>                after ::= if<br>                elseDo ::= do<br>                elseAfter ::= if<br>                Update::= (oid | formula | Rulebase | Atom | Rule | Equivalent                 | Entails | Forall | Equal | Neg,)<br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[oid                 | formula | Rulebase | Atom | Rule | Equivalent | Entails | Forall                 | Equal | Neg]<br>              </p>              <p><b>RR RuleML Layer (<a href="./rr.xsd" target="_blank">rr.xsd</a>)</b></p>              <p><em>Reaction Rules with complex event and action algebra operators                 and messaging reaction rules with complex event messages</em></p>              <p><em> </em>RuleML ::= [label,] [scope,] [quantification,] [oid,]                 {Assert | Retract | Query,} [Message]<br>                Rule ::= [label,] [scope,] [quantification,] [oid,]<br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(on,                 [if,] [then,] do, [after,] [else,] [elseDo,] [elseAfter]) |<br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(on                 | do) |<br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(if,                 do, [after,] [else,] [elseDo,] [elseAfter]) |<br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(if,                 then, [else,] [elseDo,] [elseAfter])<br>                on ::= Naf | Neg | Atom | Rule | Message | Sequence | Disjunction                 | Xor | Conjunction | Concurrent | Not | Any | Aperiodic | Periodic                 | Ind | Var | Expr<br>                do ::= Atom | Assert | Retract | Update | Message | Succession | Choice                 | Flow | Loop | Ind | Var | Expr</p>              <p><em>Message Constructs (<a href="./modules/message_module.xsd" target="_blank">message_module.xsd</a>)</em></p>              <p>Message ::= [label,] [scope,] [qualification,] (oid | Ind | Var                 | Expr), (protocol | Ind | Var | Expr), (sender | receiver | Ind                 | Var | Expr), (content | Atom | Ind | Var | Expr | Plex | Naf                 | Neg | Rulebase | And | Or | Entails | Exists | Equal)<br>                protocol ::= Ind | Var | Expr<br>                sender ::= Ind | Var | Expr<br>                receiver ::= sender<br>                content ::= Atom | Ind | Var | Expr | Plex | Naf | Neg | Rulebase                 | And | Or | Entails | Exists | Equal</p>              <p><em>Time and Event Interval Constructs (<a href="./modules/algebra_module.xsd" target="_blank">algebra_module.xsd</a>)</em></p>              <p>time ::= Ind | Var | Expr<br>                interval ::= Interval | Plex | Var<br>                Interval ::= [oid,] on | time | Ind | Var | Expr | Naf | Neg |                 Atom | Rule | Message | Sequence | Disjunction | Xor | Conjunction                 | Concurrent | Not | Any | Aperiodic | Periodic , on | time |                 Ind | Var | Expr | Naf | Neg | Atom | Rule | Message | Sequence                 | Disjunction | Xor | Conjunction | Concurrent | Not | Any | Aperiodic                 | Periodic</p>              <p><em>Complex Event and Action Algebra Constructs (<a href="./modules/algebra_module.xsd" target="_blank">algebra_module.xsd</a>)</em></p>              <p> <em>Complex Event Algebra:</em><br>                Sequence ::= [oid,] {on | Naf | Neg | Atom | Rule | Message |                 Ind | Var | Expr | Sequence | Disjunction | Xor | Conjunction                 | Concurrent | Not | Any | Aperiodic | Periodic }<br>                Disjunction ::= [oid,] {on | Naf | Neg | Atom | Rule | Message                 | Ind | Var | Expr | Sequence | Disjunction | Xor | Conjunction                 | Concurrent | Not | Any | Aperiodic | Periodic }<br>                Conjunction ::= [oid,] {on | Naf | Neg | Atom | Rule | Message                 | Ind | Var | Expr | Sequence | Disjunction | Xor | Conjunction                 | Concurrent | Not | Any | Aperiodic | Periodic}<br>                Xor ::= [oid,] {on | Naf | Neg | Atom | Rule | Message | Ind |                 Var | Expr | Sequence | Disjunction | Xor | Conjunction | Concurrent                 | Not | Any | Aperiodic | Periodic}<br>                Concurrent::= [oid,] {on | Naf | Neg | Atom | Rule | Message |                 Ind | Var | Expr | Sequence | Disjunction | Xor | Conjunction                 | Concurrent | Not | Any | Aperiodic | Periodic}<br>                Not::= [oid,] on | Naf | Neg | Atom | Rule | Message | Ind | Var                 | Expr | Sequence | Disjunction | Xor | Conjunction | Concurrent                 | Not | Any | Aperiodic | Periodic, interval | Interval | Plex                 | Var<br>                Any ::= [oid,] Ind | Data | Var, on | Naf | Neg | Atom | Rule                 | Message | Ind | Var | Expr | Sequence | Disjunction | Xor |                 Conjunction | Concurrent | Not | Any | Aperiodic | Periodic, interval                 | Interval | Plex | Var<br>                Aperiodic ::= [oid,] on | Naf | Neg | Atom | Rule | Message |                 Ind | Var | Expr | Sequence | Disjunction | Xor | Conjunction                 | Concurrent | Not | Any | Aperiodic | Periodic, interval | Interval                 | Plex | Var<br>                Periodic ::= [oid,] time | Ind | Var | Expr , interval | Interval                 | Plex | Var</p>              <p><em>Complex Action Algebra:</em><br>                Succession ::= [oid,] {do | Atom | Assert | Retract | Update |                 Message | Ind | Var | Expr | Succession | Choice | Flow | Loop}<br>                Choice ::= [oid,] {do | Atom | Assert | Retract | Update | Message                 | Ind | Var | Expr | Succession | Choice | Flow | Loop}<br>                Flow ::= [oid,] {do | Atom | Assert | Retract | Update | Message                 | Ind | Var | Expr | Succession | Choice | Flow | Loop}<br>                Loop ::= [oid,] {do | Atom | Assert | Retract | Update | Message                 | Ind | Var | Expr | Succession | Choice | Flow | Loop}<br>              </p>              <p><b>KR Temporal / Event / Action / Transition / Process Logics                 Layer (<a href="./kr.xsd" target="_blank">kr.xsd</a>)</b></p>              <p><em>State Processing Constructs (<a href="./modules/state_module.xsd" target="_blank">state_module.xsd</a>)</em></p>              <p>state ::= Ind | Var | Expr<br>                Initiates ::= [oid,] state | Ind | Var | Expr<br>                Terminates ::= [oid,] state | Ind | Var | Expr<br>                HoldsState: [oid,] (state | Ind | Var | Expr), (time | interval                 | Ind | Expr | Interval) </p>              <p>&nbsp;</p>              <p>&nbsp;</p>              <h3><a name="content"></a>Reaction RuleML 0.2 Content Models</h3>              <p>The content models are specified in a DTD like notation</p>			                 <p><b>RuleML 0.91 Layer (<a href="http://www.ruleml.org/0.91/xsd/hornlogeq.xsd" target="_blank">RuleML                 hornlogeq.xsd</a>)</b></p>              <p>see <a href="http://www.ruleml.org/0.91/xsd/content_models_091.pdf">RuleML                 0.91 content models</a></p>              <p><b>Derivation RuleML Layer (<a href="./dr.xsd" target="_blank">dr.xsd</a>)</b></p>              <p><em>Derivation Rules with Naf, Neg, Equal and optional meta data                 label and rule quantification; Replaces &quot;Implies&quot; with                 general &quot;Rule&quot;</em></p>              <p>Rule: (label?, scope?, quantification?, oid?, if, then, else?<br>                label: Ind | Expr | Plex<br>                scope: Ind<br>                quantification: Ind | Expr | Plex<br>                if: (Atom | And | Or | Equal | Naf | Neg)<br>                then: (Atom | Equal | Neg)<br>                else: (Atom | Equal | Neg)<br>                Naf: (oid?, weak | Atom | Neg | Equal)<br>                Neg: (oid?, strong | Atom | Equal)</p>              <p>RuleML: (label?, scope?, quantification?, oid?, (Assert | Retract                 | Query)*)<br>                Assert: (label?, scope?, quantification?, oid?, <br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(formula                 | Rulebase | Atom | Rule | Equivalent | Entails | Forall | Equal                 | Neg)*)<br>                Retract: (label?, scope?, quantification?, oid?, <br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(formula                 | Rulebase | Atom | Rule | Equivalent | Entails | Forall | Equal                 | Neg)*)<br>                Query: (label?, scope?, quantification?, oid?, <br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(formula                 | Rulebase | Naf | Neg | Atom | And | Or | Entails | Exists |                 Equal)*)<br>                Rulebase: (label?, scope?, quantification?, oid?,<br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(formula                 | Atom | Neg | Rule | Equivalent | Equal | Forall)*)<br>                Atom: (label?, scope?, quantification?, oid?, (op | Rel), (slot)*,<br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(arg                 | Ind | Data | Skolem | Var | Reify)*, (slot)*)<br>                Expr: (label?, scope?, quantification?, oid?, (op|Fun), (slot)*,                 resl?,<br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(arg|Ind|Data|Skolem|Var|Reify|Expr|Plex)*,                 repo?, (slot)*, resl?)<br>                <br>                Attributes:<br>                Var: @mode; possible values: +|-|?; default value: ?; optional                 attribute <br>                Rel: @per; possible values: plain|value|effect|modal; default                 value: plain; optional attribute<br>                Fun: @per; possible values: plain|value|effect|modal; default                 value: plain; optional attribute <br>                if, then, else: @arg; possible values: String; optional attribute<br>                Rule: @evaluation; possible values: weak|strong; default value:                 strong; optional attribute <br>                Rule: @style; possible values: active|messaging|reasoning;                 default value: reasoning; optional attribute <br>              </p>              <p><b>PR RuleML Layer (<a href="./pr.xsd" target="_blank">pr.xsd</a>)</b></p>              <p><em>Production Rules and Serial Derivation Rules with transactional                 update actions (Assert and Retract)</em></p>              <p>Rule: (label?, scope?, quantification?, oid?, <br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(if, do,                 after?, else?, elseDo?, elseAfter?) | <br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(if,                 then, else?, elseDo?, elseAfter?) )<br>                if: (Atom | And | Or | Equal | Naf | Neg | Assert | Retract |                 Update)<br>                do: (Atom | Assert | Retract | Update | Rule)*<br>                after: (Atom | And | Or | Equal | Naf | Neg | Assert | Retract                 | Update)<br>                elseDo: (Atom | Assert | Retract | Update | Rule)*<br>                elseAfter: (Atom | And | Or | Equal | Naf | Neg | Assert | Retract                 | Update)<br>                Update: (oid | formula | Rulebase | Atom | Rule | Equivalent |                 Entails | Forall | Equal | Neg),<br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(oid                 | formula | Rulebase | Atom | Rule | Equivalent | Entails | Forall                 | Equal | Neg)?<br>              </p>              <p>Attributes:<br>                do, elseDo, elseAfter: @arg; possible values: String; optional                 attribute <br>                Assert: @safety; possible values: transactional|normal; default                 value: normal; optional attribute<br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@all;                 possible values: yes|no; default value=no; optional attribute<br>                Retract: @safety; possible values: transactional|normal; default                 value: normal; optional attribute <br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@all;                 possible values: yes|no; default value=no; optional attribute<br>                Update: @safety; possible values: transactional|normal; default                 value: normal; optional attribute <br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@all;                 possible values: yes|no; default value=no; optional attribute               </p>              <p>&nbsp;</p>              <p><b>RR RuleML Layer (<a href="./rr.xsd" target="_blank">rr.xsd</a>)</b></p>              <p><em>Reaction Rules with complex event and action algebra operators                 and messaging reaction rules with complex event messages</em></p>              <p><em> </em>RuleML: label?, scope?, quantification?, oid?, (Assert                 | Retract | Query)*, Message?<br>                Rule: label?, scope?, quantification?, oid?, <br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(on,                 if?, then?, do, after?, else?, elseDo?, elseAfter?) |<br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(on                 | do) |<br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(if,                 do, after?, else?, elseDo?, elseAfter?) |<br>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(if,                 then, else?, elseDo?, elseAfter?)<br>                on: (Naf | Neg | Atom | Rule | Message | Sequence | Disjunction                 | Xor | Conjunction | Concurrent | Not | Any | Aperiodic | Periodic                 | Ind | Var | Expr)<br>                do: (Atom | Assert | Retract | Update | Message | Succession | Choice |                 Flow | Loop | Ind | Var | Expr)</p>              <p>Attributes:<br>                on: @arg; possible values: String; optional attribute</p>              <p><em>Message Constructs (<a href="./modules/message_module.xsd" target="_blank">message_module.xsd</a>)</em></p>              <p>Message: label?, scope?, quantification?, (oid | Ind | Var |                 Expr), (protocol | Ind | Var | Expr), (sender | receiver | Ind                 | Var | Expr), (content | Atom | Ind | Var | Expr | Plex | Naf                 | Neg | Rulebase | And | Or | Entails | Exists | Equal)<br>                protocol: (Ind | Var | Expr)<br>                sender: (Ind | Var | Expr)<br>                receiver: (Ind | Var | Expr)<br>                content: (Atom | Ind | Var | Expr | Plex | Naf | Neg | Rulebase                 | And | Or | Entails | Exists | Equal)</p>              <p>Attributes:<br>                Message: @mode; possible values: inbound | outbound; required                 attribute <br>                Message: @directive; possible values: performatives, e.g. ACL:inform;                 required attribute </p>              <p><em>Time and Event Interval Constructs (<a href="./modules/algebra_module.xsd" target="_blank">algebra_module.xsd</a>)</em></p>              <p>time: (Ind | Var | Expr)<br>                interval: (Interval | Plex | Var)<br>                Interval: (oid?, (on | time | Naf | Neg | Atom | Rule | Message                 | Ind | Var | Expr | Sequence | Disjunction | Xor | Conjunction                 | Concurrent | Not | Any | Aperiodic | Periodic), (on | time |                 Naf | Neg | Atom | Rule | Message | Ind | Var | Expr | Naf | Neg                 | Atom | Rule | Message | Sequence | Disjunction | Xor | Conjunction                 | Concurrent | Not | Any | Aperiodic | Periodic))</p>              <p><em>Complex Event and Action Algebra Constructs (<a href="./modules/algebra_module.xsd" target="_blank">algebra_module.xsd</a>)</em></p>              <p> <em>Complex Event Algebra:</em><br>                Sequence: (oid?, (on | Naf | Neg | Atom | Rule | Message | Ind                 | Var | Expr | Sequence | Disjunction | Xor | Conjunction | Concurrent                 | Not | Any | Aperiodic | Periodic)*)<br>                Disjunction: (oid?, (on | Naf | Neg | Atom | Rule | Message |                 Ind | Var | Expr | Sequence | Disjunction | Xor | Conjunction                 | Concurrent | Not | Any | Aperiodic | Periodic)*)<br>                Conjunction: (oid?, (on | Naf | Neg | Atom | Rule | Message |                 Ind | Var | Expr | Sequence | Disjunction | Xor | Conjunction                 | Concurrent | Not | Any | Aperiodic | Periodic)*)<br>                Xor: (oid?, (on | Naf | Neg | Atom | Rule | Message | Ind | Var                 | Expr | Sequence | Disjunction | Xor | Conjunction | Concurrent                 | Not | Any | Aperiodic | Periodic)*)<br>                Concurrent: (oid?, (on | Naf | Neg | Atom | Rule | Message | Ind                 | Var | Expr | Sequence | Disjunction | Xor | Conjunction | Concurrent                 | Not | Any | Aperiodic | Periodic)*)<br>                Not: (oid?, (on | Naf | Neg | Atom | Rule | Message | Ind | Var                 | Expr | Sequence | Disjunction | Xor | Conjunction | Concurrent                 | Not | Any | Aperiodic | Periodic, interval | Interval | Plex                 | Var))<br>                Any: (oid?, (Ind | Data | Var), (on | Naf | Neg | Atom | Rule                 | Message | Ind | Var | Expr |Sequence | Disjunction | Xor | Conjunction                 | Concurrent | Not | Any | Aperiodic | Periodic, interval | Interval                 | Plex | Var))<br>                Aperiodic: (oid?, (on | Naf | Neg | Atom | Rule | Message | Ind                 | Var | Expr | Sequence | Disjunction | Xor | Conjunction | Concurrent                 | Not | Any | Aperiodic | Periodic, interval | Interval | Plex                 | Var))<br>                Periodic: (oid?, (time | Ind | Var | Expr), (interval | Interval                 | Plex | Var))</p>              <p><em>Complex Action Algebra:</em><br>                Succession: (oid?, (do | Atom | Assert | Retract | Update | Rule                 | Ind | Var | Expr | Succession | Choice | Flow | Loop)*)<br>                Choice: (oid?, (do | Atom | Assert | Retract | Update | Rule |Ind                 | Var | Expr | Succession | Choice | Flow | Loop)*)<br>                Flow: (oid?, (do | Atom | Assert | Retract | Update | Rule | Ind                 | Var | Expr | Succession | Choice | Flow | Loop)*)<br>                Loop: (oid?, (do | Atom | Assert | Retract | Update | Rule | Ind                 | Var | Expr | Succession | Choice | Flow | Loop)*)</p>              <p>&nbsp;</p>              <p><b>KR Temporal / Event / Action / Transition / Process Logics                 Layer (<a href="./kr.xsd" target="_blank">kr.xsd</a>)</b></p>              <p><em>State Processing Constructs (<a href="./modules/state_module.xsd" target="_blank">state_module.xsd</a>)</em></p>              <p>state: (Ind | Var | Expr)<br>                Initiates: (oid?, (state | Ind | Var | Expr))<br>                Terminates: (oid?, (state | Ind | Var | Expr))<br>                HoldsState: (oid?, (state | Ind | Var | Expr), (time | interval                 | Ind | Var | Expr | Interval) )</p>              <p>&nbsp;</p>              <p>&nbsp;</p>              <h3><a name="meta"></a>Reaction RuleML 0.2 Meta Models</h3>              <p><strong>Reaction RuleML 0.2 generalized rule model</strong></p>              <p><img src="../images/Rule.gif" width="511" height="617"></p>              <p><strong>Reaction RuleML 0.2 Formula</strong></p>              <p><img src="../images/Formula.gif" width="570" height="642"></p>              <p><strong>Reaction RuleML 0.2 Atom</strong></p>              <p><img src="../images/Atom.gif" width="247" height="112"></p>              <p><img src="../images/Term.gif" width="375" height="201"></p>              <p><strong>Reaction RuleML 0.2 Derivation Rule</strong></p>              <p><img src="../images/DerivationRule.gif" width="397" height="286"></p>              <p><strong>Reaction RuleML 0.2 Production Rule</strong></p>              <p><img src="../images/ProductionRule.gif" width="461" height="380"></p>              <p><strong>Reaction RuleML 0.2 Serial Horn Rule with (transactional                 update) actions</strong></p>              <p><img src="../images/SerialHornRule.gif" width="444" height="409"></p>              <p><a href="index.htm">&lt;&lt; back</a>               <p>&nbsp;</p>            </div></td>        </tr>      </table>      <p><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><img src="../images/transparent.gif" width="590" height="8" align="absmiddle" /></span></font></p></td>  </tr></table><table width="800" cellpadding="0" cellspacing="1" border="0">  <tr>     <td ></td>  </tr></table><table width="800" border="0" cellspacing="0" cellpadding="0">  <tr valign="middle">     <td height="19" colspan="3" bgcolor="#666666"> <div align="center"></div>      <div align="center"><font color="#FFFFFF">Site Contact: <a href="http://ibis.in.tum.de/staff/paschke/index.htm" target="_blank">Adrian Paschke </a>-         Last Update 2006-10-13</font></div></td>  </tr>  <tr valign="middle">     <td width="187" height="19"> <div align="center"></div></td>    <td height="19">&nbsp;</td>    <td width="180" height="19">&nbsp;</td>  </tr></table><table width="800" border="0" cellspacing="0" cellpadding="0">  <tr>     <td align="center">           </td>  </tr>  <tr>    <td align="center"><div align="center"></div></td>  </tr></table></body></html>