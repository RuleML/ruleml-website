<html xmlns="http://www.w3.org/1999/xhtml"><head><title>Reaction RuleML</title><meta name="description" content="Reaction RuleML" /><meta name="keywords" content="Reaction Rules, Production Rules, ECA Rules, Active Rules, RuleML, ECA-RuleML, Event Logics, Action Logics, Event Calculus, Situation Calculus, Interval Calculus, Interval-based Event Calculus, Temporal Action Logic (TAL), Event Driven Architectures (EDA), Complex Event Algebra, Snoop, Transaction Logics, Update Logics, Dynamic Evolving Logic Programming, R2ML, Production Rule Representation (PRR), Agent Communication, Agent Negotiation, FIPA ACL, Action Algebra, Event Condition Action ECA, Event Notification, Event Messaging, Forward-Reasoning, Backward-Reasoning, Prova, Rule Markup, RIF, Semantic Web, Rewerse" /><meta name="Generator" content="&copy; 2002-2006 RuleML" /><meta name="robots" content="index, follow" /><meta http-equiv="Content-Type" content="text/html;>charset=iso-8859-1" /><link href="./css/template_css.css" rel="stylesheet" type="text/css" /></head><body bgcolor=#ffffff leftmargin="3" topmargin="3"><font color="#FFFFFF"></font><!-- Keywords: Reaction Rules, Production Rules, ECA Rules, Active Rules, RuleML, ECA-RuleML, Event Logics, Action Logics, Event Calculus, Situation Calculus, Interval Calculus, Interval-based Event Calculus, Temporal Action Logic (TAL), Event Driven Architectures (EDA), Complex Event Algebra, Snoop, Transaction Logics, Update Logics, Dynamic Evolving Logic Programming, R2ML, Production Rule Representation (PRR), Agent Communication, Agent Negotiation, FIPA ACL, Action Algebra, Event Condition Action ECA, Event Notification, Event Messaging, Forward-Reasoning, Backward-Reasoning, Prova, Rule Markup, RIF, Semantic Web, Rewerse --><table width="800" border="0" cellspacing="1" cellpadding="0" bordercolor="#FFFFFF">  <tr>    <td height="10"><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"></font><font color="#FFFFFF" size="2">      </font><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"></font></b></font><font color="#FFFFFF" size="2">      </font><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FF8000" size="5" face="Geneva, Arial, Helvetica, san-serif"><span class="pathway"><span class="pathway"><strong><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><img src="./images/transparent.gif" width="15" height="5" align="absmiddle" /></span></font></b></font></b></font></strong></span></span></font></b></font></b></font><font color="#FFFFFF" size="2">      </font><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><img src="./images/transparent.gif" width="181" height="8" align="absmiddle" /></span></font><font color="#FFFFFF" size="2">      </font></b></font></td>    <td width="289" height="10">&nbsp;</td>    <td width="93" height="10" valign="bottom"> <div align="right"></div></td>    <td colspan="2" valign="bottom"> <div align="right"><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><img src="./images/transparent.gif" width="10" height="10" /></b></font></b></font>      </div></td>  </tr>  <tr>    <td height="27" colspan="2" bgcolor="#666666"><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"><span class="pathway"><span class="pathway"><strong><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><img src="./images/transparent.gif" width="15" height="5" align="absmiddle" /></span></font></b></font></b></font></strong></span></span></font></b></font></b></font><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;">Reaction Rules for the Rule Markup Language</span></font></td>    <td height="27" colspan="3" bgcolor="#666666"> <div align="right"><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><a href="http://reaction.ruleml.org/"><font color="#333333"><u>Reaction      RuleML Home</u></font></a><img src="./images/transparent.gif" width="10" height="10" align="absmiddle" />        </span></font></div></td>  </tr>  <tr>    <td colspan="4" background="./images/striche_rechts_nur_rechts_breit.gif">      <div align="left"><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"><span class="pathway"><span class="pathway"><strong><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><img src="./images/transparent.gif" width="15" height="5" align="absmiddle" /></span></font></b></font></b></font></strong></span></span></font></b></font></b></font><font color="#FF8000" size="5" face="Geneva, Arial, Helvetica, san-serif">Reaction RuleML</font></b></font></div></td>	<td height="60"><div align="right"><a href="http://www.ruleml.org/" target="_blank"><img src="./images/RuleMLlogo2005.jpg" width="120" height="29" hspace="10" /></a></div></td>  </tr>  <tr bgcolor="#FF8000">    <td height="10" bgcolor="#666666"><span class="pathway"><span class="pathway"><strong><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><img src="./images/transparent.gif" width="10" height="10" align="absmiddle" /></span></font></b></font></b></font></strong></span></span>      <div align="right"></div></td>    <td height="10" colspan="4">&nbsp;</td>  </tr>  <tr>    <td width="174" height="106" background="./images/keyboard.jpg">&nbsp;</td>    <td bgcolor="#CCCCCC" height="106" colspan="4" valign="middle"> <div align="left"></div>      <table width="100%" border="0" cellspacing="12">        <tr>          <td colspan="2" valign="top" > <div align="justify">		      <h1 align="center"> Reaction RuleML</h1>              <p align="center"><strong>Adrian Paschke, Alexander Kozlenkov, Harold                Boley, Said Tabet, Michael Kifer, Mike Dean</strong></p>              <p align="center">Version history:<br />                2006-10-12 - <a href="./0.1/index.htm">Reaction RuleML 0.1</a> <br>                2007-07-22 - <a href="./0.2/index.htm">Reaction RuleML 0.2</a> </p>              <p align="center"><strong>Quick Links:</strong></p>			  <p align="center"><a href="./0.2/syntax.htm">Syntax</a>, <a href="./0.2/xsd.htm">Schema</a>,                <a href="./0.2/examples.htm">Examples</a>, <a href="./0.2/syntax.htm" target="_blank">Glossary</a>              </p>              <table border="0" align="left">                <tr>                  <td valign="top" colspan="2"><strong><font color="#FF8000" size="3">Overview</font></strong><a name="overview"></a>                  </td>                </tr>                <tr>                  <td valign="top" colspan="2"><div align="justify">                      <p><b>Reaction RuleML </b> is a general, practical, compact                         and user-friendly XML-serialized language and rule interchange                         format for the family of reaction rules. It incorporates                         different kinds of production, action, reaction, complex                         event notification / messaging and KR temporal/event/action                         logic rules into the native RuleML syntax using a system                         of step-wise extensions. In particular, the approach covers                         different kinds of reaction rules from various domains                         such as global active-database ECA rules and triggers,                         forward-directed production rules, backward-reasoning                         temporal-KR event/action/process logics, complex event                         processing, notification &amp; messaging and active update,                         transition and transaction logics. It covers different                         <b>execution styles</b> for processing them such as <b>active</b>,                         where the reaction rules are applied in a global context                         and actively pull or detect the events possibly clocked                         by a monitoring/validity time function, <b>messaging</b>,                         where the reaction rules send event messages and wait                         (listen) on or query for matching event message instances,                         e.g. incoming event messages (inbound), which match with                         the define event definition patterns, and <b>reasoning</b>,                         where the focus is on the formalization of events and                         actions and reasoning on their effects on changeable knowledge                         states (fluents) and state transitions. Reaction rules                         can be specified on a global level in a tight combination                         with other rule types such as derivation rules or integrity                         constraints or locally, i.e. nested within other derivation                         or reaction rules. There are different <b>evaluation styles</b>                         for reaction rules such as strong and weak interpretation                         which are used to manage the "justification lifecycle"                         of local reaction rules in the derivation process of the                         outer rules. Reaction RuleML supports <b>procedural calls</b>                         on external procedures with side effects and enables expressive                         <b>transactional OID-based updates</b> on the extensional                         and intensional knowledge base, i.e. on facts and rules.                         Sophisticated postconditional verification, validation                         and integrity tests (V&amp;V&amp;I) using integrity constraints                         or test cases can be applied as post-conditional tests,                         which possibly might lead to roll-backs of the update                         actions. Complex events and actions can be expressed in                         terms of <b>complex event / action algebra operators</b>                         and workflow-like processes and coordination patterns.                         Different complex event processing, selection and consumption                         policies can be configured.</p>                      </div></td>                </tr>              </table>            </div></td>        </tr>      </table></td>  </tr>  <tr>    <td height="13" bgcolor="#FF8000"><span class="pathway"><span class="pathway"><strong><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><img src="./images/transparent.gif" width="15" height="5" align="absmiddle" /></span></font></b></font></b></font></strong></span></span><a href="http://reaction.ruleml.org/"><font color="#333333"><u>Reaction      RuleML Home</u></font></a></td>    <td height="13" colspan="4" bgcolor="#666666"><span class="pathway"><span class="pathway"><strong><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font size="6" face="Verdana, Arial, Helvetica, sans-serif" color="#F0DFB9"><b><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><img src="./images/transparent.gif" width="10" height="5" align="absmiddle" /><img src="./images/transparent.gif" width="10" height="18" align="absmiddle" /></span></font></b></font></b></font></strong></span></span></td>  </tr>  <tr>    <td height="106" valign="top"> <table width="100%" border="0" cellspacing="12">        <tr>          <td colspan="2" valign="top" > <div align="justify">              <table border="0" align="left">                <tr>                  <td width="134" valign="top"><strong><font color="#FF8000">Content</font></strong></td>                </tr>                <tr>                  <td valign="top"><p align="left"> <a href="./index.htm#overview">Overview</a><br />				  				  <a href="./index.htm#scope">Scope</a><br>                      <a href="./index.htm#layers">Modularization</a><br />					   <a href="./index.htm#changes">Changes</a><br />                      <a href="./index.htm#examples">Examples</a><br />                                            <a href="./index.htm#xsd">XSD Schema</a><br />                      <a href="./index.htm#syntax">Syntax</a><br>                      <a href="./index.htm#glossary">Glossary</a><br />					   <a href="./index.htm#editor">Editor</a><br />                      <a href="./index.htm#validation">Validation</a><br />					  <a href="./index.htm#translation">Translators</a><br />  					  <a href="./collaboration.htm">Collaboration</a><br />                      <a href="./index.htm#links">References</a></p>                    <p align="left">&nbsp;</p>                    </td>                </tr>                <tr>                  <td valign="top"><strong><font color="#FF8000">News</font><font color="#FFFFFF"></font></strong></td>                </tr>				<tr>                  <td valign="top"> <p><a href="http://2008.ruleml.org" target="_blank">Int.                       RuleML Symposium on Rule Interchange and Applications</a>                       (<a href="http://2008.ruleml.org" target="_blank">RuleML-2008</a>),                       2008-10-30/31					  <br><a href="http://www.cs.manchester.ac.uk/ruleML/lightning.php">Additional Calls for Contributions</a></p>					                      <p>New Reaction RuleML <a href="./collaboration.htm">collaboration                       site</a>, 2007-12-06</p>                    <p>Reaction RuleML 0.2 Release, 2007-07-01 (<a href="./0.2/xsd.htm">xsd</a>)</p>				    <p><a href="./news.htm" >all news&gt;&gt;</a></p>                    <p>&nbsp;</p></td>                </tr>				<tr>                  <td valign="top"><strong><font color="#FF8000">Reaction RuleML                    List </font></strong></td>                </tr>                <tr>                  <td valign="top">				  	<p><a href="http://mail.ruleml.org/pipermail/reaction-tg/" target="_blank">Archives</a><br>                      <a href="http://mail.ruleml.org/mailman/listinfo/reaction-tg" target="_blank">Subscribe</a><br>                      <br>                      <em>post a message:</em><br>                      <a href="mailto:reaction-tg@ruleml.org">reaction-tg@ruleml.org</a></p>                    <p>&nbsp;</p></td>                </tr>                <tr>                  <td valign="top"><strong><font color="#FF8000">Publications</font><font color="#FFFFFF"></font></strong></td>                </tr>              <tr>                  <td valign="top">				  	  <p>Paper at VLDB EDA-PS'07 (<a href="./docs/vldb_eda-ps07.pdf" target="_blank">pdf</a>)<p><a href="./docs/Reaction-RuleM_tutorial06.pdf" target="_blank">Reaction                       RuleML 0.1 Tutorial</a> at <a href="http://2006.ruleml.org/group3.html#tutorials" target="_blank">RuleML'06</a>                       (<a href="./docs/Reaction-RuleM_tutorial06.pdf" target="_blank">slides</a>)</p>                    <p>Reaction RuleML Poster at <a href="http://2006.ruleml.org/" target="_blank">RuleML                      2006</a> (<a href="./docs/RuleML06_Poster.pdf" target="_blank">pdf</a>)</p>                    <p>Position Paper at Business Rules Forum 2006 (<a href="./docs/ReactionRuleML_BusinessRulesForum_06.pdf" target="_blank">pdf</a>)<br>                    </p>                    <p><a href="./publications.htm" >all publications&gt;&gt;</a></p>                    <p>&nbsp;</p></td>                </tr>				<tr>                  <td valign="top"><strong><font color="#FF8000">Members Section</font></strong></td>                </tr>                <tr>                  <td valign="top"><p><a href="./members/index.htm">Login</a></p></td>                </tr>                <tr>                  <td valign="top">&nbsp;</td>                </tr>              </table>            </div></td>        </tr>      </table>      <br />      <font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><img src="./images/transparent.gif" width="190" height="8" align="absmiddle" /></span></font>    </td>    <td height="106" colspan="4" valign="top"> <table width="100%" border="0" cellspacing="10">        <tr>          <td height="610" colspan="2" valign="top" >            <div align="justify">              <h3>Scope<a name="scope"></a></h3>              <p align="center"><img src="images/scope.gif" width="590" height="182"></p>			  <p>Reaction RuleML covers constructs for (complex) events, actions                and states/fluents/transition (changeable properties and transitions)                definition and processing/reasoning for different derivation rule,                production rule and reaction rule programs according to the </p>              <p align="center"><a href="./classification.htm" target="_blank"> Reaction RuleML                Classification of the Event / Action / State Definition and Processing                Space</a></p>              <p>&nbsp;</p>			  <h3>Modularization<a name="layers"></a></h3>              <p><a href="http://reaction.ruleml.org/">Reaction                 RuleML</a> follows the design principle of <a href="http://www.ruleml.org/" target="_blank">RuleML</a>                 and defines new constructs within separated modules which are                 added to the <a href="http://www.cs.unb.ca/~boley/papers/ruleml-family.pdf" target="_blank">RuleML                 family</a> as additional layers on top of the <a href="http://www.ruleml.org/modularization/" taret="_blank">hornlog                 layer of RuleML</a>. Version 0.2 generalizes the syntax of rules                 to a <em>core rule format</em> which can be specialized in different                 language families to different rule types such as <em>derivation                 rules</em>, <em>production rules</em>, <em>reaction rules</em>                 as well as mixed formats such as serial derivation rules which                 contain locally nested reaction rules and event/action constructs,                 e.g. update literals. The layers are not organized around complexity,                 but add different modelling expressiveness to the <a href="http://www.ruleml.org/spec/" target="_blank">Reaction                 RuleML core</a> for the representation of behavioural (re)action                 and KR event/action logic. </p>              <p>The language fulfils typical criteria for good language design                such as <em>minimality</em>, <em>symmetry</em> and <em>orthogonality</em>.                With minimality we mean that Reaction RuleML provides only a small                set of needed language constructs in addition to the existing                constructs in RuleML, i.e., the same meaning cannot be expressed                by different language constructs. Symmetry is fulfilled in so                far as the same language constructs always expresses the same                semantics regardless of the context they are used in. Orthogonality                permits every meaningful combination of a language constructs                to be applicable. Moreover, Reaction RuleML satisfies typical                knowledge representation adequacy criteria such as <em>epistemological                adequacy</em> w.r.t. the various application domains of reaction/action/production                rules and KR event / action logics:</p>              <p>&quot;<em>A representation is called epistemologically adequate                for a person or a machine if it can be used practically to express                the facts that one actually has about the aspects of the world</em>.&#8222;              </p>              <p align="right""><font size="0.5">McCarthy/Hayes 1969</font><br>              </p>              <p align="center"><img src="images/rr_layer.jpg" width="590" height="374"></p>              <p>&nbsp;</p>              <p><a href="">Derivation RuleML</a>: Defines Syntax and Semantics                for Derivation Rules</p>              <p align="center"><img src="images/derivation_ruleml.gif" width="292" height="160"></p>              <p><a href="">PR RuleML</a>: Defines Syntax and Semantics for Production                Rules</p>              <p align="center"><img src="images/pr_ruleml.gif" width="293" height="160"></p>              <p><a href="">Reaction RuleML</a>: Defines Syntax and Semantics for Reaction Rules              </p>              <p align="center"><img src="images/reaction_ruleml.gif" width="369" height="160"> </p>			  <p><a href="">KR RuleML</a>: Defines Syntax and Semantics for KR                event/action logic formalisms and state, transition, process logic                formalisms</p>              <p>&nbsp;</p>			   <h3>Changes<a name="changes"></a></h3>              <p>Changes in this 0.2 release relative to the previous version                 <a href="./0.1/index.htm">0.1</a> are detailed below, including examples where appropriate</p>              <p>1) Reaction RuleML 0.2 replaces <em>&lt;Implies&gt;</em> from                 RuleML and generalizes the syntax of different rule families by                 introducing one general <em>&lt;Rule&gt;</em> construct for all                 types of Rules. For instance: </p>              <p>Derivation Rule:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Production Rule:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ECA Rule:</p>              <pre>&lt;Rule style=&quot;reasoning&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Rule style=&quot;active&quot;&gt;          &lt;Rule style=&quot;active&quot;&gt;<br>&nbsp;&nbsp;&lt;if&gt;...&lt;/if&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      &lt;if&gt;...&lt;/if&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            &lt;on&gt;...&lt;/on&gt;<br>&nbsp;&nbsp;&lt;then&gt;...&lt;/then&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      &lt;do&gt;...&lt;/do&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;          &lt;if&gt;...&lt;/if&gt;<br>&lt;/Rule&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     &lt;/Rule&gt;&nbsp;&nbsp;                             &lt;do&gt;...&lt;/do&gt; &lt;/Rule&gt; </pre><p></p>               <p>2) Reaction RuleML 0.2 adds an optional meta data label <em>&lt;label&gt;</em>,                 a scope <em>&lt;scope&gt;</em>, and a qualification <em>&lt;qualification&gt;</em>                 to a RuleML specification <em>&lt;RuleML&gt;</em>, rule bases                 (module) <em>&lt;Rulebase&gt;</em> or <em>&lt;Assert&gt;</em>                 (implicit rule base), Queries <em>&lt;Query&gt;</em>, rules <em>&lt;Rule&gt;</em>,                 and facts/goals <em>&lt;Atom&gt;</em>.               <ul>                <li>The<em> meta data label </em>can be used to define additional                   meta data (binary propety-value pairs) about the rule, e.g.                   the user-defined rule name or Dublin Core annotations such as                   dc_data or dc_author.</li>                <li>The <em>scope</em> defines a view on the rule base, i.e. it                   constructs a view using query expressions on an explicitly closed                   part of the (possible distributed) modularized knowledge base.                   More specific scopes of queries and goals (e.g. goal literals                   in the body of a rule) overwrite defined default scopes of rule                   bases which apply by default to all goals/queries in the respective                   rule bases. If no scope is specified a query/goal applies on                   the maximum scope which is the entire knowledge base (note,                   might be possibly an open distributed KB on the Web).</li>                <li>The <em>qualification</em> defines an optional set of rule                   qualifications such as a validity value, fuzzy value or a priority                   value. Again more special qualifications of e.g. rules overwrite                   more general qualifcations of rule bases (modules), e.g. module1                   &gt; module 2 (module1 is superior to module2).</li>              </ul>              <pre>&lt;Assert&gt; &lt;Rulebase&gt;   &lt;!-- qualification of rule base / module   &lt;qualification&gt;     &lt;Plex&gt;          &lt;!-- module 1 has priority level 1 --&gt;          &lt;Expr&gt;&lt;Fun per=&quot;value&quot;&gt;priority&lt;/Fun&gt;&lt;Ind type=&quot;xsd:Integer&quot;&gt;1&lt;/Ind&gt;&lt;/Expr&gt;          &lt;!-- the module is applicable after 2007-07-01 --&gt;          &lt;Expr&gt;                 &lt;Fun per=&quot;value&quot;&gt;validity&lt;/Rel&gt;<br>                &lt;Expr&gt;                    &lt;Fun per=&quot;value&quot;&gt;start&lt;/Fun&gt;                    &lt;Ind&gt;2007-07-01&lt;/Ind&gt;                &lt;/Expr&gt;          &lt;/Expr&gt;     &lt;/Plex&gt;   &lt;/qualification&gt;   &lt;!-- oid of the rule base / module --&gt;   &lt;oid&gt;&lt;Ind&gt;module1&lt;/Ind&gt;&lt;/oid&gt;       &lt;Rule&gt;    &lt;!-- meta data label --&gt;    &lt;label&gt;      &lt;Plex&gt;         &lt;Expr&gt;&lt;Fun uri=&quot;dc:titel&quot; per=&quot;value&quot;/&gt;&lt;Ind&gt;rule1&lt;/Ind&gt;&lt;/Expr&gt; &lt;!-- user-defined rule name --&gt;<br>         &lt;Expr&gt;&lt;Fun uri=&quot;dc:author&quot; per=&quot;value&quot;/&gt;&lt;Ind&gt;Adrian Paschke&lt;/Ind&gt;&lt;/Expr&gt;         &lt;Expr&gt;               &lt;Fun uri=&quot;dc:description&quot; per=&quot;value&quot;/&gt;               &lt;Ind&gt;Discount rule for premium customers&lt;/Ind&gt;         &lt;/Expr&gt;      &lt;/Plex&gt;    &lt;/label&gt;      &lt;!-- rule scope --&gt;    &lt;scope&gt;       &lt;!-- define scope for the rule on the local module with oid &quot;module1&quot;            i.e. all goals of the rule by default apply with respect to the scope &quot;#module1&quot;                   --&gt;       &lt;Ind uri=&quot;#module1&quot;/&gt;    &lt;/scope&gt;      &lt;!-- rule qualification --&gt;    &lt;qualification&gt;      &lt;Plex&gt;        &lt;Expr&gt; &lt;!-- applicability period of the rule --&gt;         &lt;Fun per=&quot;value&quot;&gt;validity&lt;/Fun&gt;<br>         &lt;Expr&gt;           &lt;Fun per=&quot;value&quot;&gt;start&lt;/Fun&gt;           &lt;Ind&gt;2007-07-01&lt;/Ind&gt;         &lt;/Expr&gt;         &lt;Expr&gt;             &lt;Fun per=&quot;value&quot;&gt;end&lt;/Fun&gt;           &lt;Ind&gt;2007-08-01&lt;/Ind&gt;         &lt;/Expr&gt;        &lt;/Expr&gt;       &lt;/Plex&gt;     &lt;/qualification&gt;       &lt;!-- object id of the rule --&gt;     &lt;oid&gt;&lt;Ind&gt;r0001&lt;/Ind&gt;&lt;/oid&gt;       &lt;!-- main part of the rule --&gt;     &lt;if&gt;      &lt;Atom&gt;         &lt;Rel&gt;premium&lt;/Rel&gt;         &lt;Var&gt;Customer&lt;/Var&gt;      &lt;/Atom&gt;     &lt;/if&gt;     &lt;then&gt;      &lt;Atom&gt;         &lt;Rel&gt;discount&lt;/Rel&gt;         &lt;Var&gt;Customer&lt;/Var&gt;         &lt;Ind type=&quot;math:Percentage&quot;&gt;10&lt;/Ind&gt;      &lt;/Atom&gt;     &lt;/then&gt;    &lt;/Rule&gt;      ... &lt;/Rulebase&gt;&lt;/Assert&gt;</pre>              <p>3) Reaction RuleML 0.2 defines the following update actions which                 can be used within rules (e.g. production rules, serial Horn rules                 or ECA reaction rules) to dynamically modify, add and retract                 knowledge:</p>              <p><em>Assert</em> (add knowledge); <em>Retract</em> (retract knowledge);                 <em>Update</em> (update knowledge); <em>Equal</em> (assign knowledge                 to variable)</p>              <p>The optinal attribute <em>@all=&quot;yes|no&quot;;</em> default=&quot;<em>no</em>&quot;                 in <em>&lt;Assert&gt;</em>, <em>&lt;Retract&gt;</em> and <em>&lt;Update&gt;</em>                 denotes if the update action applies on all knowledge formulas                 or all modules which match the pattern or module oid defined in                 the update action.<br>                The optinal attribute <em>@safety=&quot;normal|transaction&quot;</em>;                 default=&quot;<em>transaction</em>&quot; in <em>&lt;Assert&gt;</em>,                 <em>&lt;Retract&gt;</em> and <em>&lt;Update&gt;</em> transactional                 (bulk) updates which might be possible rolled-back or normal updates                 without transaction safety.<br>                The update construct is introduced for convinience reasons. The                 most general form is <em>update(fact1,fact2)</em> or <em>update(module1,module2)</em>.                 This is equivalent to the two update actions <em>retract(fact1),                 assert(fact2)</em> or <em>retract(oid1), assert(oid2)</em>. A                 simpler form <em>update(fact1)</em> or <em>update (oid1)</em>                 is equivalent to <em>retract(fact1), assert(fact1)</em> or <em>retract(oid1)</em>,                 <em>assert(oid1)</em>. </p>              <pre>&lt;Rule style=&quot;active&quot;&gt; &lt;!-- production rule --&gt; <br>   &lt;if&gt;<br>       &lt;And&gt;<br>            &lt;Atom&gt;&lt;Rel&gt;available&lt;/Rel&gt;&lt;Var&gt;Service&lt;/Var&gt;&lt;/Atom&gt;<br>            &lt;Atom&gt;&lt;Rel&gt;request&lt;/Rel&gt;&lt;Var&gt;Task&lt;/Var&gt;&lt;/Atom&gt;<br>       &lt;/And&gt;<br>   &lt;/if&gt;<br>   &lt;do&gt;<br>       &lt;Assert&gt;<br>            &lt;Atom&gt;&lt;Rel&gt;loaded&lt;/Rel&gt;&lt;Var&gt;Service&lt;/Var&gt;&lt;Var&gt;Task&lt;/Var&gt;&lt;/Atom&gt;<br>       &lt;/Assert&gt;    &lt;/do&gt; <br>&lt;/Rule&gt;</pre>              <pre>&lt;Rule style=&quot;reasoning&quot;&gt; &lt;!-- serial Horn rule --&gt;<br>  &lt;if&gt;<br>    &lt;And&gt;<br>       &lt;Atom&gt;&lt;Rel&gt;employee&lt;/Rel&gt;&lt;Var&gt;Name&lt;/Var&gt;&lt;Var&gt;Salary&lt;/Var&gt;&lt;/Atom&gt;<br>       &lt;Equal&gt; &lt;!-- increase salary and assign value to variable --&gt;<br>           &lt;Var&gt;IncreasedSalary&lt;/Var&gt;<br>           &lt;Expr&gt;<br>              &lt;Fun per=&quot;value&quot;&gt;add&lt;/Fun&gt;              &lt;Var&gt;Salary&lt;/Var&gt;              &lt;Var&gt;Bonus&lt;/Var&gt;           &lt;/Expr&gt;<br>       &lt;/Equal&gt;       &lt;Update all=&quot;yes&quot; safety=&quot;transaction&quot;&gt; &lt;!-- transactional all-update with new salary --&gt;           &lt;Atom&gt;               &lt;Rel&gt;employee&lt;/Rel&gt;               &lt;Var&gt;Name&lt;/Var&gt;               &lt;Var&gt;IncreasedSalary&lt;/Var&gt;           &lt;/Atom&gt;       &lt;/Update&gt;<br>    &lt;/And&gt;<br>  &lt;/if&gt;  &lt;then&gt;     &lt;Atom&gt;        &lt;Rel&gt;increasedSalary&lt;/Rel&gt;        &lt;Var mode=&quot;?&quot;&gt;Name&lt;/Var&gt; &lt;!-- input or output variable--&gt;        &lt;Var mode=&quot;-&quot;&gt;IncreasedSalary&lt;/Var&gt; &lt;!-- output variable --&gt;     &lt;/Atom&gt;  &lt;/then&gt; &lt;/Rule&gt;&lt;Rule style=&quot;active&quot;&gt; &lt;!-- production rule with complex action on modules --&gt;   &lt;if&gt;      &lt;Atom&gt;         &lt;Rel&gt;occurs&lt;/Rel&gt;         &lt;Ind&gt;outage&lt;/Ind&gt;      &lt;/Atom&gt;   &lt;/if&gt;   &lt;do&gt;     &lt;Succession&gt; &lt;!-- complex action --&gt;       &lt;!-- add rule base with oid &quot;module2&quot; --&gt;       &lt;Assert&gt;           &lt;!-- oid of asserted rulebase (module) --&gt;           &lt;oid&gt;&lt;Ind&gt;module2&lt;/Ind&gt;&lt;/oid&gt;           &lt;Rulebase&gt;              &lt;Rule&gt;                 &lt;oid&gt;&lt;Ind&gt;r1&lt;/Ind&gt;&lt;/oid&gt;                 ...              &lt;/Rule&gt;           &lt;/Rulebase&gt;       &lt;/Assert&gt;       &lt;!-- update rule r1 with rule r2 --&gt;       &lt;Update&gt;           &lt;oid&gt;&lt;Ind uri=&quot;#r1&quot;/&gt;&lt;/oid&gt;           &lt;Rule&gt;&lt;oid&gt;&lt;Ind&gt;r2&lt;/Ind&gt;&lt;/oid&gt;...&lt;/Rule&gt;       &lt;/Update&gt;       &lt;!-- remove module1 --&gt;       &lt;Retract&gt;&lt;oid&gt;&lt;Ind uri=&quot;#module1&quot;/&gt;&lt;/oid&gt;&lt;/Retract&gt;     &lt;/Succession&gt;    &lt;/do&gt;&lt;/Rule&gt;</pre>              <p>4) Reaction RuleML 0.2 redefines the complex event and action                 algebra and adds further operators for complex event and action                 definitions: </p>              <p>Action Algebra:<br>                &nbsp;&nbsp;&nbsp;&nbsp;<em>Succession</em> (Ordered Succession                 of Actions), <em>Choice</em> (Non-Determenistic Choice), <em><br>                &nbsp;&nbsp;&nbsp;&nbsp;Flow</em> (Parallel Flow), <em>Loop</em>                 (Loops)<br>                Event Algebra: <br>                &nbsp;&nbsp;&nbsp;&nbsp;<em>Sequence</em> (Ordered), <em>Disjunction</em>                 (Or) , <em>Xor</em> (Mutal Exclusive), <em>Conjunction</em> (And),                 <em><br>                &nbsp;&nbsp; Concurrent</em> , <em>Not</em>, <em>Any</em>, <em>Aperiodic</em>,                 <em>Periodic</em> </p>              <p>&nbsp;</p>              <p>5) Reaction RuleML 0.2 defines Complex Event Messages also on                 the top-level of RuleML for message interchange: </p>              <pre>&lt;RuleML&gt;<br>&nbsp;&nbsp;&lt;Message mode=&quot;outbound&quot; directive=&quot;ACL:inform&quot;&gt;...&lt;/Message&gt;&lt;/RuleML&gt; </pre>              <p>&nbsp;</p>              <p>6) Reaction RuleML 0.2 defines the RuleML Interface Description                 Language (RuleML IDL) for describing the signatures of public                 rule functions together with their mode (&quot;+&quot;=input;                 &quot;-&quot;=output; &quot;?&quot;=input or output) and type                 declarations. These interface descriptions are important in open                 distributed rule-based environments. </p>              <pre>&lt;Assert&gt; &lt;Rulebase&gt;<br>   &lt;label&gt;<br>       &lt;!-- Interface describing the signature of the add function in this rule base (module)            which concats two Strings --&gt;       &lt;Interface&gt;<br>          &lt;label&gt;            &lt;!-- Huma-oriented description of the interface --&gt;<br>            &lt;Expr&gt;<br>               &lt;Fun uri=&quot;dc:description&quot;/&gt;<br>               &lt;Ind&gt;adds (concats) two Strings and returns the result as first argument&lt;/Ind&gt;            &lt;/Expr&gt;          &lt;/label&gt;<br>          &lt;Fun per=&quot;value&quot;&gt;add&lt;/Fun&gt;           &lt;Var type=&quot;java://java.lang.String&quot; mode=&quot;-&quot;&gt;Result&lt;/Var&gt; <br>          &lt;Var type=&quot;java://java.lang.String&quot; mode=&quot;+&quot;&gt;String1&lt;/Var&gt;           &lt;Var type=&quot;java://java.lang.String&quot; mode=&quot;+&quot;&gt;String2&lt;/Var&gt; <br>       &lt;/Interface&gt;<br>    &lt;/label&gt;<br>    &lt;Rule&gt;       &lt;if&gt;           &lt;!-- Result = String1.concat(String2) --&gt;             &lt;Equal&gt;              &lt;Var java://java.lang.String&gt;Result&lt;/Var&gt;              &lt;Expr&gt;                  &lt;oid&gt;&lt;Var type=&quot;java://java.lang.String&quot;&gt;String1&lt;/Var&gt;&lt;/oid&gt;                  &lt;Fun per=&quot;value&quot;&gt;concat&lt;/Fun&gt;                  &lt;Var type=&quot;java://java.lang.String&quot;&gt;String2&lt;/Var&gt;<br>              &lt;/Expr&gt;           &lt;/Equal&gt;        &lt;/if&gt;        &lt;then&gt;           &lt;Atom&gt;               &lt;Rel&gt;add&lt;/Rel&gt;               &lt;Var type=&quot;java://java.lang.String&quot; mode=&quot;-&quot;&gt;Result&lt;/Var&gt;                &lt;Var type=&quot;java://java.lang.String&quot; mode=&quot;+&quot;&gt;String1&lt;/Var&gt;                &lt;Var type=&quot;java://java.lang.String&quot; mode=&quot;+&quot;&gt;String2&lt;/Var&gt; <br>            &lt;/Atom&gt;       &lt;/then&gt;    &lt;/Rule&gt; &lt;/Rulebase&gt;&lt;/Assert&gt;</pre>              <p>7) Reaction RuleML 0.2 explicitly denotes the usage (@per=&quot;<em>plain|value|effect|modal</em>&quot;)                 of functions and relations rather than providing only @in=&quot;<em>no|yes</em>&quot;                 (change planned generally for RuleML 0.91 to RuleML 0.92 transition).A                 <em>&lt;Rel&gt;</em> or <em>&lt;Fun&gt;</em> with &quot;<em>plain</em>&quot;                 use is left uninterpreted, with &quot;<em>value</em>&quot; use                 is interpreted purely for its value,with &quot;<em>effect</em>&quot;                 use is interpreted impurely both for its value and its (side-)effect                 action (e.g. procedural attachment),and with &quot;<em>modal</em>&quot;                 use is intpereted as pure modality.</p>              <p>8) Reaction RuleML 0.2 generalizes the support for <em>procedural                 attachments</em>. A procedural attachment is a function or predicate                 whose implementation is given by an external procedure. Two types                 of procedural attachments are distinguished:               <ul>                <li><em>Boolean-valued attachments</em> (or predicate attachments),                   wrapped by <em>&lt;Atom&gt;</em>, which call methods which return                   a Boolean value, i.e., which are of Boolean sort (type).</li>                <li><em>Object-valued attachments</em> (or functional attachments),                   wrapped by <em>&lt;Expr&gt;</em>, which are treated as functions                   that take arguments and return one or more objects, i.e., which                   are of a function sort.</li>              </ul>              <pre>&lt;!-- Bind the constructed Java object to the variable Date = java.io.Calendar.getInstance() --&gt;&lt;Equal&gt;	<br>  &lt;Var&gt;Date&lt;/Var&gt;				      <br>  &lt;Expr&gt;		<br>     &lt;!-- class --&gt;<br>     &lt;oid&gt;&lt;Ind uri=&quot;java://java.util.Calendar&quot;/&gt;&lt;/oid&gt; <br>     &lt;!-- constructor  --&gt;<br>     &lt;Fun per=&quot;effect&quot;&gt;getInstance&lt;/Fun&gt;<br>  &lt;/Expr&gt;<br>&lt;/Equal&gt;&lt;!-- Use the bound object of the variable and call a function of the object --&gt;&lt;Atom&gt;  &lt;!-- object previously bound to Date --&gt;  &lt;oid&gt;&lt;Var&gt;Date&lt;/Var&gt;&lt;/oid&gt;  &lt;Rel per=&quot;effect&quot;&gt;isSet&lt;/Rel&gt;  &lt;Ind&gt;1&lt;/Ind&gt;&lt;/Atom&gt;&lt;!-- Call a C# method --&gt;&lt;Atom&gt;  &lt;oid&gt;&lt;Ind uri=&quot;c-sharp://System.Console&quot;/&gt;&lt;/oid&gt;  &lt;Rel uri=&quot;WriteLine&quot;/&gt;  &lt;Ind&gt;Hello World&lt;/Ind&gt;&lt;/Atom&gt;</pre>               <p>9) Reaction RuleML 0.2. is extensible and supports adding XML                 elements and/or attributes of non-RuleML namespaces to RuleML                 terms by using them as types.</p>              <p><pre>&lt;Atom&gt;<br>  &lt;oid&gt;<br>    &lt;Ind type=&quot;cbe:CommonBaseEvent&quot;&gt;i000000&lt;/Ind&gt;<br>  &lt;/oid&gt;<br>  &lt;Rel per=&quot;value&quot; uri=&quot;cbe:msg&quot;/&gt;<br>  &lt;Ind type=&quot;xs:string&quot;&gt;Hello World&lt;/Ind&gt;<br>&lt;/Atom&gt;</pre>              <p>It also supports XPointer and XPath expressions as manipulation                 and query language to point into and select data from external                 XML data sources</p>              <pre>&lt;Atom&gt;   &lt;Rel&gt;name&lt;/Rel&gt;   &lt;Ind uri=&quot;person.xml#xpointer(//Person/LastName[1]/text())/&gt;&lt;/Atom&gt;&lt;Atom&gt;    &lt;Rel uri=&quot;BPEL_Process.xml#xpointer(//invoke[@name=checkHotel])&quot;/&gt;&lt;/Atom&gt;</pre>              <p> It is possible to define query and manipulation expressions                 that operate on (large) resource sets instead on singleton resources,                 e.g. to specify a consturctive view over a set of external nodes                 specified by a XPath query expression.</p>              <pre>&lt;Atom&gt;  &lt;oid&gt;&lt;Ind uri=&quot;customer.xml#xpointer(/Customer[1]/range-to(/Customer[4]))&quot;/&gt;&lt;/oid&gt;&lt;/Atom&gt;</pre>              <p> The URIs are query expressions that return constructive views                 on resource sets that are treated as singletons, i.e. a constructive                 view over a set of resources is a singleton with an unique URI                 denoted by the query expression.. It is possible to bind the views                 to variables similar to the approach of binding constructed Java                 objects to variables and reuse the variables in the local reasoning/execution                 scope.</p>              <pre>&lt;!-- Bind the constructed resource set to the variable Customers  --&gt; &lt;Equal&gt; <br>   &lt;Var&gt;Customers&lt;/Var&gt; <br>   &lt;Expr&gt; <br>      &lt;!-- constructive view as singleton with unique oid --&gt;      &lt;oid&gt;&lt;Ind uri=&quot;customer.xml#xpointer(/Customer[1]/range-to(/Customer[4]))&quot;/&gt;<br>   &lt;/Expr&gt;&lt;Equal&gt;<br>&lt;!-- Access the bound variable using &quot;$&quot; notation --&gt;&lt;Atom&gt;  &lt;Rel&gt;name&lt;/Rel&gt;  &lt;Ind uri=&quot;$Customers/Customer[1]/LastName/text()&quot;/&gt;&lt;/Atom&gt;</pre>              <p>The special &quot;$&quot; notation for variable access in attributes                 is a &quot;short cut&quot; notation for an expression with the                 variable in the unique object identifier (oid) and the query in                 the function of the expression:</p>              <pre> &lt;Expr&gt;<br>   &lt;!-- resource/object or resouce set/object collection bound to variable used as context node --&gt;<br>   &lt;oid&gt;&lt;Var&gt;Customers&lt;/Var&gt;&lt;/oid&gt;<br>   &lt;!-- query expression --&gt;<br>   &lt;Fun per=&quot;value&quot; uri=&quot;Customer[1].LastName/text()&quot;/&gt;<br> &lt;/Expr&gt;</pre>              <p>The Reaction RuleML implementation may support other expression                 languages or query languages such as e.g. SQL, SPARQL, OWL2Prova                 RDF in a similar way to select resource sets and create constructive                 views on external data sources.</p>              <p>&nbsp;</p>              <h3>Examples<a name="examples"></a></h3>              <p> <a href="0.2/examples.htm">Reaction RuleML 0.2 examples</a><br>                <a href="./docs/ReactionRuleML-v0.2-Primer.pdf">Reaction RuleML 0.2 Primer</a></p>              <p>&nbsp;</p>              <h3>XSD Schemas<a name="xsd"></a></h3>              <p>A stable XML Schema specification of <a href="./0.2/xsd.htm">Reaction                RuleML 0.2</a> has been created.</p>              <p>&nbsp;</p>              <h3>Syntax<a name="syntax"></a></h3>              <p>Core Reaction Rule 0.2 Syntax:</p>              <p>              <pre>&lt;Rule style=&quot;active&quot; evaluation=&quot;strong&quot;&gt;<br>  &lt;label&gt; &lt;!-- meta data --&gt; &lt;/label&gt;  &lt;scope&gt; &lt;!-- general scope of rule --&gt; &lt;/scope&gt;<br>  &lt;qualification&gt; &lt;!-- qualifications --&gt; &lt;/qualification&gt;  &lt;oid&gt; &lt;!-- object identifier --&gt; &lt;/oid&gt;<br>  &lt;on&gt; &lt;!-- event --&gt; &lt;/on&gt;<br>  &lt;if&gt; &lt;!-- condition --&gt; &lt;/if&gt;<br>  &lt;then&gt; &lt;!-- conclusion --&gt; &lt;/then&gt;<br>  &lt;do&gt; &lt;!-- action --&gt; &lt;/do&gt;<br>  &lt;after&gt; &lt;!-- postcondition --&gt; &lt;/after&gt;<br>  &lt;else&gt; &lt;!-- else conclusion --&gt; &lt;/else&gt;<br>  &lt;elseDo&gt; &lt;!-- else/alternative action --&gt; &lt;/elseDo&gt;<br>  &lt;elseAfter&gt; &lt;!-- else postcondition --&gt; &lt;/elseAfter&gt;<br>&lt;/Rule&gt;</pre>              <br>              <a href="./0.2/syntax.htm">complete syntax, content models and meta               models &gt;&gt;</a> <p></p>               <p>&nbsp;</p>              <h3>Glossary<a name="glossary"></a></h3><p>Small glossary with basic constructs/tags - a more detailed description                will follow soon:</p>			  <ul>                <li><em>Rule</em>: General reaction rule construct</li>                <li><em>@style:</em> Denotes execution style of the reaction rule:                   "<em>active | messaging | reasoning</em>"; default = "<em>reasoning</em>";                   optional </li>                <li> <em>@evaluation</em>: Optinal attribute denoting the interpretation                   of the reaction rule: "<em>strong | weak</em>"; default=&quot;<em>strong</em>&quot;</li>                <li> <em>on, if, then, do, after, else, elseDo, elseAfter</em>:                  Role tags for the reaction rule parts which might be used to                  specialise a Rule to a certain type, e.g. to a derivation rule                  (if-then or if-then-else), a trigger rule (on-do), a production                  rule (if-do), an ECA rule (on-if-do) and special cases such                  as ECAP rule (on-if-do-after) or mixed rule types such as serial                  derivation rule with alternative action (if-then-elseDo)</li>                <li> <em>Sequence</em>, <em>Disjunction</em>, <em>Conjunction</em>,                   <em>Xor</em>, <em>Concurrent</em>, <em>Not</em>, <em>Any</em>,                   <em>Aperiodic</em>, <em>Periodic</em>: Event Algebra operators</li>                <li><em>Succession</em>, <em>Choice</em>, <em>Flow</em>, <em>Loop</em>:                   Action Algebra operators</li>                <li> <em>Message:</em> Defines an inbound or outbound message</li>                <li> <em>Assert, Retract</em>: Update primitives to update the                  intensional and extensional KB</li>                <li> <em>Initiates, Terminates:</em> KR event/action logics construct                  initiating or terminating a state (a.k.a. fluent or window)</li>              </ul>			  <p><a href="./0.2/">complete glossary (to appear)&gt;&gt;</a></p>              <p>&nbsp;</p>			  <h3>Editor<a name="editor"></a></h3>  			  <p><a href="./manager/manager.jnlp">RuleML / Reaction RuleML Editor</a></p>              <p>&nbsp;</p>              <h3>Validation<a name="validation"></a></h3>              <p><br>                You can validate your Reaction RuleML XML documents online with                the <a href="./validation.htm">Reaction RuleML Validator Services</a>              </p>              <p>&nbsp; </p>              <h3>Translators<a name="translation"></a></h3>				<p>You can translate your Reaction RuleML XML documents with the <a href="./translation.htm">Reaction RuleML Translators Services</a> </p>				 <p>&nbsp; </p>              <h3>References<a name="links"></a></h3>			  <p>			  <ul >                <li>Reaction RuleML 0.2 Primer (<a href="./docs/ReactionRuleML-v0.2-Primer.pdf">pdf</a>)</li>                <li>Paschke, A., Kozlenkov, A., Boley, H.: <em>A Homogenous Reaction                   Rule Language for Complex Event Processing</em>, 2nd International                   Workshop on Event Drive Architecture and Event Processing Systems                   (EDA-PS 2007) , Vienna, Austria, 2007 (<a href="./docs/vldb_eda-ps07.pdf" target="_blank">pdf</a>)</li>                <li>Reaction RuleML White Paper:<a href="./classification.htm" target="_blank">                   <br>                  &quot;Classification of the Event / Action / State Definition                   and Processing Space</a>&quot;</li>                <li>MOF RuleML: The Abstract Syntax of RuleML as a MOF Model:                   <a href="http://www.omg.org/docs/br/03-10-02.pdf" target="_blank"><br>                  http://www.omg.org/docs/br/03-10-02.pdf</a> </li>                <li>Transaction Logics: <a href="" target="_blank">http://flora.sourceforge.net/aboutTR.php</a></li>                <li>KR event / action logics: <a href="http://theory.stanford.edu/~iliano/ecbib/ecb.html" target="_blank">Event                   Calculus</a>, <a href="http://en.wikipedia.org/wiki/Situation_calculus" target="_blank">Situation                   Calculus</a>, <a href="http://citeseer.ist.psu.edu/doherty98temporal.html" target="_blank">Temporal                   Action Logics</a></li>                <li>Chakravarthy, S., Mishra, D. An Event Specification Language                   (SNOOP) for Active Databases and its Detection. TR-91-23, U.                   Florida, 1991.</li>                <li>OMG Production Rule Representation (PRR):<br>                  <a href="http://www.w3.org/2004/12/rules-ws/paper/53/" target="_blank">http://www.w3.org/2004/12/rules-ws/paper/53/</a></li>                <li>Prova: <a href="http://www.prova.ws/" target="_blank">http://www.prova.ws/</a>                   <br>                  and RBSLA/ContractLog: <a href="http://ibis.in.tum.de/research/projects/rbsla/index.php">http://ibis.in.tum.de/research/projects/rbsla/index.php</a></li>                <li>W3C Rule Interchange Format (RIF) Working Group Charter: <a href="http://www.w3.org/2005/rules/wg/charter#data-sources" target="_blank">Load                   and Query Rule Engine</a></li>              </ul>              <p></p>            </div></td>        </tr>      </table>      <p><font color="#FFFFFF"><span id="CommonPageHeader1_lblTagLine" class="normtextwhite" style="font-size: 10px;"><img src="./images/transparent.gif" width="590" height="8" align="absmiddle" /></span></font></p></td>  </tr></table><table width="800" cellpadding="0" cellspacing="1" border="0">  <tr>    <td ></td>  </tr></table><table width="800" border="0" cellspacing="0" cellpadding="0">  <tr valign="middle">    <td height="19" colspan="3" bgcolor="#666666"> <div align="center"></div>      <div align="center"><font color="#FFFFFF">Site Contact: <a href="http://ibis.in.tum.de/staff/paschke/index.htm" target="_blank">Adrian        Paschke </a>- Last Update 2007-07-21</font></div></td>  </tr>  <tr valign="middle">    <td width="187" height="19"> <div align="center"></div></td>    <td height="19">&nbsp;</td>    <td width="180" height="19">&nbsp;</td>  </tr></table><table width="800" border="0" cellspacing="0" cellpadding="0">  <tr>    <td align="center">          </td>  </tr>  <tr>    <td align="center"><div align="center"></div></td>  </tr></table></body></html>