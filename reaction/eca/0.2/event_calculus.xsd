<?xml version="1.0"?>

<xs:schema xmlns="http://www.ruleml.org/0.9/xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.ruleml.org/0.9/xsd">
	<xs:annotation>
		<xs:documentation xml:lang="en">
            
            Event calculus part of RBSLA.
			This is the XML Schema complex event processing and state changes (fluents) for RBSLA.
			File: event_calculus.xsd
			Version: 0.2
			Last Modification: 2005-11-26
			
			This schema declares the following RBSLA elements and attributes:
			
			* redefines Query, Assert, Implies, Retract and Integrity by adding event processing
			* event_processing (group)
			
			The approach is modelled after that used in "Modularization of XHTML in XML Schema"
			WD [http://www.w3.org/TR/xhtml-m12n-schema/], which will soon be integrated with
			"Modularization of XHTML" (REC-xhtml-modularization-20010410)
			[http://www.w3.org/TR/xhtml-modularization/].
		</xs:documentation>
	</xs:annotation>
	
    	<xs:include schemaLocation="http://ibis.in.tum.de/research/projects/eca-ruleml/schemas/0.2/modules/events_module.xsd" />

<xs:redefine schemaLocation="http://ibis.in.tum.de/research/projects/eca-ruleml/schemas/0.2/eca.xsd" >

			<!-- 
				  event redefines the Query element adding processing events 
			-->
					   
					   <xs:group name="formula-query.content">
							<xs:choice>
								<xs:group ref="formula-query.content" />
								<xs:group ref="event_processing.content" />						
						   </xs:choice>
					  </xs:group>		
			
			<!-- 
					note the new content model of Query: 
					(oid?, (formula | Atom | Conjunction | Disjunction | Exists | Happens | Planned | Initially | Initiates | Terminates | HoldsAt | ValueAt )*)
			 -->								
			<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->		
			<!-- 
				  event redefines the Assert element adding processing events											
			-->											
				
						<xs:group name="formula-assert.content">
							<xs:choice>
								<xs:group ref="formula-assert.content" />
								<xs:group ref="event_processing.content" />
							</xs:choice>				
						</xs:group>
			
			<!-- 
					note the new content model of Assert: 
					( oid?, (formula | Atom | Implies | Equivalent | Forall | TestCase | ECA | Happens | Planned | Initially | Initiates | Terminates | HoldsAt | ValueAt)* ))
			 -->	   	
			<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->		
			<!-- 
				  event redefines Implies adding processing events
			-->
			
					<xs:group name="body.content" >
						<xs:choice>
							<xs:group ref="body.content" />
							<xs:group ref="event_processing.content" />
						</xs:choice>	
					</xs:group>
					
					<xs:group name="head.content">
						<xs:choice>
							<xs:group ref="head.content" />
							<xs:group ref="event_processing.content" />
						</xs:choice>
					</xs:group>
			
			<!--			
					note the new content model of Implies:
					
					Implies:  ( oid?, ( head, body) | ( body, head) | ( (Atom | Conjunction | Disjunction | Assert | Retract  | Happens | Planned | Initially | Initiates | Terminates | HoldsAt | ValueAt ), (Atom | formula | Happens | Planned | Initially | Initiates | Terminates | HoldsAt | ValueAt ))
			 -->	
			<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->		
			 <!--
					event_calculus schema redefines Retract by adding event processing
			-->	
					
				<xs:group name="atom_retract.content">
					<xs:sequence>
						<xs:choice>
							<xs:group ref="atom_retract.content"/>
							<xs:group ref="event_processing.content"/>
						</xs:choice>
					</xs:sequence>
				</xs:group>
	
		<!--
				note the new conent model of Retract: ( ( oid | Atom | ECA | Happens | Planned | Initially | Initiates | Terminates | HoldsAt | ValueAt )*, TestCase? )
		-->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		<!--
				event_calculus schema redefies Integrity by adding event processing
		-->
				<xs:group name="Integrity.extend">
				 <xs:sequence>
					<xs:choice minOccurs="1" maxOccurs="unbounded">
						<xs:group ref="Integrity.extend"  />
						<xs:group ref="event_processing.content"/>
					</xs:choice>	
				 </xs:sequence>
				</xs:group>
		<!--
				note the new content model of Integrity: ( oid?, ( formula | Atom | Conjunction | Disjunction | Implies | Happens | Planned | Initially | Initiates | Terminates | HoldsAt | ValueAt )+ )
		-->
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
				<!--
						event_calculus schema redefies condition by adding event processing
				-->
						<xs:group name="condition.content">
						 <xs:sequence>
							<xs:choice minOccurs="1" maxOccurs="unbounded">
								<xs:group ref="condition.content"  />
								<xs:group ref="event_processing.content"/>
							</xs:choice>	
						 </xs:sequence>
						</xs:group>
				<!--
						note the new content model of condition:  )
		-->
		
		<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
				<!--
						event_calculus schema redefies postcondition by adding event processing
				-->
						<xs:group name="postcondition.content">
						 <xs:sequence>
							<xs:choice minOccurs="1" maxOccurs="unbounded">
								<xs:group ref="postcondition.content"  />
								<xs:group ref="event_processing.content"/>
							</xs:choice>	
						 </xs:sequence>
						</xs:group>
				<!--
						note the new content model of postcondition:  )
		-->		
		
		
 </xs:redefine>


	
		<xs:group name="event_processing.content">
			<xs:choice>
			   <xs:element ref="Happens" />
			   <xs:element ref="Planned" />
			   <xs:element ref="Occurs" />
			   <xs:element ref="Initially" />
			   <xs:element ref="Initiates" />
			   <xs:element ref="Terminates" />
			   <xs:element ref="HoldsAt" />
			   <xs:element ref="ValueAt" />
			</xs:choice>		
		</xs:group>
	
</xs:schema>
