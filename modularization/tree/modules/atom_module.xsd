<xs:schema 
targetNamespace="http://www.ruleml.org/inspec"
xmlns="http://www.ruleml.org/inspec"
xmlns:xs="http://www.w3.org/2001/XMLSchema"
>

	<xs:annotation>
		<xs:documentation xml:lang="en">
			Atom RuleML elements module.
			This is the XML Schema atom elements module for RuleML.
			File: atom_module.xsd
			Version: 0.85 (fixed)
			Last Modification: 2004-05-14
			
			This module declares the following RuleML elements:
			* atom
			* _opr
			* rel
			
			The approach is modelled after that used in "Modularization of XHTML in XML Schema"
			WD [http://www.w3.org/TR/xhtml-m12n-schema/], which will soon be integrated with
			"Modularization of XHTML" (REC-xhtml-modularization-20010410)
			[http://www.w3.org/TR/xhtml-modularization/].
		</xs:documentation>
	</xs:annotation>

	<!-- atom -->
	<!--
		atom's content model is also extended to permit vars:
		"((_opr, (_slot)*, (ind | var)*, (_slot)*) | ((_slot)*, (ind | var)+, (_slot)*, _opr))">
		
		however, this is non-deterministic, so it is restructured in the following way:

                       "(
                            ( _opr,
                              (_slot)*, 
                              ( (ind | var)+, (_slot)*)?
                            ) 
                          |
                            (
                               (
                                  ( (_slot)+, 
                                    ( (ind | var)+, (_slot)* )?
                                  )
                                |
                                  ((ind | var)+, (_slot)*)
                               ),
                               _opr
                            )
                         )"

	-->
	<xs:group name="atom.extend">
		<xs:sequence>
			<xs:choice minOccurs="1" maxOccurs="unbounded">
				<xs:element ref="ind"/>
				<xs:element ref="var"/>
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:attributeGroup name="atom.attlist"/>
	<xs:group name="atom.content">
		<xs:choice>
			<xs:sequence>
				<xs:element ref="_opr"/>
				<xs:element ref="_slot" minOccurs="0" maxOccurs="unbounded"/>
				<xs:sequence minOccurs="0">
					<xs:group ref="atom.extend"/>
					<xs:element ref="_slot" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:sequence>
			<xs:sequence>
				<xs:choice>
					<xs:sequence>
						<xs:element ref="_slot" minOccurs="1" maxOccurs="unbounded"/>
						<xs:sequence minOccurs="0">
							<xs:group ref="atom.extend"/>
							<xs:element ref="_slot" minOccurs="0" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:sequence>
					<xs:sequence>
						<xs:group ref="atom.extend"/>
						<xs:element ref="_slot" minOccurs="0" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:choice>
				<xs:element ref="_opr"/>
			</xs:sequence>
		</xs:choice>
	</xs:group>
	<xs:complexType name="atom.type">
		<xs:group ref="atom.content"/>
		<xs:attributeGroup ref="atom.attlist"/>
	</xs:complexType>
	<xs:element name="atom" type="atom.type"/>

	<!-- _opr -->
	<!-- content model is "(rel)" -->
	<xs:attributeGroup name="_opr.attlist"/>
	<xs:group name="_opr.content">
		<xs:sequence>
			<xs:element ref="rel"/>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="_opr.type">
		<xs:group ref="_opr.content"/>
		<xs:attributeGroup ref="_opr.attlist"/>
	</xs:complexType>
	<xs:element name="_opr" type="_opr.type"/>

	<!-- rel -->
	<!-- content model is "(#PCDATA)" -->
	<xs:attributeGroup name="rel.attlist"/>
	<xs:group name="rel.content">
		<xs:sequence/>
	</xs:group>
	<xs:complexType name="rel.type" mixed="true">
		<xs:group ref="rel.content"/>
		<xs:attributeGroup ref="rel.attlist"/>
	</xs:complexType>
	<xs:element name="rel" type="rel.type"/>
	
</xs:schema>