<!-- An XML DTD for a 'UR'-Centered Binary Ground-Datalog-Fact RuleML Sublanguage -->
<!-- Last Modification: 2002-04-01 -->



<!-- monolith version  -->
<!-- ruleml-urcbindatagroundlog-inheriting version should "IGNORE" datalog's (imp-containing) rulebase etc.  -->


<!-- ENTITY Declarations -->


<!-- a Uniform Resource Identifier is currently CDATA, but see W3C's [RFC2396] -->
<!ENTITY % URI "CDATA">



<!-- ELEMENT and ATTLIST Declarations -->


<!-- 'rulebase' root element uses 'fact' assertions and 'query' tests as top-level elements -->

<!ELEMENT rulebase (( (_rbaselab, (fact | query)* ) | ((fact | query)+, _rbaselab?) )?) >
<!ATTLIST rulebase direction (forward | backward | bidirectional) "bidirectional">


<!-- 'fact' assertions are usable as degenerate rules on the top-level -->
<!-- 'fact' element uses just a conclusion role _head -->
<!-- "<fact>_head</fact>" stands for "_head is implied by true", i.e., "_head is true" -->

<!ELEMENT fact ((_rlab, _head) | (_head, _rlab?)) >


<!-- 'query' elements are usable as degenerate rules on the rulebase top-level -->
<!-- 'query' element uses just a premise role _body -->
<!-- "<query>_body</query>" stands for "false is implied by _body", i.e., "_body cannot be proved", which is to be refuted by generating the bindings for free variables in _body -->

<!ELEMENT query ((_rlab, _body) | (_body, _rlab?)) >


<!-- _head role is usable within 'fact' assertions -->
<!-- _body role is usable within 'query' tests -->
<!-- _head uses an atomic formula -->
<!-- _body uses an atomic formula or an 'and' -->

<!ELEMENT _head (atom)>
<!ELEMENT _body (atom | and)>


<!-- an 'and' is usable within _body's -->
<!-- 'and' uses zero or more atomic formulas -->
<!-- "<and>atom</and>" is equivalent to "atom"-->
<!-- "<and></and>" is equivalent to "true"-->
 
<!ELEMENT and (atom*)>


<!-- "_rbaselab" is short for "rulebase label"; must be ind(ividual);
     this allows naming of an entire individual rulebase in a fashion that is accessible
     within the knowledge representation -->

<!ELEMENT _rbaselab (ind)>


<!-- "_rlab" is short for "rule label"; must be ind(ividual);
     this allows naming of a rule (either imp or fact) in a fashion that is accessible
     within the knowledge representation -->

<!ELEMENT _rlab (ind)>


<!-- atomic formulas are usable within _head's -->
<!-- atom element uses an _opr  role followed by an ind with a REQUIRED href attribute -->
<!-- followed by an ind with IMPLIED href attribute, or equivalently, with _opr at the end -->
<!-- This 'local' REQUIRED-vs.-IMPLIED constraint cannot be expressed by DTDs: XML Schema -->
<!--                   | href!  | href?                                                   -->
<!ELEMENT atom ((_opr, ind,   ind) | (ind, ind, _opr))>


<!-- _opr is usable within atoms -->
<!-- _opr uses rel(ation) symbol -->

<!ELEMENT _opr (rel)>



<!-- there is one kind of fixed argument -->

<!-- individual constant, as in predicate logic, generalizing RDF literals and resources -->

<!ELEMENT ind  (#PCDATA)>


<!-- like for XHTML anchors etc. a URI can be used under an optional href attribute of inds -->

<!ATTLIST ind href %URI; #IMPLIED>


<!-- there are only fixed (first-order) relations -->

<!-- relation or predicate symbol, generalizing EMPTY PCDATA of RDF predicates -->

<!ELEMENT rel  (#PCDATA)>


<!-- A URI can be used under an optional href attribute, generalizing REQUIRED URIs of RDF predicates -->

<!ATTLIST rel href %URI; #IMPLIED>
