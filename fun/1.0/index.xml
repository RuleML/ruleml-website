<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet href="http://ruleml.org/homepage.xsl" type="text/xsl"?>
<!-- Written by Harold Boley and Doan Dai Duong-->
<homepage>
	<title>Functional RuleML</title>
	<opening>
		<center>
			<br/>
			<!--			<a href="http://www.ruleml.org"><img src="http://www.ruleml.org/logo/rulemllogo2_transparent.gif" border="none" alt="RuleML"/></a>
-->
			<br/>
			<h1>Functional RuleML<br/>
			</h1>
			<h2>Harold Boley, David Hirtle, Doan Dai Duong, Le Thi Thu Thuy, Jie Li</h2>
			<br/>
			<table border="0" align="center">
			<tr><td colspan="2" align="center"><h2>Version history:</h2></td></tr>
			<tr><td align="right">2006-08-11 - </td><td><a href="http://ruleml.org/fun/0.91/">Version 0.91</a></td></tr>
			<tr><td align="right"><h3>2013-04-27 - </h3></td><td><h3><a href="http://ruleml.org/fun/1.0/">Version 1.0</a></h3></td></tr>
			</table>			
			<h2>Latest version: <a href="http://ruleml.org/fun/">ruleml.org/fun/</a></h2>
			<p/>
			</center>
		<br/>
		<p>This page describes Functional RuleML (Fun RuleML),
		   which has been incorporated into RuleML since Version <a href="http://www.ruleml.org/0.91/">0.91</a>.
		   Fun RuleML develops RuleML into a Relational-Functional or Functional-Logic Markup Language (cf. <a href="http://www.relfun.org/rfml/">RFML</a>) that can be regarded as being composed of Relational RuleML plus transformation rules
                   (definitions of functions by oriented equations, usually conditional on premises).
 </p>
	</opening>
	<section>
		<header>Overview</header>
		<p>Functional Programming (FP) has become increasing relevant in software engineering with languages like
		Clojure, Erlang, Haskell, <a href="http://www.cs.unb.ca/~boley/FLP/python-intro.pdf">Python</a>, and <a href="http://racket-lang.org/">Racket</a>.
		Varieties of FP are also playing a prominent Web role, with MathML, XSLT and XQuery being examples.
		We present here Functional RuleML, whose design benefited from previous work on Transformational RuleML
		(cf.  <a href="http://www.ruleml.org/exa/0.81/">trans examples</a>)
		and builds on an earlier paper
		(cf. 
		<a href="ruleml-fun.pdf">Functional RuleML: From Horn Logic with Equality to Lambda Calculus</a>,
		published in <a href="http://www.upgrade-cepis.com/issues/2005/6/upgrade-vol-VI-6.html#boley">UPGRADE VI(6)</a> and
		as part of <a href="http://www.cs.unb.ca/~boley/papers/ruleml-family.pdf">The RuleML Family of Web Rule Languages</a>
		in <a href="http://www.dbis.informatik.uni-goettingen.de/PPSWR06/ppswr06-program.html">PPSWR 2006</a>).
Functional RuleML was developed via orthogonal notions and is freely combinable with the previous Relational RuleML, including <a href="http://ruleml.org/indoo/indoo.html">OO RuleML</a>.
This also makes RuleML a language for FP/LP-integrated programming (<a href="http://www.cs.unb.ca/~boley/FLP/cs6905FLP.pdf">FLP</a>), including OO FLP (e.g., <a href="http://wiki.ruleml.org/index.php/PSOA_RuleML">PSOA RuleML</a>).
<br/>
<br/>
RuleML, with <a href="http://www.relfun.org/rfml/">RFML</a> as one of its inputs,
has long permitted the markup of oriented (i.e., directed) equations
for defining the value(s) of a function applied to arguments,
optionally conditional on a body as in Horn rules.
Later, this was extended to logics with unoriented (i.e., undirected)
equality for the various sublanguages of RuleML,
but the equality element has still often utilized
the left-to-right orientation of its (abridged) textual syntax.
<!-- It was a RuleML issue before version 0.91 that
the constructor <b>Ctor</b> of a complex term <b>Cterm</b> was disjoined,
as an XML element, from the user-defined function <b>Fun</b> of a call expression <b>Nano</b>,
although these can be merged by proceeding to a logic with equality.
In particular, while the earlier function-defining bodies needed
to specify either <b>Cterm</b> or <b>Nano</b> elements for all levels of function applications,
we now use a merged <b>Expr</b> element that carries an attribute to allow <b>Cterm</b>-like, <b>Nano</b>-like, or combined specifications.
Moreover, while currently function-defining <b>Nano</b> patterns can contain <b>Cterm</b>s but not <b>Nano</b>s,
obeying the 'constructor discipline',
<b>Nano</b>s could also be permitted within <b>Nano</b>s
to legalize 'optimization' rules like <b>reverse(reverse(?L)) = ?L.</b>
-->
<br/>
<br/>
Functional RuleML
<!-- thus conceives both <b>Cterm</b>s and <b>Nano</b>s as -->
employs general
expression (<b>Expr</b>) elements which usually applies (to zero or more arguments) a contained function (<b>Fun</b>) element distinguishing mainly
uninterpreted (constructor, 'self-<b>copy</b>ing') vs. interpreted (user-defined, '<b>value</b>-returning') functions
via an XML attribute <b>per</b>={<b>"copy"</b>,<b>"value"</b>}.
Another attribute likewise distinguishes the (single- vs. set-)valuedness of functions.
Equations are introduced that can be used for 'testing' the value of a function application or for 'defining' the body of a function application.
We first proceed to the nesting of the two kinds of <b>Expr</b> elements and their use in <b>testing equations</b>.
Next, for defining (interpreted) functions, unconditional (oriented) equations are introduced as <b>defining equations</b>.
These are then extended to conditional equations, i.e. Horn logic implications with an equation as the head and possible equations in the body.
Higher-order functions are finally added, currently named ones such as <b>Compose</b>,
and later anonymous ones, i.e. 'in-place' <b>Lambda</b> definitions.
While various subsets of the F(L)P features described here are currently embedded within the sublanguages of the RuleML schema family,
customizations of RuleML schemas in Relax NG could be performed with the Modular sYNtax confiGurator (<a href="http://wiki.ruleml.org/index.php/MYNG">MYNG</a>)
to carve out the exact schemas of existing and future (OO) F(L)P languages.
</p>
	</section>
	<section>
		<header>Interpretedness And Valuedness</header>
		<p>The different notions of <b>function</b> in LP and FP have been a continuing design issue for FLP. When applied to arguments:</p>
		<itemize>
			<item>
				<i>uninterpreted functions</i> <b>denote</b> semantic values, often syntactically represented as copies of the applications themselves;
			</item>
			<item>
				<i>interpreted functions</i> <b>return</b> syntactic values, often specified by the right-hand sides of equational user definitions.
			</item>
		</itemize>
		<p>For example, a function <b>first-born(John, Mary) </b>can be uninterpreted,
		so that the application <b>first-born(John, Mary)</b> just denotes the first-born child; or, interpreted, e.g. using equational definition
<b>first-born(John, Mary) = Jory</b>, so that the application <b>first-born(John, Mary)</b> returns <b>Jory</b>.
Such interpreted and uninterpreted functions are both allowed in Functional RuleML,
and are marked up here with a discriminating interpreted attribute <b>per</b> as follows
(interpreted on the left, uninterpreted on the right):
		<table border="0" width="75%">
			<tr align="center">
				<td>
					<code><![CDATA[
    <Expr>
      <Fun per="value">first-born</Fun>    
      <Ind>John</Ind>
      <Ind>Mary</Ind>
    </Expr>]]></code>
				</td>
				<td> and </td>
				<td>
					<code><![CDATA[
    <Expr>
      <Fun per="copy">first-born</Fun>
      <Ind>John</Ind>
      <Ind>Mary</Ind>
    </Expr>]]></code>
				</td>
			</tr>
		</table>

If the <b>per</b> attribute is omitted, the uninterpreted <b>per="copy"</b> is assumed as the default.
<!-- as proposed by David Hirtle (unlike proposed in the earlier paper). -->
For example,
		<table border="0" width="75%">
			<tr align="center">
				<td>
					<code><![CDATA[
                                           ]]></code>
				</td>
				<td></td>
				<td>
					<code><![CDATA[
    <Expr>
      <Fun>first-born</Fun>
      <Ind>John</Ind>
      <Ind>Mary</Ind>
    </Expr>]]></code>
				</td>
			</tr>
		</table>
is equivalent to the above uninterpreted version (on the right).</p>

<p>The rationale here is to preserve the natural extension hierarchy of the RuleML sublanguages,
guaranteeing that RuleML sublanguages without equality will not need an <b>per="copy"</b> attribute setting
(on <b>Fun</b>ctions inside <b>Expr</b>essions) in order to preserve their meaning in RuleML sublanguages with equality.
<!-- just as it used to be the case (for <b>C</b>onstruc<b>tor</b>s inside <b>C</b>omplex <b>term</b>s) until RuleML 0.9. -->
This entails that, e.g., rules from <a href="http://www.ruleml.org/1.0/xsd/hornlog.xsd">hornlog</a> rulebases can be copied and pasted unchanged
into <a href="http://www.ruleml.org/1.0/xsd/hornlogeq.xsd">hornlogeq</a> rulebases while preserving their original meaning.</p>


		<p>In both XML and UML processing, interpreted functions (like relations in LP)
		are often set-valued (non-deterministic).
		This is accommodated by introducing a <b>val</b>ued attribute
		with values including "1" (deterministic: exactly one) and "0.." (set-valued: zero or more).
		For example, the function application <b>children(John, Mary)</b>
		can be interpreted in a set-valued manner using a definition <b> children(John, Mary) =
{Jory, Mahn} </b>, so that <b>children(John, Mary) </b>returns <b>{Jory,Mahn} </b>.
In Functional RuleML, the sample application is marked up thus:</p>
		<code><![CDATA[
<Expr>
  <Fun per="value" val="0..">children</Fun>
  <Ind>John</Ind>
  <Ind>Mary</Ind>
</Expr>
]]></code>
	</section>

	
	<section>
		<header>Nestings And Testing Equations</header>
		<p>Nestings are permitted for all combinations of interpreted and uninterpreted functions
		except that inside an uninterpreted function application there can be no interpreted function application.
		For example, consider the function nesting <b>age(first-born(John,Mary))</b>,
		where both <b>age</b> and <b>first-born</b> can be interpreted or uninterpreted except that
		inside an uninterpreted <b>age</b> there can only be an uninterpreted <b>first-born</b> .
		The resulting three versions of the example can be marked up thus (where "u" and "v" can
                assume "value" "value", "value" "copy", or "copy" "copy", respectively):</p>
		<code><![CDATA[
<Expr>
  <Fun per="u">age</Fun>
  <Expr>
    <Fun per="v">first-born</Fun>
    <Ind>John</Ind>
    <Ind>Mary</Ind>
  </Expr>
</Expr>
]]></code>

<p>Testing equations can be considered as (inferential) queries performing equality tests (proofs).
Nestings as above can be employed on both sides of a testing equation.
For example, a fully interpreted version of the testing equation
<b>age(first-born(John,Mary)) = subtract(age(John),age(Mary))</b> can be marked up thus:</p>
		<code><![CDATA[
<Equal oriented="no">
  <Expr>
    <Fun per="value">age</Fun>
    <Expr>
      <Fun per="value">first-born</Fun>
      <Ind>John</Ind>
      <Ind>Mary</Ind>
    </Expr>
  </Expr>
  <Expr>
    <Fun per="value">subtract</Fun>
    <Expr>
      <Fun per="value">age</Fun>
      <Ind>John</Ind>
    </Expr>
    <Expr>
      <Fun per="value">age</Fun>
      <Ind>Mary</Ind>
    </Expr>
  </Expr>
</Equal>
]]></code>
		<p>Here, the <b>Equal</b> element represents an unoriented equation used to test
		whether its left-hand side evaluates to the same value as its right-hand side does.
		</p>
	</section>
	
	
	
	<section>
		<header>Defining Equations</header>
		<p>Defining equations are used for function definitions.
		Let us consider an example defining a function <i>home</i> for a given structured argument:</p>
		<i> home(father-of(John)) = Shanghai </i>
		<p>This will be marked up as follows:</p>
		<code><![CDATA[
<Equal oriented="yes">
  <Expr>
    <Fun per="value">home</Fun>
    <Expr>
      <Fun per="copy">father-of</Fun>
      <Ind>John</Ind>
    </Expr>
  </Expr>
  <Ind>Shanghai</Ind>
</Equal>
]]></code>
		<p>Here, the <b>Equal</b> element represents an unconditional, oriented equation.
		In general, <b>Equal</b> permits both unoriented (i.e., undirected) and oriented (i.e., directed) equations
		via an <b>oriented</b> attribute with respective <b>"no"</b>
and <b>"yes"</b> values. Since it is more general, <b>oriented="no"</b> is assumed as the default.
		</p>
		<p>Let us consider a variant with an expression on the right-hand side of the equation:</p>
		<i> home(father-of(John)) = largest-city-proper(Earth)</i>
		<p>In this example assume that the right-hand side expression is meant to call an interpreted function
		(perhaps accessing a <a href="http://en.wikipedia.org/wiki/List_of_cities_proper_by_population">population table of world cities</a>).
		This leads to the following markup: </p>
		<code><![CDATA[
<Equal oriented="yes">
  <Expr>
    <Fun per="value">home</Fun>
    <Expr>
      <Fun per="copy">father-of</Fun>
      <Ind>John</Ind>
    </Expr>
  </Expr>
  <Expr>
    <Fun per="value">largest-city-proper</Fun>
    <Ind>Earth</Ind>
  </Expr>
</Equal>
]]></code>

		<p>Conditional equations use an oriented <b>Equal</b> element as the conclusion of
an <b>Implies</b> element, whose condition may employ other (testing) equations.
		</p>
		<p>For example, using
a unary <b>birth-year</b> function
in the condition, a nullary <b>this-year</b> function
on the right-hand side of the conclusion's <b>Equal</b>,
and two variables,
the conditional equation (written with a top-level "=>") </p>

<i>?B = birth-year(?P)
  =>
age(?P) =
subtract(this-year(),?B)</i>

<p>employs an equational condition to test whether the
<b>birth-year</b> of a person <b>?P</b> is known, assigning
it to  <b>?B</b> for use within the conclusion.
This leads to the following markup: </p>
		<code><![CDATA[
<Implies>
  <Equal oriented="no">
    <Var>B</Var>
    <Expr>
      <Fun per="value">birth-year</Fun>
      <Var>P</Var>
    </Expr>
  </Equal>
  <Equal oriented="yes">
    <Expr>
      <Fun per="value">age</Fun>
      <Var>P</Var>
    </Expr>
    <Expr>
      <Fun per="value">subtract</Fun>
      <Expr>
        <Fun per="value">this-year</Fun>
      </Expr>
      <Var>B</Var>
    </Expr>
  </Equal>
</Implies>
]]></code>

<p>With the above <b>age</b> definition,
also assuming <b>birth-year(Jory) = 1993</b> and  <b>this-year() = 2013</b>,
the <b>age</b> call</p>
		<code><![CDATA[
<Expr>
  <Fun per="value">age</Fun>
  <Var>Jory</Var>
</Expr>
]]></code>

<p>as well as the nested <b>age</b>-of-<b>first-born</b> call</p>
		<code><![CDATA[
<Expr>
  <Fun per="value">age</Fun>
  <Expr>
    <Fun per="value">first-born</Fun>
    <Ind>John</Ind>
    <Ind>Mary</Ind>
  </Expr>
</Expr>
]]></code>
<p>return <b>20</b>, where we moreover assume the earlier <b>first-born</b> definition.</p>
	</section>
	<section>
		<header>Higher-Order Functions</header>
		<p>Higher-order functions are characteristic for FP and thus should be supported by Functional RuleML. A higher-order function permits functions to be passed to it as (actual)
parameters and to be returned from it as values.
For example, the composition of the <b>age</b> and <b>first-born</b> functions (introduced above),
both interpreted, is performed by <b>Compose(age,first-born)</b>.
This example can be marked up thus:</p>
		<code><![CDATA[
<Expr per="value">
  <Fun per="copy">Compose</Fun>
  <Fun per="value">age</Fun>
  <Fun per="value">first-born</Fun>
</Expr>
]]></code>
<p>Here, as in RFML, <b>Compose</b> itself is marked up as an uninterpreted function,
while the enclosing <b>Expr</b> is employed as an interpreted function
having the entire <b>Compose</b> application as its structured name.
This composition can be applied to two (parental) individuals thus:</p>
		<code><![CDATA[
<Expr>
  <Expr per="value">
    <Fun per="copy">Compose</Fun>
    <Fun per="value">age</Fun>
    <Fun per="value">first-born</Fun>
  </Expr>
  <Ind>John</Ind>
  <Ind>Mary</Ind>
</Expr>
]]></code>
	</section>
	<section>
		<header>RFML-to-RuleML Translation</header>
		<p>The functional part of Relfun's RFML syntax can be translated into Fun RuleML using the <a href="http://www.ruleml.org/fun/rfml2ruleml.xslt">RFML2RuleML.xslt</a> stylesheet, which was
                 adapted from an <a href="http://www.relfun.org/ruleml/rfml2ruleml.xsl">earlier stylesheet</a> for mapping a Hornlog RFML program into an older version
                 of RuleML. The new stylesheet is designed to map the functional part of RFML into RuleML 0.91.</p>
	</section>
	<section>
		<header>Detailed Examples</header>
		<p>	The following are some more detailed Functional RuleML examples, e.g. for testing the translator:</p>
		<itemize>
			<item>FatherOfJohn in Functional RuleML: <a href="http://www.ruleml.org/fun/FatherOfJohn.xml">FatherOfJohn.xml</a>
			</item>
		</itemize>
		<p>and</p>
		<itemize>
			<item>RFMLFact.xml in RFML: <a href="http://www.ruleml.org/fun/RFMLFact.xml">RFMLFact.xml</a>
			</item>
		</itemize>
		<itemize>
			<item>RuleMLResult.xml in RuleML: <a href="http://www.ruleml.org/fun/RuleMLResult.xml">RuleMLResult.xml</a>
			</item>
		</itemize>
	</section>
	<section>
		<header>Functional RuleML DTD</header>
		<code><![CDATA[
<!ENTITY % term "(Data | Ind | Var | Expr)">
<!ENTITY % ateq "(Atom | Equal)">
<!ENTITY % conclusion "(%ateq;)">
<!ENTITY % condition "(And | %ateq;)">
<!ELEMENT Assert (Implies | %ateq;)*>
<!ELEMENT Implies (%condition;, %conclusion;)>
<!ELEMENT And (%ateq;)*>
<!ELEMENT Equal (%term;, %term;)>
<!ELEMENT Atom ((Rel | Expr | Lambda | Var), (%term; | Rel | Fun | Lambda)*)>
<!ELEMENT Expr ((Fun | Expr | Lambda | Var), (%term; | Rel | Fun | Lambda)*)>
<!ELEMENT Lambda ((%term;)+, %term;)>
<!ELEMENT Fun (#PCDATA)>
<!ELEMENT Rel (#PCDATA)>
<!ELEMENT Data (#PCDATA)>
<!ELEMENT Ind (#PCDATA)>
<!ELEMENT Var (#PCDATA)>
<!ATTLIST Equal oriented (yes | no) "no">
<!ATTLIST Expr	per (value | copy | open) "copy">
<!ATTLIST Rel	per (value | copy | open) "value">
<!ATTLIST Fun	per (value | copy | open) "copy"
		val (1 | 0..) "0..">
<!ATTLIST Var	ord (1 | h) "h"
		per (value | copy | open) "copy">
		]]></code>
	</section>
	<closing>
		<p>
		Site Contact:
		<a href="http://www.cs.unb.ca/~boley/">Harold Boley</a>.
		Page Version: 2013-04-27
		
		<br/>
			<br/>
			<br/>
			<a name="Practice-Preach"/>
			<small>"Practice what you preach": XML source of this homepage at <a href="index.xml">index.xml</a>;
	      <br/>
	      transformed to HTML via the adaptation of <a href="http://www.dfki.uni-kl.de/~sintek/">Michael Sintek</a>'s SliML <a href="http://www.w3.org/TR/xslt">XSLT</a> stylesheet at <a href="http://www.dfki.uni-kl.de/~boley/xslt/homepage.xsl">homepage.xsl</a> (View | Page Source)
	   </small>
		</p>
	</closing>
</homepage>
