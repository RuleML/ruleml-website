<?xml version="1.0" encoding="ISO-8859-1" ?>
<?xml-stylesheet href="http://www.dfki.uni-kl.de/~boley/xslt/homepage.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>

<!-- Written by Harold Boley "boley@informatik.uni-kl.de" -->

<homepage>

  <title>Object-Oriented RuleML</title>

  <opening>
    <center>
      <big>
        <box bgcolor="#CCCCFF"><code><![CDATA[

-->]]></code></box>
        <box bgcolor="#FFCCCC">R u l e M L</box>
        <box bgcolor="#CCCCFF"><code><![CDATA[

<--]]></code></box>
      </big>
      <br/> <br/>

<h1>Object-Oriented RuleML</h1>
<h2><a href="http://www.cs.unb.ca/~boley/">Harold Boley</a>, <a href="http://ebusiness.mit.edu/bgrosof/">Benjamin Grosof</a>,  <a href="http://www.dfki.uni-kl.de/~sintek/">Michael Sintek</a>, <a href="http://home.comcast.net/~stabet/">Said Tabet</a>, <a href="http://tmitwww.tm.tue.nl/staff/gwagner/">Gerd Wagner</a></h2>
<h2>2004-03-15: Version 0.85</h2>
    </center>

<br/> <br/> <br/>

<p>
This describes Object-Oriented RuleML (OO RuleML), which is part of
<a href="http://www.ruleml.org/inspec/">RuleML 0.85</a>.
OO RuleML is a
modular combination of three sublanguages:
(1) User-level roles
provide frame-like slot representations as unordered argument
collections in atoms and complex terms. (2) URI-grounded clauses
allow for 'webizing' using URIs as object identifiers for facts
and rules. (3) Order-sorted terms permit typed variables via Web
links into taxonomies such as RDF Schema class hierarchies, thus
reusing the Semantic Web's light-weight ontologies.
</p>

  </opening>

<section>
<header>Introduction</header>
<p>
Object-Oriented RuleML (OO RuleML) is considered here with the focus on (1), a sublanguage
that could be called 'Object-Centered RuleML'.
This makes the 'type tag'-attached 'role tags' ('features', 'attributes', 'keys', or 'slots')
of RuleML's own 'system-level syntax' available as a 'user-level syntax',
creating a 'slotted' sublanguage in contrast to the earlier positional markup.
Together with (2), a sublanguage providing object identity via URI-grounded clauses, and
(3), a sublanguage for accessing order-sorted type hierarchies, one arrives at Object-Oriented RuleML,
which could also have been called 'Frame RuleML'.
OO RuleML permits the kind of 'object modeling' of
Deductive Object-Oriented Databases (DOOD)
and object-extended LP systems such as Life, F-Logic, TRIPLE, etc. in RuleML.
A discussion of these sublanguages and their combination can be found in a
recent <a href="http://www.cs.unb.ca/~boley/ruleml/ruleml-rgs.pdf">OO RuleML paper</a>
(still before renamings of '_r' into '_slot', 'n' into 'name', and 'w' into 'weight')
and <a href="ruleml-rgs-talk.ppt">OO RuleML talk</a>.
</p>

<p>
The 'slotted' sublanguage requires a surprisingly small change to the DTDs/Schemas of the exisiting Positional RuleML
for permitting user roles in atoms, nanos, and cterms. This also allows
for mixed positional and object-oriented representations.
</p>
</section>

<section>
<header>The Basic Language</header>
<p>
The basic language of Object-Oriented RuleML is summarized in the talk
<a href="ruleml-nonpos.ppt">RuleML Metaroles for Object-Centered Knowledge Representation</a>.
</p>


<p>
For example, the Positional RuleML <a href="http://www.ruleml.org/indtd0.8.html#Context">'own' rule</a>
<code><![CDATA[
<imp>
  <_head>
    <atom>
      <_opr><rel>own</rel></_opr>
      <var>person</var>
      <var>object</var>
    </atom>
  </_head>
  <_body>
    <and>
      <atom>
        <_opr><rel>buy</rel></_opr>
        <var>person</var>
        <var>merchant</var>
        <var>object</var>
      </atom>
      <atom>
        <_opr><rel>keep</rel></_opr>
        <var>person</var>
        <var>object</var>
      </atom>
    </and>
  </_body>
</imp>]]></code>

can be changed to an Object-Oriented RuleML 'own' rule as follows:

<code><![CDATA[
<imp>
  <_head>
    <atom>
      <_opr><rel>own</rel></_opr>
      <var>person</var>
      <var>object</var>
      <_slot name="value"><var>amount</var></_slot>
      <_slot name="region"><var>where</var></_slot>
      <_slot name="period"><var>when</var></_slot>
    </atom>
  </_head>
  <_body>
    <and>
      <atom>
        <_opr><rel>buy</rel></_opr>
        <var>person</var>
        <var>object</var>
        <_slot name="seller"><var>merchant</var></_slot>
        <_slot name="price"><var>amount</var></_slot>
        <_slot name="region"><var>where</var></_slot>
        <_slot name="period"><var>when</var></_slot>
      </atom>
      <atom>
        <_opr><rel>keep</rel></_opr>
        <var>person</var>
        <var>object</var>
        <_slot name="region"><var>where</var></_slot>
        <_slot name="period"><var>when</var></_slot>
      </atom>
    </and>
  </_body>
</imp>]]></code>

In this OO RuleML version, all relations have the same positional arguments, person and object,
used throughout in positions 1 and 2, respectively. The former 2nd positional argument, merchant,
of the buy premise is now a "seller"-slotted argument; a "price"-slotted argument is added,
which becomes a "value"-slotted argument in the own conclusion.
All relations use extra "region"-slotted and "period"-slotted arguments. More slotted arguments
may be added without affecting the interpretations of any existing ones. The remaining two
positional arguments could also be converted, to versions of "buyer"-slotted and "item"-slotted arguments,
leading to a purely object-centered representation.

</p>
</section>


<section label="Weighted">
<header>The Slot-Weighted Extension</header>
<p>
The slot-Weighted extension of Object-Oriented RuleML (WOO RuleML) is summarized in the talk
<a href="ruleml-acorn.ppt">Weighted RuleML Metaroles for Similarity Matching in ACORN Information Agents</a>
and is used in the <a href="http://www.cs.unb.ca/baseweb/">BASeWEB'03</a> paper
<a href="BhavsarBoleyYang-Final.pdf">A Weighted-Tree Similarity Algorithm for Multi-Agent Systems in e-Business Environments</a>.
</p>
</section>

<section>
<header>The Central RDF Extension</header>
<p>
The central RDF extension of Object-Oriented RuleML is summarized in the talk
<a href="ruleml-swarch.pdf">Object-Oriented RuleML for RDF: Facts, Queries, and Inferences</a>
(<a href="ruleml-swarch.ppt">slide source</a>).
</p>
</section>

<section>
<header>An N3 Comparison</header>
<p>
An alignment of Object-Oriented RuleML and N3 (Notation 3) has been started with
<a href="n3ruleml.html">N3 in Object-Oriented RuleML</a>.
</p>
</section>

<section>
<header>The OO DTDs</header>
<p>
The atom, nano, and cterm elements - after their zero or more positional argument children - now
also have zero or more non-positional argument children '_slot' (for the metarole 'slot') with
a required CDATA attribute 'name' (for the user-defined role name) and optional attributes
'card' (for the role's cardinality - with default: "single", overridden via card="multiple") and 'weight'
(for the role's relative weight - a float number from [0.0 .. 1.0]).
The '_slot' element has a single child which can be an arbitrary term (e.g., it may - again - be an
object-oriented cterm) or - within certain nanos - can be an expression.
</p>

<p>
To obtain the <a href="http://www.ruleml.org/inspec">DTD and XML Schema of RuleML 0.85</a>,
basically, in the <a href="http://www.ruleml.org/indtd0.8.html">RuleML 0.8 DTDs</a> replace ...

<code><![CDATA[
<!ELEMENT cterm ((_opc, (ind | var | cterm | tup | roli)*) | ((ind | var | cterm | tup | roli)+, _opc))>

<!ELEMENT tup   ((ind | var | cterm | tup | roli)*)>

<!ELEMENT atom ((_opr, (ind | var | cterm | tup | roli)*) | ((ind | var | cterm | tup | roli)+, _opr))>]]></code>

by (one optional block of 'XML/math/logic-positional' elements surrounded by two optional groups of 'RDF/F-Logic/DL-rolled' elements) ...

<code><![CDATA[
<!ELEMENT cterm ((_opc, (_slot)*, (ind | var | cterm | tup)*, (_slot)*) | ((_slot)*, (ind | var | cterm | tup)+, (_slot)*, _opc))>

<!ELEMENT tup   ((_slot)*, (ind | var | cterm | tup)*, (_slot)*)>

<!ELEMENT atom ((_opr, (_slot)*, (ind | var | cterm | tup)*, (_slot)*) | ((_slot)*, (ind | var | cterm | tup)+, (_slot)*, _opr))>]]></code>

... and add

<code><![CDATA[
<!ELEMENT _slot ((ind | var | cterm | tup))>

<!ATTLIST _slot name CDATA #REQUIRED>

<!ATTLIST _slot card CDATA #IMPLIED>]]></code>

For <a href="#Weighted">the Slot-Weighted Extension</a> also include an optional role weight:
<code><![CDATA[
<!ATTLIST _slot weight CDATA #IMPLIED>]]></code>

Further optional attributes are of course possible.

</p>
</section>

<section>
<header>POSL: Merging Prolog and F-Logic</header>
<p>
A shared Positional-Slotted Language, <a href="http://www.ruleml.org/submission/ruleml-shortation.html">POSL</a>,
has been proposed that merges the concrete syntax, abstract (constructor and selector) syntax,
and unification algorithms of Prolog and F-Logic.
POSL can help bridging work done by, e.g., the <a href="http://forum.semanticweb.org/">FORUM Technical Group</a>
of RuleML and other work related to OO RuleML. Marcel Ball has implemented convertors from and to POSL,
which were instrumental in building and maintaining the <a href="#Applications">OO RuleML Applications</a>:
<itemize>
  <item>The POSL parser servlet is available online at <a href="http://www.ruleml.org:8080/converters/servlet/AsciiToRuleML">POSL2RuleML</a>.
</item>

<item>The POSL generator servlet is available online at <a href="http://www.ruleml.org:8080/converters/servlet/RuleMLToAscii">RuleML2POSL</a>.
</item>
</itemize>
</p>
</section>

<section label="Applications">
<header>OO RuleML Applications</header>
<p>
The Rule Applying Learning Object Comparison Agent, <a href="http://198.164.40.138/raloca/">RALOCA</a>,
was created as an early e-learning application in Object-Oriented RuleML; this has been further developed
as part of the <a href="http://racofi.elg.ca/">RACOFI</a> systems.
The New Brunswick Business Knowledge Base, <a href="http://www.ruleml.org/usecases/nbbizkb/">NBBizKB</a>,
is a major use case for OO RuleML.
</p>
</section>

<section>
<header>Two Implementations</header>
<p>
The first implementation, translating Object-Oriented to Positional RuleML on top of Bruce Spencer's jDREW engine, has been
developed by Stephen Greene in XSLT:
<a href="http://198.164.40.138/ruleml/ooruleml-xslt/">OO RuleML in XSLT</a>.
The second implementation, directly modifying Bruce Spencer's jDREW engine, has been
developed by Marcel Ball in Java:
<a href="http://www.jdrew.org/oojdrew/">OO jDREW</a>.
</p>
</section>

<section label="Programs-as-Data">
<header>RuleML "Programs as Data"</header>
<p>
The 'metarole' feature of Object-Oriented RuleML permits "Programs as Data",
pioneered by Lisp and Prolog, in the XML world: RuleML facts, rules, and
even entire rule bases can be elegantly encoded via OO RuleML's object-oriented cterms.
At the core, a 'system role' like &lt;_head> simply becomes encoded as a 'user role' &lt;_slot name="head">.

For example, the original <a href="http://www.ruleml.org/indtd0.8.html#Context">'own' rule</a>
<code><![CDATA[
<imp>
  <_head>
    <atom>
      <_opr><rel>own</rel></_opr>
      <var>person</var>
      <var>object</var>
    </atom>
  </_head>
  <_body>
    <and>
      <atom>
        <_opr><rel>buy</rel></_opr>
        <var>person</var>
        <var>merchant</var>
        <var>object</var>
      </atom>
      <atom>
        <_opr><rel>keep</rel></_opr>
        <var>person</var>
        <var>object</var>
      </atom>
    </and>
  </_body>
</imp>]]></code>

becomes encoded thus (after including a 'rel' choice into the content model of _slot, higher-order-like):

<code><![CDATA[
<cterm>
  <_opc><ctor>imp</ctor></_opc>
  <_slot name="head">
    <cterm>
      <_opc><ctor>atom</ctor></_opc>
      <_slot name="opr"><rel>own</rel></_slot>
      <var>person</var>
      <var>object</var>
    </cterm>
  </_slot>
  <_slot name="body">
    <cterm>
      <_opc><ctor>and</ctor></_opc>
      <cterm>
        <_opc><ctor>atom</ctor></_opc>
        <_slot name="opr"><rel>buy</rel></_slot>
        <var>person</var>
        <var>merchant</var>
        <var>object</var>
      </cterm>
      <cterm>
        <_opc><ctor>atom</ctor></_opc>
        <_slot name="opr"><rel>keep</rel></_slot>
        <var>person</var>
        <var>object</var>
      </cterm>
    </cterm>
  </_slot>
</cterm>]]></code>

This permits among other things (1) to specify meta-interpreters for RuleML in RuleML,
thus extending RuleML's operational semantics, and (2) to have RuleML rules generate
(encoded) RuleML rules.

</p>
</section>

  <closing>
<p>
Site Contact:
<a href="http://www.cs.unb.ca/~boley/">Harold Boley</a>.
Page Version: 2004-03-15

<br/><br/><br/>

      <a name="Practice-Preach"/><small>"Practice what you preach": XML source of this homepage at <a href="http://www.ruleml.org/indoo/indoo.xml">indoo.xml</a>;
      <br/>
      transformed to HTML via the adaptation of <a href="http://www.dfki.uni-kl.de/~sintek/">Michael Sintek</a>'s SliML <a href="http://www.w3.org/TR/xslt">XSLT</a> stylesheet at <a href="http://www.dfki.uni-kl.de/~boley/xslt/homepage.xsl">homepage.xsl</a> (View | Page Source)
      </small>
</p>

<xhtml><a target="_self" href="http://xml.apache.org/cocoon/index.html"><img align="right" alt="Powered by Cocoon" border="0" hspace="4" src="../cocoon-small.jpg" vspace="2"/></a></xhtml>
  </closing>


</homepage>
