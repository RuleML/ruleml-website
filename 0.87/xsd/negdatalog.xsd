<?xml version="1.0" encoding="UTF-8"?>
<xs:schema 
targetNamespace="http://www.ruleml.org/0.87/xsd" 
xmlns="http://www.ruleml.org/0.87/xsd"
xmlns:xs="http://www.w3.org/2001/XMLSchema"
>

	<xs:annotation>
		<xs:documentation xml:lang="en">
			XML Schema for a Datalog RuleML sublanguage, including classical/strong negation
			File: negdatalog.xsd
			Version: 0.87
			Last Modification: 2004-08-11
		</xs:documentation>
	</xs:annotation>
	
	<!-- negdatalog includes the 'negation' module -->
	<xs:include schemaLocation="modules/negation_module.xsd"/>

	<!-- note the addition of Neg (classical Negation) from the Negation module -->
	<xs:redefine schemaLocation="datalog.xsd">

		<!--
			add Neg so that head's content model is:
			(Atom | Neg)
		-->
		<xs:group name="head.content">
			<xs:choice>
				<xs:group ref="head.content"/>
				<xs:element ref="Neg"/>
			</xs:choice>
		</xs:group>

		<!--
			add Neg so that Fact's content model is:
			( (rlab, ( head | Atom | Neg) ) | ( (head | Atom | Neg), rlab?) )
		-->
		<xs:group name="Fact.extend">
			<xs:choice>
				<xs:group ref="Fact.extend"/>
				<xs:element ref="Neg"/>
			</xs:choice>	
		</xs:group>

		<!--
			add Neg so that body's content model is:
			(Atom | And | Or | Neg)
		-->
		<xs:group name="body.content">
			<xs:choice>
				<xs:group ref="body.content"/>
				<xs:element ref="Neg"/>
			</xs:choice>
		</xs:group>

		<!--
			add Neg so that Query's content model is:
			( (rlab, (body | Atom | And | Or | Neg) ) | ( (body | Atom | And | Or | Neg), rlab?) )
		-->
		<xs:group name="Query.extend">
			<xs:choice>
				<xs:group ref="Query.extend"/>
				<xs:element ref="Neg"/>
			</xs:choice>	
		</xs:group>

		<!--
			add Neg so that And's content model is:
			((Atom | Or | Neg)*)
		-->
		<xs:group name="And.content">
			<xs:choice>
				<xs:group ref="And.content"/>
				<xs:element ref="Neg"/>
			</xs:choice>
		</xs:group>	

		<!--
			add Neg so that Or's content model is:
			((Atom | And | Neg)*)
		-->			
		<xs:group name="Or.content">
			<xs:choice>
				<xs:group ref="Or.content"/>
				<xs:element ref="Neg"/>
			</xs:choice>
		</xs:group>

		<!--
			add Neg so that wff's content model is:
			((Atom | And | Or | Neg)*)
		-->
		<xs:group name="wff.content">
			<xs:choice>
				<xs:group ref="wff.content"/>
				<xs:element ref="Neg"/>
			</xs:choice>
		</xs:group>

	</xs:redefine>
	
</xs:schema>