% Likes swimming indoors for long periods and walking outdoors.
% Sample Wellness Rules for Activities of Person p0005
% ----------------------------------------------------
%John
%1:00 0:40 Walks
%0:20 Yoga
%3:00 Baseball
%----------------
%Profile - P0005
%----------------

%myActivity(p0005,Walking,Out,1:integer,20:integer,
	%dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
	%dateTime[?EndYear,?EndMonth,?EndDay,?EndHour,?EndMinute],
	%?Place,durationTime[?DurHour,?DurMinute],?FitnessLevel).

%CALENDAR
%--------
calendar(p0005,c0004).

%EVENTS - Possible
%-----------------------------
%May 21, 2010 1 hour time and 40 minute time slot Sunny
event(c0004,?:Activity,Possible,
		dateTime[2010:integer,5:integer,21:integer,10:integer,0:integer],
		dateTime[2010:integer,5:integer,21:integer,11:integer,40:integer]).

%May 22, 2010 1 hour time slot, Saturday Mostly Cloudy
event(c0004,?:Activity,Possible,
		dateTime[2010:integer,5:integer,22:integer,16:integer,0:integer],
		dateTime[2010:integer,5:integer,22:integer,17:integer,0:integer]).
		
%May 23, 2010 Three hour time slot, Sunday Partly Cloudy
event(c0004,?:Activity,Possible,
		dateTime[2010:integer,5:integer,23:integer,13:integer,0:integer],
		dateTime[2010:integer,5:integer,23:integer,16:integer,0:integer]).


%MAP
%---
map(p0005,m0001).

%EXPECTED FITNESS LEVELS
%-----------------------
fitness(p0005,
	dateTime[2010:integer,5:integer,21:integer,10:integer,0:integer], 2:integer).
fitness(p0005,
	dateTime[2010:integer,5:integer,22:integer,16:integer,0:integer], 3:integer).
fitness(p0005,
	dateTime[2010:integer,5:integer,23:integer,13:integer,0:integer], 5:integer).
fitness(p0005,
	dateTime[2010:integer,5:integer,24:integer,10:integer,15:integer], 3:integer).
fitness(p0005,
	dateTime[2010:integer,5:integer,25:integer,16:integer,0:integer], 3:integer).
fitness(p0005,
	dateTime[2010:integer,5:integer,26:integer,12:integer,0:integer], 2:integer).
fitness(p0005,
	dateTime[2010:integer,7:integer,28:integer,12:integer,0:integer], 2:integer).

%MEETUP LOCATION FITNESS LEVELS
%------------------------------
level(p0005,?:Walking,durationTime[1:integer,0:integer],1:integer).
level(p0005,?:Walking,durationTime[0:integer,40:integer],1:integer).
level(p0005,?:Baseball,durationTime[2:integer,0:integer],3:integer).
level(p0005,?:Yoga,durationTime[0:integer,20:integer],2:integer).


%Preferred Group Sizes
%---------------------
groupSize(p0005,?:Walking,Out,1:integer,20:integer).
groupSize(p0005,?:Baseball,Out,1:integer,20:integer).
groupSize(p0005,?:Yoga,In,1:integer,20:integer).
	
%--------------------------
%Activities - Walking (out)
%--------------------------
myActivity(p0005,Activity:Walking,Out,?MinRSVP,?MaxRSVP,
	dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
	dateTime[?EndYear,?EndMonth,?EndDay,?EndHour,?EndMinute],
	?Place,durationTime[?DurHour,?DurMinute],?FitnessLevel) :-
  calendar(p0005,?CalendarID),
  event(?CalendarID,?Activity:Walking,Possible,
	dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
	dateTime[?EndYear,?EndMonth,?EndDay,?EndHour,?EndMinute]),
  participation(p0005,?Activity:Walking,Out,?MinRSVP,?MaxRSVP),
  season(?StartDay,?StartMonth,Spring),
  forecast(?Location,
	dateTime[?StartYear,?StartMonth,?StartDay,?AnyHour,?AnyMinute],
	?LowTemp,?HighTemp,?AvgTemp,?Condition:SunnyWeather),
  greaterThanOrEqual(?AvgTemp,15:integer),
  map(p0005,?Map),
  meetup(?Map,?Activity:Walking,Out,?Place),
  level(p0005,?Activity:Walking,durationTime[?DurHour,?DurMinute],?FitnessLevel),
  fitness(p0005,
	dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute], ?ExpectedFitness),	
  greaterThanOrEqual(?ExpectedFitness,?FitnessLevel),
  goodDuration(
	durationTime[?DurHour,?DurMinute],
	dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
	dateTime[?EndYear,?EndMonth,?EndDay,?EndHour,?EndMinute]).
  

%--------------------------
%Activities - Baseball(Out)
%--------------------------

myActivity(p0005,Activity:Baseball,Out,?MinRSVP,?MaxRSVP,
	dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
	dateTime[?EndYear,?EndMonth,?EndDay,?EndHour,?EndMinute],
	?Place,durationTime[?DurHour,?DurMinute],?FitnessLevel) :-
  calendar(p0005,?CalendarID),
  event(?CalendarID,?Activity:Baseball,Possible,
	dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
	dateTime[?EndYear,?EndMonth,?EndDay,?EndHour,?EndMinute]),
  participation(p0005,?Activity:Baseball,Out,?MinRSVP,?MaxRSVP),
  season(?StartDay,?StartMonth,?Season),
  forecast(?Location,
	dateTime[?StartYear,?StartMonth,?StartDay,?AnyHour,?AnyMinute],
	?LowTemp,?HighTemp,?AvgTemp,?Condition),
  %greaterThanOrEqual(?AvgTemp,15:integer),
  map(p0005,?Map),
  meetup(?Map,?Activity:Baseball,Out,?Place),
  level(p0005,?Activity:Baseball,durationTime[?DurHour,?DurMinute],?FitnessLevel),
  fitness(p0005,
	dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],?ExpectedFitness),	
  greaterThanOrEqual(?ExpectedFitness,?FitnessLevel),
  goodDuration(
	durationTime[?DurHour,?DurMinute],
	dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
	dateTime[?EndYear,?EndMonth,?EndDay,?EndHour,?EndMinute]).
	
%--------------------------
%Activities - Yoga(In)
%--------------------------

myActivity(p0005,Activity:Yoga,In,?MinRSVP,?MaxRSVP,
	dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
	dateTime[?EndYear,?EndMonth,?EndDay,?EndHour,?EndMinute],
	?Place,durationTime[?DurHour,?DurMinute],?FitnessLevel) :-
  calendar(p0005,?CalendarID),
  event(?CalendarID,?Activity:Yoga,Possible,
	dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
	dateTime[?EndYear,?EndMonth,?EndDay,?EndHour,?EndMinute]),
  participation(p0005,?Activity:Yoga,In,?MinRSVP,?MaxRSVP),
  map(p0005,?Map),
  meetup(?Map,?Activity:Yoga,In,?Place),
  level(p0005,?Activity:Yoga,durationTime[?DurHour,?DurMinute],?FitnessLevel),
  fitness(p0005,
	dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute], ?ExpectedFitness),	
  greaterThanOrEqual(?ExpectedFitness,?FitnessLevel),
  goodDuration(
	durationTime[?DurHour,?DurMinute],
	dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
	dateTime[?EndYear,?EndMonth,?EndDay,?EndHour,?EndMinute]).
