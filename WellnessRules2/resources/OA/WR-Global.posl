%Global WellnessRules
%--------------------

%PARTICIPATION CHECK
%-------------------
participation(?ProfileID,?Activity,?Ambience,?MinRSVP,?MaxRSVP) :- 
	groupSize(?ProfileID,?Activity,?Ambience,?Min,?Max),
	greaterThanOrEqual(?MinRSVP,?Min),
	lessThanOrEqual(?MaxRSVP,?Max).

%SEASON CHECK
%-------------
%When date contains the starting month of the season.
season(?StartDay,?StartMonth,?Season) :-
	seasonRange(?SStartDay,?SStartMonth,?SEndDay,?SEndMonth,?Season),
	equal(?StartMonth,?SStartMonth),
	greaterThanOrEqual(?StartDay,?SStartDay).

%When date falls on a month which only has one possible season.	
season(?StartDay,?StartMonth,?Season) :-
	seasonRange(?SStartDay,?SStartMonth,?SEndDay,?SEndMonth,?Season),
	equal(?StartMonth,?SEndMonth),
	lessThanOrEqual(?StartDay,?SEndDay).
	
%When date contains the ending month of the season.
season(?StartDay,?StartMonth,?Season) :-
	seasonRange(?SStartDay,?SStartMonth,?SEndDay,?SEndMonth,?Season),
	greaterThan(?StartMonth,?SStartMonth),
	lessThan(?StartMonth,?SEndMonth).
	
seasonRange(21:integer,3:integer,20:integer,6:integer,Spring).
seasonRange(21:integer,6:integer,22:integer,9:integer,Summer).
seasonRange(23:integer,9:integer,20:integer,12:integer,Fall).
seasonRange(21:integer,12:integer,31:integer,13:integer,Winter).
seasonRange(1:integer,1:integer,20:integer,3:integer,Winter).
	
%MEETUP LOCATIONS
%----------------
meetup(m0001,?:Walking,Out,ConniesStation).
meetup(m0001,?:Walking,Out,DebbiesValley).
meetup(m0001,?:Running,Out,ConniesStation).
meetup(m0001,?:Running,Out,PetersWagon).
meetup(m0001,?:Running,Out,AllensBrook).	
meetup(m0001,?:Running,In,JoesGym).
meetup(m0001,?:Swimming,In,JohnsPool).
meetup(m0001,?:Swimming,Out,SandrasLake).
meetup(m0001,?:Skating,Out,SandrasLake).
meetup(m0001,?:Yoga,In,LukesHall).
meetup(m0001,?:Hiking,Out,ApplePark).
meetup(m0001,?:Baseball,Out,Fenway).

%GOOD DURATION CHECK
%-------------------
goodDuration(
  dateTime[?DurYear,?DurMonth,?DurDay,?DurHour,?DurMinute],
  dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
  dateTime[?EndYear,?EndMonth,?EndDay,?EndHour,?EndMinute]) :-
	%Convert all duration variables into seconds.
	multiply(?DurYearSeconds,?DurYear,31556926:integer),
	multiply(?DurMonthSeconds,?DurMonth,2629744:integer),
	multiply(?DurDaySeconds,?DurDay,86400:integer),
	multiply(?DurHourSeconds,?DurHour,3600:integer),
	multiply(?DurMinuteSeconds,?DurMinute,60:integer),
	
	%Add them together in a single variable DurTotal.
	add(?DurTotal,?DurMinuteSeconds,?DurHourSeconds,?DurDaySeconds,?DurMonthSeconds,?DurYearSeconds),
	
	%Get the difference between start and end time of each variable.
	subtract(?DurYearTemp,?EndYear,?StartYear),
	subtract(?DurMonthTemp,?EndMonth,?StartMonth),
	subtract(?DurDayTemp,?EndDay,?StartDay),
	subtract(?DurHourTemp,?EndHour,?StartHour),
	subtract(?DurMinuteTemp,?EndMinute,?StartMinute),
	
	%Get the absolute value of the results. This essentially gives you an event duration.
	abs(?DurYearAbs,?DurYearTemp),
	abs(?DurMonthAbs,?DurMonthTemp),
	abs(?DurDayAbs,?DurDayTemp),
	abs(?DurHourAbs,?DurHourTemp),
	abs(?DurMinuteAbs,?DurMinuteTemp),
	
	%Convert all duration variables into seconds.
	multiply(?EventDurYearSeconds,?DurYearAbs,31556926:integer),
	multiply(?EventDurMonthSeconds,?DurMonthAbs,2629744:integer),
	multiply(?EventDurDaySeconds,?DurDayAbs,86400:integer),
	multiply(?EventDurHourSeconds,?DurHourAbs,3600:integer),
	multiply(?EventDurMinuteSeconds,?DurMinuteAbs,60:integer),
	
	%Add them together in a single variable DurTotal.
	add(?EventDurTotal,?EventDurMinuteSeconds,?EventDurHourSeconds,?EventDurDaySeconds,?EventDurMonthSeconds,?EventDurYearSeconds),
	%Insure EventDurTotal is not greater than DurTotal 
	%(the event has a good duration for the start and end time given)
	greaterThanOrEqual(?EventDurTotal,?DurTotal).	
  
%YESTERDAY DEFINITIONS
%---------------------
% Regular yesterday, no month or year change.
yesterday(
  dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
  dateTime[?StartYear,?StartMonth,?Day,?StartHour,?StartMinute]):-
	event(?CalendarID,?Aspect,?Tense,
		dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
		dateTime[?EndYear,?EndMonth,?EndDay,?EndHour,?EndMinute]),
	notEqual(?StartDay,1:integer),
	subtract(?Day,?StartDay,1:integer).

%The first of the month, where the previous month has 31 days.	
yesterday(
  dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
  dateTime[?StartYear,?Month,31:integer,?StartHour,?StartMinute]):-
	event(?CalendarID,?Aspect,?Tense,
		dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
		dateTime[?EndYear,?EndMonth,?EndDay,?EndHour,?EndMinute]),
	equal(?StartDay,1),
	naf(notMemberList(?StartMonth,[2:integer,4:integer,6:integer,8:integer,9:integer,11:integer])),
	subtract(?Month,?StartMonth,1:integer).

%The first of the month, where the previous month has 30 days.	
yesterday(
  dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
  dateTime[?StartYear,?Month,30:integer,?StartHour,?StartMinute]):-
	event(?CalendarID,?Aspect,?Tense,
		dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
		dateTime[?EndYear,?EndMonth,?EndDay,?EndHour,?EndMinute]),
	equal(?StartDay,1),
	naf(notMemberList(?StartMonth,[5:integer,7:integer,10:integer,12:integer])),
	subtract(?Month,?StartMonth,1:integer).

%The first of the month, where the previous month has 28 days.
yesterday(
  dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
  dateTime[?StartYear,?Month,28:integer,?StartHour,?StartMinute]):-
	event(?CalendarID,?Aspect,?Tense,
		dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
		dateTime[?EndYear,?EndMonth,?EndDay,?EndHour,?EndMinute]),
	equal(?StartDay,1),
	naf(notMemberList(?StartMonth,[3:integer])),
	subtract(?Month,?StartMonth,1:integer).
	
%January 1st case, year is decremented and date is December 31st.	
yesterday(
  dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
  dateTime[?Year,12:integer,31:integer,?StartHour,?StartMinute]):-
	event(?CalendarID,?Aspect,?Tense,
		dateTime[?StartYear,?StartMonth,?StartDay,?StartHour,?StartMinute],
		dateTime[?EndYear,?EndMonth,?EndDay,?EndHour,?EndMinute]),
	equal(?StartDay,1),
	equal(?StartMonth,1),
	subtract(?Year,?StartYear,1:integer).
	
	
%Checks to see if element is a member of a list.	
notMember(?X, []).
notMember(?X, [?H|?T]) :- notEqual(?X, ?H), notMember(?X, ?T).
notMemberList( ?X, []).
notMemberList( ?X, [?H]) :- naf(equalList(?X, ?H)).
notMemberList( ?X,[?H|?T]) :-  naf(equalList(?X, ?H)), notMemberList(?X,?T).
equalList(?L, ?L).

%Old WR1 Weather Legacy Facts
forecast("Fredericton, NB",dateTime[2009:integer,6:integer,13:integer,?Hour:integer,?Minute:integer],10:integer,20:integer,15:integer,?:Rain).
forecast("Fredericton, NB",dateTime[2009:integer,6:integer,15:integer,?Hour:integer,?Minute:integer],10:integer,30:integer,20:integer,?:Sunny).
forecast("Fredericton, NB",dateTime[2009:integer,11:integer,12:integer,?Hour:integer,?Minute:integer],-12:integer,0:integer,-6:integer,?:PartlyCloudy).
forecast("Fredericton, NB",dateTime[2009:integer,11:integer,13:integer,?Hour:integer,?Minute:integer],-15:integer,-5:integer,-10:integer,?:Cloudy).
forecast("Fredericton, NB",dateTime[2009:integer,11:integer,14:integer,?Hour:integer,?Minute:integer],0:integer,6:integer,3:integer,?:Snow).
forecast("Fredericton, NB",dateTime[2009:integer,11:integer,15:integer,?Hour:integer,?Minute:integer],-2:integer,8:integer,3:integer,?:Snow).
forecast("Fredericton, NB",dateTime[2009:integer,12:integer,12:integer,?Hour:integer,?Minute:integer],-3:integer,5:integer,1:integer,?:Snow).
forecast("Fredericton, NB",dateTime[2009:integer,12:integer,14:integer,?Hour:integer,?Minute:integer],-10:integer,0:integer,-5:integer,?:Cloudy).



