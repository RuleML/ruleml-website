# GLOBAL WELLNESSRULES
@prefix : <http://www.ruleml.org/WellnessRules2#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>. 
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>. 
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix str: <http://www.w3.org/2000/10/swap/string#>.

#TAXONOMY
:Wellness rdf:type rdfs:Class.

#ACTIVITIES
:Activity rdfs:subClassOf :Wellness.
:Walking	rdfs:subClassOf	:Activity.
:Running	rdfs:subClassOf	:Activity.
:Swimming	rdfs:subClassOf	:Activity.
:Skating	rdfs:subClassOf	:Activity.
:Yoga	rdfs:subClassOf	:Activity.
:Hiking	rdfs:subClassOf	:Activity.
:Baseball	rdfs:subClassOf	:Activity.

#WEATHER
:WeatherCondition rdf:type rdfs:Class.

:SunnyWeather rdfs:subClassOf	:WeatherCondition.
:Sunny rdfs:subClassOf	:SunnyWeather.
:PartlySunny rdfs:subClassOf	:SunnyWeather.
:MostlySunny rdfs:subClassOf	:SunnyWeather.
:Clear rdfs:subClassOf	:SunnyWeather.

:CloudyWeather rdfs:subClassOf	:WeatherCondition.
:Cloudy rdfs:subClassOf	:CloudyWeather.
:PartlyCloudy rdfs:subClassOf	:CloudyWeather.
:MostlyCloudy rdfs:subClassOf	:CloudyWeather. 
:Mist rdfs:subClassOf	:CloudyWeather.
:Overcast rdfs:subClassOf	:CloudyWeather.
:Dust rdfs:subClassOf	:CloudyWeather.
:Fog rdfs:subClassOf	:CloudyWeather.
:Smoke rdfs:subClassOf	:CloudyWeather.
:Haze rdfs:subClassOf	:CloudyWeather.

:RainyWeather rdfs:subClassOf	:CloudyWeather.
:Rain rdfs:subClassOf	:RainyWeather. 
:ChanceofRain rdfs:subClassOf :RainyWeather. 
:Showers rdfs:subClassOf	:RainyWeather.
:LightRain rdfs:subClassOf	:RainyWeather.
:ScatteredShowers rdfs:subClassOf	:RainyWeather.
:FreezingDrizzle rdfs:subClassOf	:RainyWeather.

:ThunderstormWeather rdfs:subClassOf	:RainyWeather.
:Thunderstorm rdfs:subClassOf	:ThunderstormWeather.
:ChanceofTStorm rdfs:subClassOf	:ThunderstormWeather.
:ScatteredThunderstorms rdfs:subClassOf	:ThunderstormWeather.

:SnowyWeather rdfs:subClassOf	:CloudyWeather.
:Snow rdfs:subClassOf	:SnowyWeather.
:Sleet rdfs:subClassOf	:SnowyWeather.
:LightSnow rdfs:subClassOf	:SnowyWeather.
:RainandSnow rdfs:subClassOf	:SnowyWeather.
:ChanceofSnow rdfs:subClassOf	:SnowyWeather.
:Storm rdfs:subClassOf	:SnowyWeather.
:ChanceofStorm rdfs:subClassOf	:SnowyWeather.
:Icy rdfs:subClassOf	:SnowyWeather.

###########
# SEASONS #
###########

{
	?event
		rdf:type		:Event;
		:calendarID		?CalendarID;
		:aspect			?Aspect;
		:tense			?Tense;
		:startDateTime	[:year ?StartYear; :month ?StartMonth; :day ?StartDay; :hour ?StartHour; :minute ?StartMinute; :second ?StartSecond];
		:endDateTime	[:year ?EndYear; :month ?EndMonth; :day ?EndDay; :hour ?EndHour; :minute ?EndMinute; :second ?EndSecond].
		
	?seasonRange
		rdf:type	:SeasonRange;
		:startDay	?SStartDay;
		:startMonth	?SStartMonth;
		:endDay		?SEndDay;
		:endMonth	?SEndMonth;
		:value		?Season.
		
	#When date contains the starting month of the season.
	(?Scope ?Span) e:findall (?Subject
		{
			?StartMonth log:equalTo ?SStartMonth.
			?StartDay math:notLessThan ?SStartDay.
		}
		?Values1).
		
	#When date falls on a month which only has one possible season.	
	(?Scope2 ?Span2) e:findall (?Subject2
		{
			?StartMonth log:equalTo ?SEndMonth.				
			?StartDay math:notGreaterThan ?SEndDay.			
		}
		?Values2).
		
	#When date contains the ending month of the season.
	(?Scope3 ?Span3) e:findall (?Subject3
		{
			?StartMonth math:greaterThan ?SStartMonth.
			?StartMonth math:lessThan ?SEndMonth.	
		}
		?Values3).
				
	(?Values1 ?Values2) list:append ?Values12.
	(?Values12 ?Values3) list:append ?Values123.
	?Values123 list:first ?Season.
}
=>
{
	_:season
		rdf:type	:Season;
		:day		?StartDay;
		:month		?StartMonth;
		:value		?Season.
}.
:season1
	rdf:type	:SeasonRange;
	:startDay	21;
	:startMonth	3;
	:endDay		20;
	:endMonth	6;
	:value		:spring.
:season2
	rdf:type	:SeasonRange;
	:startDay	21;
	:startMonth	6;
	:endDay		22;
	:endMonth	9;
	:value		:summer.
:season3
	rdf:type	:SeasonRange;
	:startDay	23;
	:startMonth	9;
	:endDay		20;
	:endMonth	12;
	:value		:fall.
:season4pt1
	rdf:type	:SeasonRange;
	:startDay	21;
	:startMonth	12;
	:endDay		31;
	:endMonth	13; 		#Implemented to satisfy rule. It is an unreachable boundary
	:value		:winter.
:season4pt2
	rdf:type	:SeasonRange;
	:startDay	1;
	:startMonth	1;
	:endDay		20;
	:endMonth	3;
	:value		:winter.

####################
# MEETUP LOCATIONS #
####################

:meetup_1
	rdf:type	:Meetup;
	:mapID		:m0001;
	:activity	:Walking;
	:inOut		:out;
	:location	:conniesStation.
	
:meetup_2
	rdf:type	:Meetup;
	:mapID		:m0001;
	:activity	:Walking;
	:inOut		:out;
	:location	:debbiesValley.

:meetup_3
	rdf:type	:Meetup;
	:mapID		:m0001;
	:activity	:Running;
	:inOut		:out;
	:location	:conniesStation.

:meetup_4
	rdf:type	:Meetup;
	:mapID		:m0001;
	:activity	:Running;
	:inOut		:out;
	:location	:petersWagon.
	
:meetup_5
	rdf:type	:Meetup;
	:mapID		:m0001;
	:activity	:Running;
	:inOut		:out;
	:location	:allensBrook.

:meetup_6
	rdf:type	:Meetup;
	:mapID		:m0001;
	:activity	:Running;
	:inOut		:in;
	:location	:joesGym.

:meetup_7
	rdf:type	:Meetup;
	:mapID		:m0001;
	:activity	:Swimming;
	:inOut		:in;
	:location	:johnsPool.
	
:meetup_8
	rdf:type	:Meetup;
	:mapID		:m0001;
	:activity	:Swimming;
	:inOut		:out;
	:location	:sandrasLake.
	
:meetup_9
	rdf:type	:Meetup;
	:mapID		:m0001;
	:activity	:skate;
	:inOut		:out;
	:location	:sandrasLake.
	
:meetup_10
	rdf:type	:Meetup;
	:mapID		:m0001;
	:activity	:Yoga;
	:inOut		:in;
	:location	:lukesHall.
	
:meetup_11
	rdf:type	:Meetup;
	:mapID		:m0001;
	:activity	:Hiking;
	:inOut		:out;
	:location	:applePark.
	
:meetup_12
	rdf:type	:Meetup;
	:mapID		:m0001;
	:activity	:Baseball;
	:inOut		:out;
	:location	:fenway.
	
#######################
# GOOD DURATION CHECK #
#######################
#All equal
{
	?event
		rdf:type 		:Event;
		:calendarID		?CalendarID;
		:aspect 		?Aspect;
		:tense 			?Tense;
		:startDateTime	[:year ?StartYear; :month ?StartMonth; :day ?StartDay; :hour ?StartHour; :minute ?StartMinute; :second ?StartSecond];
		:endDateTime	[:year ?EndYear; :month ?EndMonth; :day ?EndDay; :hour ?EndHour; :minute ?EndMinute; :second ?EndSecond].

	?level
		rdf:type 		:Level;
		:profileID 		?ProfileID;
		:activity 		?Activity;
		:inOut 			?Ambience;
		:location 		?Location;
		:duration 		[:year ?DurYear; :month ?DurMonth; :day ?DurDay; :hour ?DurHour; :minute ?DurMinute; :second ?Second];
		:fitnessLevel 	?FitnessLevel.
		
	#Rounding is used here 2629743.83
	#Convert all duration variables into seconds.
	(?DurYear 31556926) math:product ?DurYearSeconds.
	(?DurMonth 2629744) math:product ?DurMonthSeconds.
	(?DurDay 86400) math:product ?DurDaySeconds.
	(?DurHour 3600) math:product ?DurHourSeconds.
	(?DurMinute 60) math:product ?DurMinuteSeconds.
	
	#Add them together in a single variable DurTotal.
	(?DurYearSeconds 0) math:sum ?DurTotal1.	
	(?DurMonthSeconds ?DurTotal1) math:sum ?DurTotal2.	
	(?DurDaySeconds ?DurTotal2) math:sum ?DurTotal3.
	(?DurHourSeconds ?DurTotal3) math:sum ?DurTotal4.
	(?DurMinuteSeconds ?DurTotal4) math:sum ?DurTotal5.
	(?DurSecond ?DurTotal5) math:sum ?DurTotal6.
 
	#Get the difference between start and end time of each variable.
	(?EndYear ?StartYear) math:difference ?DurYearTemp.
	(?EndMonth ?StartMonth) math:difference ?DurMonthTemp.
	(?EndDay ?StartDay) math:difference ?DurDayTemp.
	(?EndHour ?StartHour) math:difference ?DurHourTemp.
	(?EndMinute ?StartMinute) math:difference ?DurMinuteTemp.	
	(?EndSecond ?StartSecond) math:difference ?DurSecondTemp.
	
	#Get the absolute value of the results. This essentially gives you an event duration.
	?DurYearTemp math:absoluteValue ?DurYearAbs.
	?DurMonthTemp math:absoluteValue ?DurMonthAbs.
	?DurDayTemp math:absoluteValue ?DurDayAbs.
	?DurHourTemp math:absoluteValue ?DurHourAbs.
	?DurMinuteTemp math:absoluteValue ?DurMinuteAbs.
	?DurSecondTemp math:absoluteValue ?DurSecondAbs.	
	
	#Convert all event duration variables into seconds.
	(?DurYearAbs 31556926) math:product ?DurYearSeconds2.
	(?DurMonthAbs 2629744) math:product ?DurMonthSeconds2.
	(?DurDayAbs 86400) math:product ?DurDaySeconds2.
	(?DurHourAbs 3600) math:product ?DurHourSeconds2.
	(?DurMinuteAbs 60) math:product ?DurMinuteSeconds2.

	#Add them together in a single variable EventDurTotal.	
	(?DurYearSeconds2 0) math:sum ?EventDurTotal1.
	(?DurMonthSeconds2 ?EventDurTotal1) math:sum ?EventDurTotal2.
	(?DurDaySeconds2 ?EventDurTotal2) math:sum ?EventDurTotal3.
	(?DurHourSeconds2 ?EventDurTotal3) math:sum ?EventDurTotal4.
	(?DurMinuteSeconds2 ?EventDurTotal4) math:sum ?EventDurTotal5.
	(?DurSecondAbs ?EventDurTotal5) math:sum ?EventDurTotal6.
	
	#Insure EventDurTotal is not greater than DurTotal 
	#(the event has a good duration for the start and end time given)
	?EventDurTotal6 math:greaterThan ?DurTotal6.	

}
=>
{
_:goodDuration
		rdf:type		:GoodDuration;
		:duration		[:year ?DurYear; :month ?DurMonth; :day ?DurDay; :hour ?DurHour; :minute ?DurMinute; :second ?Second];
		:startDateTime	[:year ?StartYear; :month ?StartMonth; :day ?StartDay; :hour ?StartHour; :minute ?StartMinute; :second ?StartSecond];
		:endDateTime	[:year ?EndYear; :month ?EndMonth; :day ?EndDay; :hour ?EndHour; :minute ?EndMinute; :second ?EndSecond].
}.

#############
# YESTERDAY #
#############

# Regular yesterday, no month or year change.
{
	?event
		rdf:type	:Event;
		:calendarID	?CalendarID;
		:aspect		?Aspect;
		:tense		?Tense;
		:startDate	[:year ?StartYear; :month ?StartMonth; :day ?StartDay; :hour ?StartHour; :minute ?StartMinute];
		:endDate	[:year ?EndYear; :month ?EndMonth; :day ?EndDay; :hour ?EndHour; :minute ?EndMinute].
		
	?StartDay math:notEqualTo 1.
	(?StartDay 1) math:difference ?Day.
}
=>
{
	_:yesterday
		rdf:type	:Yesterday;
		:startDate	[:year ?StartYear; :month ?StartMonth; :day ?StartDay; :hour ?StartHour; :minute ?StartMinute];
		:prevDate	[:year ?StartYear; :month ?StartMonth; :day ?Day; :hour ?StartHour; :minute ?StartMinute].
}.

#The first of the month, where the previous month has 31 days.
{
	?event
		rdf:type	:Event;
		:calendarID	?CalendarID;
		:aspect		?Aspect;
		:tense		?Tense;
		:startDate	[:year ?StartYear; :month ?StartMonth; :day ?StartDay; :hour ?StartHour; :minute ?StartMinute];
		:endDate	[:year ?EndYear; :month ?EndMonth; :day ?EndDay; :hour ?EndHour; :minute ?EndMinute].
		
	?StartDay math:equalTo 1.
	?StartMonth list:in (2 4 6 8 9 11).
	(?StartMonth 1) math:difference ?Month.					
}
=>
{
	_:yesterday
		rdf:type	:Yesterday;
		:startDate	[:year ?StartYear; :month ?StartMonth; :day ?StartDay; :hour ?StartHour; :minute ?StartMinute];
		:prevDate	[:year ?StartYear; :month ?Month; :day 31; :hour ?StartHour; :minute ?StartMinute].
}.

#The first of the month, where the previous month has 30 days.
{
	?event
		rdf:type	:Event;
		:calendarID	?CalendarID;
		:aspect		?Aspect;
		:tense		?Tense;
		:startDate	[:year ?StartYear; :month ?StartMonth; :day ?StartDay; :hour ?StartHour; :minute ?StartMinute];
		:endDate	[:year ?EndYear; :month ?EndMonth; :day ?EndDay; :hour ?EndHour; :minute ?EndMinute].
		
	?StartDay math:equalTo 1.
	?StartMonth list:in (5 7 10 12).
	(?StartMonth 1) math:difference ?Month.					
}
=>
{
	_:yesterday
		rdf:type	:Yesterday;
		:startDate	[:year ?StartYear; :month ?StartMonth; :day ?StartDay; :hour ?StartHour; :minute ?StartMinute];
		:prevDate	[:year ?StartYear; :month ?Month; :day 30; :hour ?StartHour; :minute ?StartMinute].
}.

#The first of the month, where the previous month has 28 days.
{
	?event
		rdf:type	:Event;
		:calendarID	?CalendarID;
		:aspect		?Aspect;
		:tense		?Tense;
		:startDate	[:year ?StartYear; :month ?StartMonth; :day ?StartDay; :hour ?StartHour; :minute ?StartMinute];
		:endDate	[:year ?EndYear; :month ?EndMonth; :day ?EndDay; :hour ?EndHour; :minute ?EndMinute].
		
	?StartDay math:equalTo 1.
	?StartMonth list:in (3).
	(?StartMonth 1) math:difference ?Month.					
}
=>
{
	_:yesterday
		rdf:type	:Yesterday;
		:startDate	[:year ?StartYear; :month ?StartMonth; :day ?StartDay; :hour ?StartHour; :minute ?StartMinute];
		:prevDate	[:year ?StartYear; :month ?Month; :day 28; :hour ?StartHour; :minute ?StartMinute].
}.

#January 1st case, year is decremented and date is December 31st.
{
	?event
		rdf:type	:Event;
		:calendarID	?CalendarID;
		:aspect		?Aspect;
		:tense		?Tense;
		:startDate	[:year ?StartYear; :month ?StartMonth; :day ?StartDay; :hour ?StartHour; :minute ?StartMinute];
		:endDate	[:year ?EndYear; :month ?EndMonth; :day ?EndDay; :hour ?EndHour; :minute ?EndMinute].
		
	?StartDay math:equalTo 1.
	?StartMonth math:equalTo 1.
	(?StartYear 1) math:difference ?Year.		
}
=>
{
	_:yesterday
		rdf:type	:Yesterday;
		:startDate	[:year ?StartYear; :month ?StartMonth; :day ?StartDay; :hour ?StartHour; :minute ?StartMinute];
		:prevDate	[:year ?Year; :month 12; :day 31; :hour ?StartHour; :minute ?StartMinute].
}.


:forecast_1
	rdf:type	:Forecast;
	:location	"Fredericton, NB";
	:dateTime	[rdf:type :DateTime; :year 2009; :month 6; :day 13; :hour ?Hour; :minute ?Minute];
	:lowTemp	10;
	:highTemp	20;
	:avgTemp	15;
	:conditions	"Rain".
	
:forecast_2
	rdf:type	:Forecast;
	:location	"Fredericton, NB";
	:dateTime	[rdf:type :DateTime; :year 2009; :month 6; :day 15; :hour ?Hour; :minute ?Minute];
	:lowTemp	10;
	:highTemp	30;
	:avgTemp	20;
	:conditions	"Sunny".

:forecast_3
	rdf:type	:Forecast;
	:location	"Fredericton, NB";
	:dateTime	[rdf:type :DateTime; :year 2009; :month 11; :day 12; :hour ?Hour; :minute ?Minute];
	:lowTemp	-12;
	:highTemp	0;
	:avgTemp	-6;
	:conditions	"PartlyCloudy".
	
:forecast_4
	rdf:type	:Forecast;
	:location	"Fredericton, NB";
	:dateTime	[rdf:type :DateTime; :year 2009; :month 11; :day 13; :hour ?Hour; :minute ?Minute];
	:lowTemp	-15;
	:highTemp	-5;
	:avgTemp	-10;
	:conditions	"Cloudy".
	
:forecast_5
	rdf:type	:Forecast;
	:location	"Fredericton, NB";
	:dateTime	[rdf:type :DateTime; :year 2009; :month 11; :day 14; :hour ?Hour; :minute ?Minute];
	:lowTemp	0;
	:highTemp	6;
	:avgTemp	3;
	:conditions	"Snow".
	
:forecast_6
	rdf:type	:Forecast;
	:location	"Fredericton, NB";
	:dateTime	[rdf:type :DateTime; :year 2009; :month 11; :day 15; :hour ?Hour; :minute ?Minute];
	:lowTemp	-2;
	:highTemp	8;
	:avgTemp	3;
	:conditions	"Snow".
	
:forecast_7
	rdf:type	:Forecast;
	:location	"Fredericton, NB";
	:dateTime	[rdf:type :DateTime; :year 2009; :month 12; :day 12; :hour ?Hour; :minute ?Minute];
	:lowTemp	-3;
	:highTemp	5;
	:avgTemp	1;
	:conditions	"Snow".
	
:forecast_8
	rdf:type	:Forecast;
	:location	"Fredericton, NB";
	:dateTime	[rdf:type :DateTime; :year 2009; :month 12; :day 14; :hour ?Hour; :minute ?Minute];
	:lowTemp	-10;
	:highTemp	0;
	:avgTemp	-5;
	:conditions	"Cloudy".

