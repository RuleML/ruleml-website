<?cocoon-format type="text/html"><html>
<head>
<meta content="text/html; charset=UTF-8" http-equiv="Content-Type">
<title>Schema Specification of RuleML 0.9</title>
<style type="text/css">
       h1 { font-size: 32pt; font-weight: bold }
       h2 { font-size: 16pt; font-weight: bold }
       ul { line-height: 120% }
       ol { line-height: 120% }
       p { line-height: 100% }
       dt { font-weight: bold }
       abbr, acronym { cursor:help }
     </style>
</head>
<body bgcolor="#FFFFFF">
		<center>
			<br>
			<br>
			<h1>Schema Specification of RuleML 0.9</h1>
			<h2>
				David Hirtle,
				<a href="http://www.cs.unb.ca/~boley/">Harold Boley</a>, 
				<a href="http://ebusiness.mit.edu/bgrosof/">Benjamin Grosof</a>,
				<a href="http://www.cs.sunysb.edu/~kifer">Michael Kifer</a>,<br>
				<a href="http://www.dfki.uni-kl.de/~sintek/">Michael Sintek</a>,
				<a href="http://home.comcast.net/~stabet/">Said Tabet</a>,
				<a href="http://tmitwww.tm.tue.nl/staff/gwagner/">Gerd Wagner</a>			
			</h2>
			
			<table border="0" align="center">
			<tr><td colspan="2" align="center"><h2>Version history:</h2></td></tr>
			<tr>
<td align="right">2001-01-25 - </td>
<td><a href="http://www.ruleml.org/indtd.html">Version 0.7</a></td>
</tr>
			<tr>
<td align="right">2001-07-11 - </td>
<td><a href="http://www.ruleml.org/indtd0.8.html">Version 0.8</a></td>
</tr>
			<tr>
<td align="right">2003-12-09 - </td>
<td><a href="http://www.ruleml.org/0.85/">Version 0.85</a></td>
</tr>
			<tr>
<td align="right">2004-06-23 - </td>
<td><a href="http://www.ruleml.org/0.86/">Version 0.86</a></td>
</tr>
			<tr>
<td align="right">2004-08-12 - </td>
<td><a href="http://www.ruleml.org/0.87/">Version 0.87</a></td>
</tr>
			<tr>
<td align="right">2005-03-01 - </td>
<td><a href="http://www.ruleml.org/0.88/">Version 0.88</a></td>
</tr>
			<tr>
<td align="right">2005-05-27 - </td>
<td><a href="http://www.ruleml.org/0.89/">Version 0.89</a></td>
</tr>
			<tr>
<td align="right"><h3>2005-11-09 - </h3></td>
<td><h3><a href="http://www.ruleml.org/0.9/">Version 0.9</a></h3></td>
</tr>			
			</table>			

			<h2>Latest version: <a href="http://www.ruleml.org/spec/">www.ruleml.org/spec</a>
</h2>
			<p>
			<h2>Quick links:</h2>
			<h2>
<a href="http://www.ruleml.org/0.9/xsd/content_models_09.pdf">Content Models</a>,
			<a href="http://www.ruleml.org/0.9/xsd">Schemas</a> <small>(<a href="http://www.ruleml.org/0.85/dtd">Archived DTDs</a>)</small>,
			 <a href="http://www.ruleml.org/0.9/exa">Examples</a>,
			<a href="http://www.ruleml.org/0.9/glossary">Glossary</a>
			</h2>
		</center>
		<br>
		
		<p>This is the revised XML Schema specification for RuleML version 0.9.</p>
		 <p>
		   Each XML Schema Definition (XSD) in the evolving hierarchy corresponds to a specific RuleML
		   sublanguage. The implementation uses a
		   <a href="http://www.w3.org/TR/xhtml-modularization/">modularization approach similar to the one in XHTML</a>
		   in order to offer appropriate flexibility and accomodate different implementations and approaches.
		   Note that the Document Type Definition (DTD) specification of RuleML is no longer being maintained,
		   but will continue to be <a href="http://www.ruleml.org/0.85/dtd">available as an archive</a>.  Tools
		   capable of converting between XML Schema and DTDs such as <a href="http://www.altova.com/products_ide.html">XMLSpy</a>
		   are always available.
		</p>
		
	<h2>Contents</h2>
<ul>
<li><a href="#Overview">Overview</a></li>
<li><a href="#Changes">Changes</a></li>
<li><a href="#Glossary">Glossary</a></li>
<li><a href="#Modularization">Modularization</a></li>
<li><a href="#XSDs">XSDs</a></li>
<li><a href="#Validation">Validation</a></li>
<li><a href="#Examples">Examples</a></li>
<li><a href="#Striped Syntax">Striped Syntax</a></li>
<li><a href="#Mapping">Attribute Mapping</a></li>
<li><a href="#Appendix">Appendix</a></li>
<li><a href="#Appendix 1">Appendix 1: XSD for the Datalog sublanguage of RuleML</a></li>
<li><a href="#Appendix 2">Appendix 2:  Example rulebase in RuleML</a></li>
<li><a href="#Appendix 3">Appendix 3:  Instructions on validating the example against the XSD</a></li>
</ul>
<h2><a name="Overview">Overview</a></h2>
	
   <p>
   An introduction to RuleML is given in our <a href="http://www.ruleml.org/papers/tutorial-ruleml.html">tutorial</a>.
    Also, the main page's <a href="http://www.ruleml.org/index.html#Design">design section</a>
   discusses the upper layer of the RuleML hierarchy of rules.
   In that terminology, the system of RuleML XSDs presented here only covers
   derivation rules, not reaction rules (see the <a href="http://www.ruleml.org/modularization/#Model">official model</a>)
   </p>
   <p>
   This is because we think it is important to start with a subset of
   simple rules, test and refine our principal strategy using these,
   and then work 'up' to the more general categories of rules in the hierarchy.
   For this we choose
   <a href="http://www-lp.doc.ic.ac.uk/UserPages/staff/ft/alp/net/dbs/datalog.html">Datalog</a>,
   a language corresponding to relational databases
   (ground facts without complex domains or 'constructors')
   augmented by views (possibly recursive rules),
   and work a few steps upwards to further declarative rules
   as allowed in (equational) Horn logic.
   </p>	

	<p>Below is a summary of the changes in version 0.9:</p>
	
	<ul>
		<li>new sublanguage: hornlog with negation-as-failure (nafhornlog), as implemented by <a href="http://www.jdrew.org/oojdrew">OO jDREW</a>
</li>
		<li>
<code>&lt;opr&gt;</code>, <code>&lt;opc&gt;</code> and <code>&lt;opf&gt;</code> merged into context-sensitive
		<a href="glossary/#gloss-op"><code>&lt;op&gt;</code></a>
</li>
		<li>
<code>&lt;Mutex&gt;</code> generalized as <a href="glossary/#gloss-Integrity"><code>&lt;Integrity&gt;</code></a>
</li>
		<li>
<a href="glossary/#gloss-@kind"><code>@kind</code></a> attribute added to <a href="glossary/#gloss-Implies"><code>&lt;Implies&gt;</code></a> to distinguish
		between FOL and LP types of implication
		(as in the <a href="http://www.wsmo.org/wsml/wrl/wrl.html">Web Rule Language</a>)</li>
		<li>
<a href="glossary/#gloss-RuleML"><code>&lt;RuleML&gt;</code></a> toplevel element is introduced, permitting (ordered) transactions of performatives</li>
		<li>
<code>@wid</code> and <code>@wref</code> are replaced with a single attribute: <a href="glossary/#gloss-@uri"><code>@uri</code></a>
</li>		
		<li>existing performatives <a href="glossary/#gloss-Assert"><code>&lt;Assert&gt;</code></a>, <a href="glossary/#gloss-Query"><code>&lt;Query&gt;</code></a> and
		<a href="glossary/#gloss-Protect"><code>&lt;Protect&gt;</code></a> now make the 'implicit <a href="glossary/#gloss-And"><code>&lt;And&gt;</code></a>'
		assumption for their clauses</li>
		<li>
<a href="glossary/#gloss-@mapClosure"><code>@mapClosure</code></a> and <a href="glossary/#gloss-@mapDirection"><code>@mapDirection</code></a> now
		 added to performatives,	and <a href="glossary/#gloss-@closure"><code>@closure</code></a> added to  <a href="glossary/#gloss-Query"><code>&lt;Query&gt;</code></a>
</li>
		<li>(official) introduction of a 'positionalized' prefix normal form</li>
		<li>
<a href="glossary/#gloss-degree"><code>&lt;degree&gt;</code></a> added to facts and rules for <a href="http://image.ntua.gr/FuzzyRuleML">Fuzzy RuleML</a>
</li>
	</ul>

	<p>For more information, see the <a href="#Changes">Changes</a> section.</p>
	
	<p>A comprehensive <a href="#Glossary">glossary</a> accompanies this specification.</p>
	
	<p>The grammar of RuleML 0.9 (i.e. the content model of each individual tag) is available as a single document called <a href="xsd/content_models_09.pdf">Content Models for RuleML</a> in addition to being encoded within the <a href="xsd/">XML Schemas</a>.
	</p>

<h2><a name="Changes">Changes</a></h2>
	
<p>RuleML 0.9 consists of the following changes relative to the previous version <a href="http://www.ruleml.org/0.89/">0.89</a>.
</p>

<p>The sublanguage of hornlog with negation-as-failure (nafhornlog), as implemented by <a href="http://www.jdrew.org/oojdrew">OO jDREW</a>, is added to the family of sublanguages (see the <a href="#Modularization">Modularization</a> section). The language is analogous to nafdatalog, differing only by the addition of complex terms and rest variables.</p>

<p>Since <a href="http://www.ruleml.org/0.8">RuleML 0.8</a>, the <code>&lt;opr&gt;</code>, <code>&lt;opc&gt;</code> and <code>&lt;opf&gt;</code> roles have been substituted (because of technical reasons) for a generic operator of relations, functions and constructors. These are now merged into such a generic operator (<a href="glossary/#gloss-op"><code>&lt;op&gt;</code></a>) using context-sensitivity (i.e. the allowable content of <a href="glossary/#gloss-op"><code>&lt;op&gt;</code></a> depends on whether it is within an <a href="glossary/#gloss-Atom"><code>&lt;Atom&gt;</code></a>, <a href="glossary/#gloss-Cterm"><code>&lt;Cterm&gt;</code></a>, etc). This is demonstrated in <a href="http://www.ruleml.org/0.9/exa/book.ruleml">book.ruleml</a>:</p>
<p><b><pre>
 &lt;Atom&gt;
   &lt;op&gt;&lt;Rel&gt;book&lt;/Rel&gt;&lt;/op&gt;
   &lt;Cterm&gt;
     &lt;op&gt;&lt;Ctor&gt;parts&lt;/Ctor&gt;&lt;/op&gt;
     &lt;Var&gt;title&lt;/Var&gt;
     &lt;Var&gt;autor&lt;/Var&gt;
     &lt;Var&gt;toc&lt;/Var&gt;
     &lt;Var&gt;chapters&lt;/Var&gt;
   &lt;/Cterm&gt;
 &lt;/Atom&gt;</pre></b></p>

<p>Mutual exclusion (<code>&lt;Mutex&gt;</code>) is generalized as integrity constraints (<a href="glossary/#gloss-Integrity"><code>&lt;Integrity&gt;</code></a>). As with the original <code>&lt;Mutex&gt;</code> tag, <a href="glossary/#gloss-Integrity"><code>&lt;Integrity&gt;</code></a> is allowable within the <a href="glossary/#gloss-Protect"><code>&lt;Protect&gt;</code></a> performative (optionally wrapped by a <a href="glossary/#gloss-warden"><code>&lt;warden&gt;</code></a> role). For example, the constraint that the discount offered to the same customer cannot be two distinct values (from the <a href="http://www.w3.org/Submission/SWSF-SWSL/#swsl-rules-courteous"><acronym title="Semantic Web Services Language">SWSL</acronym> submission</a> to the W3C) would be marked up as</p>
<p><b><pre>
 &lt;Integrity&gt;
   &lt;Implies&gt;
     &lt;Neg&gt;
       &lt;Equal&gt;
         &lt;Var&gt;Y&lt;/Var&gt;
         &lt;Var&gt;Z&lt;/Var&gt;
       &lt;/Equal&gt;
     &lt;/Neg&gt;   
     &lt;Neg&gt;
       &lt;And&gt;
         &lt;Hterm&gt;
           &lt;Con&gt;pricediscount&lt;/Con&gt;
           &lt;Var&gt;CUST&lt;/Var&gt;
           &lt;Var&gt;Y&lt;/Var&gt;
         &lt;/Hterm&gt;
         &lt;Hterm&gt;
           &lt;Con&gt;pricediscount&lt;/Con&gt;
           &lt;Var&gt;CUST&lt;/Var&gt;
           &lt;Var&gt;Z&lt;/Var&gt;
         &lt;/Hterm&gt;
       &lt;/And&gt;
     &lt;/Neg&gt;
   &lt;/Implies&gt;
 &lt;/Integrity&gt;</pre></b></p>
<p>instead of this syntax introduced in 0.89:</p>
<p><b><pre>
 &lt;Mutex&gt;
   &lt;oppo&gt;
     &lt;And&gt;
       &lt;Hterm&gt;
         &lt;Con&gt;pricediscount&lt;/Con&gt;
         &lt;Var&gt;CUST&lt;/Var&gt;
         &lt;Var&gt;Y&lt;/Var&gt;
       &lt;/Hterm&gt;
       &lt;Hterm&gt;
         &lt;Con&gt;pricediscount&lt;/Con&gt;
         &lt;Var&gt;CUST&lt;/Var&gt;
         &lt;Var&gt;Z&lt;/Var&gt;
       &lt;/Hterm&gt;
     &lt;/And&gt;
   &lt;/oppo&gt;
   &lt;mgiv&gt;
     &lt;Neg&gt;
       &lt;Equal&gt;
         &lt;Var&gt;Y&lt;/Var&gt;
         &lt;Var&gt;Z&lt;/Var&gt;
       &lt;/Equal&gt;
     &lt;/Neg&gt;
   &lt;/mgiv&gt;
 &lt;/Mutex&gt;</pre></b></p>

<p>The new <a href="glossary/#gloss-@kind"><code>@kind</code></a> attribute is optionally added to <a href="glossary/#gloss-Implies"><code>&lt;Implies&gt;</code></a> for the purpose of  distinguishing between <abbr title="First Order Logic">FOL</abbr> and <abbr title="Logic Programming">LP</abbr> types of implication (as in the <a href="http://www.w3.org/Submission/WRL">Web Rule Language</a>).</p>

<p>An n-ary <a href="glossary/#gloss-RuleML"><code>&lt;RuleML&gt;</code></a> toplevel element is introduced (formally similar to <abbr title="Resource Description Framework">RDF</abbr>'s <code>&lt;rdf:RDF&gt;</code>), permitting (ordered) transactions of the performatives <a href="glossary/#gloss-Assert"><code>&lt;Assert&gt;</code></a>,  <a href="glossary/#gloss-Query"><code>&lt;Query&gt;</code></a> and <a href="glossary/#gloss-Protect"><code>&lt;Protect&gt;</code></a>. This allows combining, for example, asserted and queried content in the same document, as in <a href="http://www.ruleml.org/0.9/exa/discount.ruleml">discount.ruleml</a>:</p>
<p><b><pre>
 &lt;RuleML&gt;
   &lt;Assert&gt;
     &lt;Implies&gt;
	   &lt;And&gt;
	     &lt;Atom&gt;
		   &lt;op&gt;&lt;Rel&gt;premium&lt;/Rel&gt;&lt;/op&gt;
		   &lt;Var&gt;customer&lt;/Var&gt;
	     &lt;/Atom&gt;
  	     &lt;Atom&gt;
		   &lt;op&gt;&lt;Rel&gt;regular&lt;/Rel&gt;&lt;/op&gt;
		   &lt;Var&gt;product&lt;/Var&gt;
	     &lt;/Atom&gt;
	   &lt;/And&gt;
	   &lt;Atom&gt;
  	     &lt;op&gt;&lt;Rel&gt;discount&lt;/Rel&gt;&lt;/op&gt;
	     &lt;Var&gt;customer&lt;/Var&gt;
	     &lt;Var&gt;product&lt;/Var&gt;
	     &lt;Ind&gt;5.0 percent&lt;/Ind&gt;
	   &lt;/Atom&gt;
     &lt;/Implies&gt;
     ...
   &lt;/Assert&gt;
   &lt;Query&gt;
     &lt;Atom&gt;
       &lt;op&gt;&lt;Rel&gt;discount&lt;/Rel&gt;&lt;/op&gt;
       &lt;Var&gt;customer&lt;/Var&gt;
       &lt;Var&gt;product&lt;/Var&gt;
       &lt;Var&gt;amount&lt;/Var&gt;
     &lt;/Atom&gt;
   &lt;/Query&gt;
 &lt;/RuleML&gt;</pre></b></p>

<p>The attributes <code>@wid</code> and <code>@wref</code> are replaced with a single attribute: <a href="glossary/#gloss-@uri"><code>@uri</code></a> (deviating from XML's <code>@id</code> vs. <code>@idref</code> and <abbr title="Resource Description Framework">RDF</abbr>'s <code>@about</code> vs. <code>@resource</code> dualisms). This change allows a <a href="glossary/#gloss-Var"><code>&lt;Var&gt;</code></a> to 'read' or 'input' an <code>&lt;Ind uri=&quot;...&quot;/&gt;</code> and 'write' or 'output' it as an <code>&lt;Ind uri=&quot;...&quot;/&gt;</code>.</p>

<p>Existing performatives (<a href="glossary/#gloss-Assert"><code>&lt;Assert&gt;</code></a>, <a href="glossary/#gloss-Query"><code>&lt;Query&gt;</code></a> and
<a href="glossary/#gloss-Protect"><code>&lt;Protect&gt;</code></a>) now implicitly assume that an <a href="glossary/#gloss-And"><code>&lt;And&gt;</code></a> surrounds their clauses. For this reason, the <a href="glossary/#gloss-@mapClosure"><code>@mapClosure</code></a> and <a href="glossary/#gloss-@mapDirection"><code>@mapDirection</code></a> attributes are added to <a href="glossary/#gloss-Assert"><code>&lt;Assert&gt;</code></a> and  <a href="glossary/#gloss-Protect"><code>&lt;Protect&gt;</code></a>, and <a href="glossary/#gloss-@closure"><code>@closure</code></a> is added to <a href="glossary/#gloss-Query"><code>&lt;Query&gt;</code></a>. For example, the beginning of <a href="http://www.ruleml.org/0.89/exa/factorial.ruleml">factorial.ruleml</a> changes from</p>

<p><b><pre>
 &lt;Assert&gt;
   &lt;And mapClosure=&quot;universal&quot;&gt;
     &lt;Equal&gt;
       &lt;Nano&gt;
         &lt;Fun&gt;fac&lt;/Fun&gt;
         &lt;Ind&gt;0&lt;/Ind&gt;
       &lt;/Nano&gt;
       &lt;Ind&gt;1&lt;/Ind&gt;
     &lt;/Equal&gt;
     ...</pre></b></p>
<p>in <a href="http://www.ruleml.org/0.89">0.89</a> to the following in 0.9:</p>
<p><b><pre>
 &lt;Assert mapClosure=&quot;universal&quot;&gt;
   &lt;Equal&gt;
     &lt;Nano&gt;
       &lt;Fun&gt;fac&lt;/Fun&gt;
       &lt;Ind&gt;0&lt;/Ind&gt;
     &lt;/Nano&gt;
     &lt;Ind&gt;1&lt;/Ind&gt;
   &lt;/Equal&gt;
   ...</pre></b></p>
<p>(omitting the new <a href="glossary/#gloss-RuleML"><code>&lt;RuleML&gt;</code></a> root).</p>

<p>A prefix normal form is officially introduced, where certain role tags are 'positionalized', i.e. restricted to certain positions within content models (in this case, the beginning). This has always been the case for the <a href="glossary/#gloss-oid"><code>&lt;oid&gt;</code></a> role, which can only be at the beginning of an <a href="glossary/#gloss-Atom"><code>&lt;Atom&gt;</code></a>. Now, however, other role tags are affected: in 0.9, <a href="glossary/#gloss-op"><code>&lt;op&gt;</code></a> may no longer be postfix. While applying the prefix normal form to other role tags is under consideration (for future versions), some role tags (e.g. <a href="glossary/#gloss-body"><code>&lt;body&gt;</code></a> and  <a href="glossary/#gloss-head"><code>&lt;head&gt;</code></a>) will not be affected. The prefix normal form greatly reduces the complexity of certain content models, helping avoid issues with current validation tools. An XSLT stylesheet from postfix (or mixed postfix and prefix) forms to prefix normal form is available.</p>

<p>Finally, the optional element <a href="glossary/#gloss-degree"><code>&lt;degree&gt;</code></a> permits the assignment of an uncertainty value (between 0.0 and 1.0) to facts and rules. For example,
the following rule (from <a href="http://image.ntua.gr/FuzzyRuleML">Fuzzy RuleML</a>) asserts that a person's happiness is more dependent on
being healthy than being rich:</p>
<p><b><pre>
&lt;Implies&gt;
  &lt;head&gt;
    &lt;Atom&gt;
      &lt;Rel&gt;Happy&lt;/Rel&gt;
      &lt;Var&gt;person&lt;/Var&gt;
    &lt;/Atom&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;And&gt;
      &lt;Atom&gt;
        &lt;degree&gt;
	    &lt;Data xsi:type=&quot;xs:float&quot;&gt;0.5&lt;/Data&gt;
	  &lt;/degree&gt;
        &lt;Rel&gt;Rich&lt;/Rel&gt;
        &lt;Var&gt;person&lt;/Var&gt;
      &lt;/Atom&gt;
      &lt;Atom&gt;
        &lt;degree&gt;
	    &lt;Data xsi:type=&quot;xs:float&quot;&gt;0.9&lt;/Data&gt;
	  &lt;/degree&gt;
        &lt;Rel&gt;Healthy&lt;/Rel&gt;
        &lt;Var&gt;person&lt;/Var&gt;
      &lt;/Atom&gt;
    &lt;/And&gt;
  &lt;/body&gt;
&lt;/Implies&gt;
</pre></b></p>

<h2><a name="Glossary">Glossary</a></h2>


<p>A <a href="http://www.ruleml.org/0.9/glossary">glossary for RuleML 0.9</a> has been created, featuring descriptions for every tag in RuleML 0.9. The intent is to keep it maintained for future releases.</p>
<h2><a name="Modularization">Modularization</a></h2>
		
		<p>The most current model of the modularization of RuleML is always documented at
		<a href="http://www.ruleml.org/modularization/#Model">http://www.ruleml.org/modularization/#Model</a>.</p>
<h2><a name="XSDs">XSDs</a></h2>
	
	<p>A stable <a href="xsd/">XML Schema representation</a> of RuleML version 0.9 has been created using an
	<a href="http://www.ruleml.org/modularization/#Approach">approach</a> that is consistent with that used in the (version
	0.85) <a href="http://www.ruleml.org/0.85/dtd">DTDs</a>.</p>
<h2><a name="Validation">Validation</a></h2>
	
	<p>To ensure validation stability, the <a href="xsd/">0.9 XSDs</a> are
	tested (using corresponding <a href="exa/">instance documents/examples</a>)
	with a selection of the most reliable validators. A summary of these validation results follows:</p>
	
	<p>
<a href="http://www.w3.org/2001/03/webdata/xsv">W3C XML Schema Validator (XSV)</a> <small>v 2.10-1</small><br>
	All examples and schemas validate perfectly except for the binary sublanguages. There was a related <a href="http://lists.w3.org/Archives/Public/xmlschema-dev/2005Feb/0046.html">known bug in XSV 2.7-1</a> affecting the binary sublanguages that may still be causing problems. See <a href="#Appendix 3">Appendix 3</a> for instructions on validating an example against its XML Schema and the corresponding output.</p>

	 
<h2><a name="Examples">Examples</a></h2>
	
	<p>Numerous sample RuleML documents have been prepared and maintained as examples and for testing purposes.  They
	are stored in the <a href="exa/">Examples directory</a>.  (Examples from previous versions of RuleML are also maintained, e.g.
	<a href="http://www.ruleml.org/0.89/exa/">0.89 examples</a>).</p>
<h2><a name="Striped Syntax">Striped Syntax</a></h2>

<p>There are two kinds tags in RuleML: method-like 'role' tags and class-like 'type' tags.  The two are easily
distinguished by their initial letter, much like the convention used in Java: role tags start with a lower-case
letter, whereas type tags start with an upper-case letter.  For example, &lt;head&gt; is a role tag and
&lt;Ind&gt; is a type tag.</p>
<p>Furthermore, type and role tags alternate in RuleML.  For example, notice the alternation in this a fact
asserting that John sells XMLBible to Mary:</p>
<p><b><pre>
 &lt;Atom&gt;
   &lt;op&gt;
     &lt;Rel&gt;sell&lt;/Rel&gt;
   &lt;/op&gt;
   &lt;arg index=&quot;1&quot;&gt;
     &lt;Ind&gt;John&lt;/Ind&gt;
   &lt;/arg&gt;
   &lt;arg index=&quot;2&quot;&gt;
     &lt;Ind&gt;Mary&lt;/Ind&gt;
   &lt;/arg&gt;
   &lt;arg index=&quot;3&quot;&gt;
     &lt;Ind&gt;XMLBible&lt;/Ind&gt;
   &lt;/arg&gt;
 &lt;/Atom&gt;
</pre></b></p>
<p>This is known as the &quot;striped syntax&quot; of RuleML, and is important for compatibility with RDF.
Because this is quite verbose, all role tags can also be skipped (in the spirit of Sandro Hawke's 
<a href="http://esw.w3.org/topic/StripeSkipping">StripeSkipping</a>), leaving a more compact form. 
For example, the above fact can be shortened to:</p>

<p><b><pre>
 &lt;Atom&gt;
   &lt;Rel&gt;sell&lt;/Rel&gt;
   &lt;Ind&gt;John&lt;/Ind&gt;
   &lt;Ind&gt;Mary&lt;/Ind&gt;
   &lt;Ind&gt;XMLBible&lt;/Ind&gt;
 &lt;/Atom&gt;
</pre></b></p>

<p>Note that there is no loss of information, because all role tags can be reconstructed based on the
remaining type tags.  In fact, this reconstruction (from the latter positional form to the former slotted form) can be done automatically via XSLT, as with the
<a href="http://www.ruleml.org/0.89/#XSLT-Based%20Normalizer">Normalizer</a> in 0.89.</p>
<p>This gives the syntax of RuleML a lot of flexibility because it allows either a compact or expanded form 
(or any combination thereof), where the compact form is more user-friendly and the expanded (normalized)
form is more compatible with other languages.</p>
<h2><a name="Mapping">Attribute Mapping</a></h2>

<p>There are two pairs of attributes in RuleML that have names which differ only by a 'map' prefix: <code>closure</code> and <code>mapClosure</code>, and <code>direction</code> and <code>mapDirection</code>. The naming convention reflects attribute 'mapping' through XML trees, where</p>
<p><b><pre>&lt;TypeTag mapAttribute=&quot;...&quot;&gt;&lt;c1&gt;. . .&lt;/c1&gt;. . .&lt;cN&gt;. . .&lt;/cN&gt;&lt;/TypeTag&gt;</pre></b></p>
<p>basically acts like</p>
<p><b><pre>&lt;TypeTag&gt;&lt;c1 attribute=&quot;...&quot;&gt;. . .&lt;/c1&gt;. . .&lt;cN attribute=&quot;...&quot;&gt;. . .&lt;/cN&gt;&lt;/TypeTag&gt;</pre></b></p>
<h2><a name="Appendix">Appendix</a></h2>

<p>
Appended below is the XML Schema (version 0.9) for the Datalog
sublanguage of RuleML (<a href="#Appendix 1">Appendix 1</a>).  Also appended
below is a simple example rulebase that conforms to that XSD (<a href="#Appendix 2">Appendix 2</a>), 
and instructions for how to validate the example against the schema 
(<a href="#Appendix 3">Appendix 3</a>).
</p>
<p>
The entire family of 0.9 XSDs, specified in a modular fashion, are available here:
<a href="http://www.ruleml.org/0.9/xsd">http://www.ruleml.org/0.9/xsd</a>.
Additional sample files, each referring to the most specific XSD which validates it, can be
found at <a href="http://www.ruleml.org/0.9/exa">http://www.ruleml.org/0.9/exa</a>.
</p>
<h2><a name="Appendix 1">Appendix 1: XSD for the Datalog sublanguage of RuleML</a></h2>

<p>Source: <a href="xsd/datalog.xsd">datalog.xsd</a>
</p>

<table border="1" cellpadding="5" bgcolor="#FFFFFF"><tr><td><b><pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;xs:schema 
xmlns=&quot;http://www.ruleml.org/0.9/xsd&quot; 
xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; 
targetNamespace=&quot;http://www.ruleml.org/0.9/xsd&quot;
&gt;

	&lt;xs:annotation&gt;
		&lt;xs:documentation xml:lang=&quot;en&quot;&gt;
			XML Schema for a Datalog RuleML sublanguage
			File: datalog.xsd
			Version: 0.9
			Last Modification: 2005-11-09
		&lt;/xs:documentation&gt;
	&lt;/xs:annotation&gt;

	&lt;!--
		Note that datalog is entirely composed of modules and that all other
		schema drivers rely on it, making it the root of the sublanguage family tree.
	--&gt;

	&lt;!--
		Datalog includes the following modules:
		* performative
		* desc
		* quantifier
		* connective
		* atom
		* slot
		* term
		* uri

		For details on each module, including what element and/or attribute declarations
		they contain, please refer to them individually.
	--&gt;

	&lt;xs:include schemaLocation=&quot;modules/performative_module.xsd&quot;/&gt;
	&lt;xs:include schemaLocation=&quot;modules/desc_module.xsd&quot;/&gt;
	&lt;xs:include schemaLocation=&quot;modules/quantifier_module.xsd&quot;/&gt;
	&lt;xs:include schemaLocation=&quot;modules/connective_module.xsd&quot;/&gt;
	&lt;xs:include schemaLocation=&quot;modules/atom_module.xsd&quot;/&gt;
	&lt;xs:include schemaLocation=&quot;modules/slot_module.xsd&quot;/&gt;
	&lt;xs:include schemaLocation=&quot;modules/term_module.xsd&quot;/&gt;
	&lt;xs:include schemaLocation=&quot;modules/uri_module.xsd&quot;/&gt;

&lt;/xs:schema&gt;</pre></b></td></tr></table>
<h2><a name="Appendix 2">Appendix 2:  Example rulebase in RuleML</a></h2>

<p>Source: <a href="exa/own.ruleml">own.ruleml</a>
</p>
<table border="1" cellpadding="5" bgcolor="#FFFFFF"><tr><td><b><pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;RuleML
xmlns=&quot;http://www.ruleml.org/0.9/xsd&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xsi:schemaLocation=&quot;http://www.ruleml.org/0.9/xsd http://www.ruleml.org/0.9/xsd/datalog.xsd&quot;
&gt;

&lt;Assert mapClosure=&quot;universal&quot;&gt;

&lt;!-- start XML comment ...

This example rulebase contains four rules.
The first and second rules are implications; the third and fourth ones are facts.

In English:

The first rule implies that a person owns an object
if that person buys the object from a merchant and the person keeps the object.

As an OrdLab Tree:

Implies~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          *                         *
     head *                    body *
          *                         *
        Atom~~~~~~~~~~~~~~~~~~     And~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                 *     |     |           |                                   |
             opr *     |     |           |                                   |
                 *     |     |           |                                   |        
                Rel   Var   Var        Atom~~~~~~~~~~~~~~~~~~~~~~~~~~~     Atom~~~~~~~~~~~~~~~~~~
                 .     .     .                  *     |      |       |              *     |     |
                 .     .     .              opr *     |      |       |          opr *     |     |
                 .     .     .                  *     |      |       |              *     |     |
                own  person object             Rel   Var    Var     Var            Rel   Var   Var
                                                .     .      .       .              .     .     . 
                                                .     .      .       .              .     .     .
                                                .     .      .       .              .     .     .
                                               buy  person merchant object        keep  person object

... end XML comment --&gt;

&lt;Implies&gt;
  &lt;head&gt;
    &lt;Atom&gt;
      &lt;op&gt;&lt;Rel&gt;own&lt;/Rel&gt;&lt;/op&gt;
      &lt;Var&gt;person&lt;/Var&gt;
      &lt;Var&gt;object&lt;/Var&gt;
    &lt;/Atom&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;!-- explicit 'And' --&gt;
    &lt;And&gt;
      &lt;Atom&gt;
        &lt;op&gt;&lt;Rel&gt;buy&lt;/Rel&gt;&lt;/op&gt;
        &lt;Var&gt;person&lt;/Var&gt;
        &lt;Var&gt;merchant&lt;/Var&gt;
        &lt;Var&gt;object&lt;/Var&gt;
      &lt;/Atom&gt;
      &lt;Atom&gt;
        &lt;op&gt;&lt;Rel&gt;keep&lt;/Rel&gt;&lt;/op&gt;
        &lt;Var&gt;person&lt;/Var&gt;
        &lt;Var&gt;object&lt;/Var&gt;
      &lt;/Atom&gt;
    &lt;/And&gt;
  &lt;/body&gt;
&lt;/Implies&gt;

&lt;!-- The second rule implies that a person buys an object from a merchant
if the merchant sells the object to the person. --&gt;

&lt;Implies&gt;
  &lt;head&gt;
    &lt;Atom&gt;
      &lt;op&gt;&lt;Rel&gt;buy&lt;/Rel&gt;&lt;/op&gt;
      &lt;Var&gt;person&lt;/Var&gt;
      &lt;Var&gt;merchant&lt;/Var&gt;
      &lt;Var&gt;object&lt;/Var&gt;
    &lt;/Atom&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;Atom&gt;
      &lt;op&gt;&lt;Rel&gt;sell&lt;/Rel&gt;&lt;/op&gt;
      &lt;Var&gt;merchant&lt;/Var&gt;
      &lt;Var&gt;person&lt;/Var&gt;
      &lt;Var&gt;object&lt;/Var&gt;
    &lt;/Atom&gt;
  &lt;/body&gt;
&lt;/Implies&gt;
 
&lt;!-- The third rule is a fact that asserts that
John sells XMLBible to Mary. --&gt;
 
    &lt;Atom&gt;
      &lt;op&gt;&lt;Rel&gt;sell&lt;/Rel&gt;&lt;/op&gt;
      &lt;Ind&gt;John&lt;/Ind&gt;
      &lt;Ind&gt;Mary&lt;/Ind&gt;
      &lt;Ind&gt;XMLBible&lt;/Ind&gt;
    &lt;/Atom&gt;
 
&lt;!-- The fourth rule is a fact that asserts that
Mary keeps XMLBible.
 
Observe that this fact is binary - i.e., there are two arguments
for the relation. RDF viewed as a logical knowledge representation
is, likewise, binary, although its arguments have type restrictions,
e.g., the first must be a resource (basically, a URI). Some of the
DTD's on the RuleML website handle URL's/URI's (UR's); see especially
urc-datalog.dtd for inferencing with RDF-like facts --&gt;
 
    &lt;Atom&gt;
      &lt;op&gt;&lt;Rel&gt;keep&lt;/Rel&gt;&lt;/op&gt;
      &lt;Ind&gt;Mary&lt;/Ind&gt;
      &lt;Ind&gt;XMLBible&lt;/Ind&gt;
    &lt;/Atom&gt;
  
&lt;/Assert&gt;

&lt;/RuleML&gt;</pre></b></td></tr></table>
<h2><a name="Appendix 3">Appendix 3:  Instructions on validating the example against the XSD</a></h2>

<table border="1" cellpadding="5" bgcolor="#FFFFFF"><tr><td>
<b><pre>
Validating a RuleML 0.9 Sample Document: own.ruleml
====================================================

1. Direct your browser to </pre></b><a href="http://www.w3.org/2001/03/webdata/xsv">http://www.w3.org/2001/03/webdata/xsv</a>
<b><pre>(Validator for XML Schema REC (20010502) version, as amended).

2. Enter the following URL of our example RuleML file (or any other) into the textfield
preceded by &quot;Address(es)&quot;: http://www.ruleml.org/0.9/exa/own.ruleml

3. If desired, check the &quot;Show Warnings&quot; box.

4. Click the &quot;Get Results&quot; button.

Note: The validation may take a while, and may require a full
refresh when re-validating to avoid caching.

Also note: Depending on your browser, you may want to select a different
output using the radio buttons just above the &quot;Get Results&quot; button.

***
 
You should get the following output (using the default output):</pre></b>

		<h3>Schema validating with XSV 2.10-1 of 2005/04/22 13:10:49</h3>
		<ul>
			<li>
<b>Target</b>: <code>http://www.ruleml.org/0.9/exa/own.ruleml</code><br>   (Real name: http://www.ruleml.org/0.9/exa/own.ruleml<br>    Length: 3808 bytes
 <br>    Last Modified: Thu, 10 Nov 2005 05:56:30 GMT<br>    Server: Apache/1.3.27 (Unix)  (Red-Hat/Linux) mod_fastcgi/2.4.2 mod_ssl/2.8.12 OpenSSL/0.9.6b DAV/1.0.3 PHP/4.1.2 mod_perl/1.26)</li>
			<li>
<b>docElt</b>: <code>{http://www.ruleml.org/0.9/xsd}RuleML</code>
</li>
			<li>Validation was strict, starting with type <code>{http://www.ruleml.org/0.9/xsd}:RuleML.type</code>
</li>
			<li>
<b>schemaLocs</b>: http://www.ruleml.org/0.9/xsd -&gt; http://www.ruleml.org/0.9/xsd/datalog.xsd</li>
			<li>The schema(s) used for schema-validation had no errors</li>
			<li>No schema-validity problems were found in the target </li>
		</ul>
		<hr>
		<h3>Schema resources involved</h3>
		<p>Attempt to load a schema document from
<code>http://www.ruleml.org/0.9/xsd/datalog.xsd</code>
 (source: <code>schemaLoc</code>) for
   <code>http://www.ruleml.org/0.9/xsd</code>,
    succeeded</p>
		<p>Attempt to load a schema document from
<code>http://www.ruleml.org/0.9/xsd/modules/performative_module.xsd</code>
 (source: <code>include</code>) for
   <code>http://www.ruleml.org/0.9/xsd</code>,
    succeeded</p>
		<p>Attempt to load a schema document from
<code>http://www.ruleml.org/0.9/xsd/modules/desc_module.xsd</code>
 (source: <code>include</code>) for
   <code>http://www.ruleml.org/0.9/xsd</code>,
    succeeded</p>
		<p>Attempt to load a schema document from
<code>http://www.ruleml.org/0.9/xsd/modules/quantifier_module.xsd</code>
 (source: <code>include</code>) for
   <code>http://www.ruleml.org/0.9/xsd</code>,
    succeeded</p>
		<p>Attempt to load a schema document from
<code>http://www.ruleml.org/0.9/xsd/modules/connective_module.xsd</code>
 (source: <code>include</code>) for
   <code>http://www.ruleml.org/0.9/xsd</code>,
    succeeded</p>
		<p>Attempt to load a schema document from
<code>http://www.ruleml.org/0.9/xsd/modules/atom_module.xsd</code>
 (source: <code>include</code>) for
   <code>http://www.ruleml.org/0.9/xsd</code>,
    succeeded</p>
		<p>Attempt to load a schema document from
<code>http://www.ruleml.org/0.9/xsd/modules/slot_module.xsd</code>
 (source: <code>include</code>) for
   <code>http://www.ruleml.org/0.9/xsd</code>,
    succeeded</p>
		<p>Attempt to load a schema document from
<code>http://www.ruleml.org/0.9/xsd/modules/term_module.xsd</code>
 (source: <code>include</code>) for
   <code>http://www.ruleml.org/0.9/xsd</code>,
    succeeded</p>
		<p>Attempt to load a schema document from
<code>http://www.ruleml.org/0.9/xsd/modules/uri_module.xsd</code>
 (source: <code>include</code>) for
   <code>http://www.ruleml.org/0.9/xsd</code>,
    succeeded</p>      
		<hr>
</td></tr></table>
<br>
		<p>
		Site Contact:
		<a href="http://www.cs.unb.ca/~boley/">Harold Boley</a>.
		Page Version: 2006-07-28
		
		<br>
		<br>
		<br>
		<a name="Practice-Preach"></a>
		<small>&quot;Practice what you preach&quot;: XML source of this homepage at <a href="index.xml">index.xml</a> (<a href="index.xml.txt">index.xml.txt</a>);
	      <br>
	      transformed to HTML via the adaptation of <a href="http://www.dfki.uni-kl.de/~sintek/">Michael Sintek</a>'s SliML <a href="http://www.w3.org/TR/xslt">XSLT</a> stylesheet at <a href="http://www.dfki.uni-kl.de/~boley/xslt/homepage.xsl">homepage.xsl</a> (View | Page Source)
	   </small>
		</p>
	</body>
</html>
