<?xml version="1.0"?>

<xs:schema
targetNamespace="http://www.ruleml.org/0.91/xsd"
xmlns:xs="http://www.w3.org/2001/XMLSchema"
xmlns="http://www.ruleml.org/0.91/xsd"
>

	<!--
		*** Reaction ***
		A reaction rule.

		See http://www.ruleml.org/ ??

		content model:

		
	
		|
		(
			(
			   event,
			   (
			     ( body, (action)?, (postcondition)?, (alternative)? )
			     |
			     ( action, (postcondition)?, (alternative)? )
			   )?
			)
			| ( body, action, (postcondition)?, (alternative)? )
			| ( action, (postcondition)?, (alternative)? )
		)
		
		Note that these role tags are positional.
		
		@@@ need to add in oid
	-->

	<xs:attributeGroup name="Reaction.attlist">
		<!-- remove for now
		<xs:attributeGroup ref="exec.attrib"/>
		<xs:attributeGroup ref="kind.attrib"/>
		<xs:attributeGroup ref="eval.attrib"/>
		-->
	</xs:attributeGroup>
	<xs:group name="Reaction.content">
		<!--
			The following would take care of the unary, binary, etc. role-skipped cases listed above:
			
			( (body.content)?, action.content )
			|
			( event.content, body.content, action.content, (postcondition.content)? )
			|
			( event.content, body.content, action.content, postcondition.content, (alternative.content)? )
			
			However, this is very non-deterministic, since there are overlapping elements in the content model
			of each tag (e.g. <Atom>). If the content models of event, body, action, postcondition and alternative
			were all identical, this would be much easier.
			
			It seems the best we can do while avoiding non-determinism is the following:
			
			( event.content, body.content, action.content, ( postcondition.content, (alternative.content)? )? )
			
			With this solution, you could use the compact (role-skipped) syntax for only the ternary (probably
			the most common), quaternary and quinary cases, as follows:
			
			<Reaction>
				<Atom>...</Atom>
				<Atom>...</Atom>
				<Atom>...</Atom>
			</Reaction>
			which would be equivalent to:
			<Reaction>
				<event><Atom>...</Atom></event>
				<body><Atom>...</Atom></body>
				<action><Atom>...</Atom></action>
			</Reaction>
			
			and
			
			<Reaction>
				<Atom>...</Atom>
				<Atom>...</Atom>
				<Atom>...</Atom>
				<Atom>...</Atom>
			</Reaction>
			which would be equivalent to:
			<Reaction>
				<event><Atom>...</Atom></event>
				<body><Atom>...</Atom></body>
				<action><Atom>...</Atom></action>
				<postcondition><Atom>...</Atom></postcondition>
			</Reaction>
			
			and
			
			<Reaction>
				<Atom>...</Atom>
				<Atom>...</Atom>
				<Atom>...</Atom>
				<Atom>...</Atom>
				<Atom>...</Atom>
			</Reaction>
			which would be equivalent to:
			<Reaction>
				<event><Atom>...</Atom></event>
				<body><Atom>...</Atom></body>
				<action><Atom>...</Atom></action>
				<postcondition><Atom>...</Atom></postcondition>
				<alternative><Atom>...</Atom></alternative>
			</Reaction>
			
			However, this would cause the following to be invalid:
			
			<Reaction>
				<Atom>...</Atom>
			</Reaction>

			<Reaction>
				<Atom>...</Atom>
				<Atom>...</Atom>
			</Reaction>
			
			To specify these (exceptional) cases, the user would have to give the roles:
			
			<Reaction>
				<action><Atom>...</Atom></action>
			</Reaction>

			<Reaction>
				<body><Atom>...</Atom></body>
				<action><Atom>...</Atom></action>
			</Reaction>
			(other binary cases are possible, of course, e.g. <event>,<body>)
			
			This is implemented non-deterministically below.
		-->
		<xs:sequence>
			<!-- remove for now
			<xs:element ref="oid" minOccurs="0"/>
			-->
			<xs:choice>
				<xs:sequence>
				<!--
					event.content, body.content, action.content,
					(
						postcondition.content, (alternative.content)?
					)?
				-->
					<xs:group ref="event.content"/>
					<xs:group ref="body.content"/>
					<xs:group ref="action.content"/>
					<xs:sequence minOccurs="0">
						<xs:group ref="postcondition.content"/>
						<xs:group ref="alternative.content" minOccurs="0"/>
					</xs:sequence>
				</xs:sequence>			
				<xs:sequence>
				<!--
					   event,
					   (
					     ( body, (action)?, (postcondition)?, (alternative)? )
					     |
					     ( action, (postcondition)?, (alternative)? )
					   )?
				-->
					<xs:element ref="event"/>
					<xs:choice minOccurs="0">
						<xs:sequence>
							<xs:element ref="body"/>
							<xs:element ref="action" minOccurs="0"/>
							<xs:element ref="postcondition" minOccurs="0"/>
							<xs:element ref="alternative" minOccurs="0"/>
						</xs:sequence>
						<xs:sequence>
							<xs:element ref="action"/>
							<xs:element ref="postcondition" minOccurs="0"/>
							<xs:element ref="alternative" minOccurs="0"/>
						</xs:sequence>	
					</xs:choice>
				</xs:sequence>
				<xs:sequence> <!-- (  body, action, (postcondition)?, (alternative)? ) -->
					<xs:element ref="body"/>
					<xs:element ref="action"/>
					<xs:element ref="postcondition" minOccurs="0"/>
					<xs:element ref="alternative" minOccurs="0"/>
				</xs:sequence>
				<xs:sequence> <!-- ( action, (postcondition)?, (alternative)? ) -->
					<xs:element ref="action"/>
					<xs:element ref="postcondition" minOccurs="0"/>
					<xs:element ref="alternative" minOccurs="0"/>
				</xs:sequence>				
			</xs:choice>
		</xs:sequence>
		<!--
			creating choices for role-skipping at each level becomes non-deterministic
			because of big disjunction at first...
			
		<xs:sequence>
			<xs:choice>
				<xs:sequence>
					<xs:choice>
						<xs:element ref="event"/>
						<xs:group ref="event.content"/>
					</xs:choice>
					<xs:choice minOccurs="0">
						<xs:sequence>
							<xs:choice>
								<xs:element ref="body"/>
								<xs:group ref="body.content"/>
							</xs:choice>
							<xs:choice minOccurs="0">
								<xs:element ref="action"/>
								<xs:group ref="action.content"/>
							</xs:choice>
							<xs:choice minOccurs="0">
								<xs:element ref="postcondition"/>
								<xs:group ref="postcondition.content"/>
							</xs:choice>
							<xs:choice minOccurs="0">
								<xs:element	ref="alternative"/>
								<xs:group ref="alternative.content"/>
							</xs:choice>
						</xs:sequence>
						<xs:sequence>
							<xs:choice>
								<xs:element ref="action"/>
								<xs:group ref="action.content"/>
							</xs:choice>
							<xs:choice minOccurs="0">
								<xs:element ref="postcondition"/>
								<xs:group ref="postcondition.content"/>
							</xs:choice>
							<xs:choice minOccurs="0">
								<xs:element ref="alternative"/>
								<xs:group ref="alternative.content"/>
							</xs:choice>
						</xs:sequence>	
					</xs:choice>
				</xs:sequence>
				<xs:sequence> 
					<xs:choice>
						<xs:element ref="body"/>
						<xs:group ref="body.content"/>
					</xs:choice>
					<xs:choice>
						<xs:element ref="action"/>
						<xs:group ref="action.content"/>
					</xs:choice>
					<xs:choice minOccurs="0">
						<xs:element ref="postcondition"/>
						<xs:group ref="postcondition.content"/>
					</xs:choice>
					<xs:choice minOccurs="0">
						<xs:element ref="alternative"/>
						<xs:group ref="alternative.content"/>
					</xs:choice>
				</xs:sequence>
				<xs:sequence> 
					<xs:choice>
						<xs:element ref="action"/>
						<xs:group ref="action.content"/>
					</xs:choice>
					<xs:choice minOccurs="0">
						<xs:element ref="postcondition"/>
						<xs:group ref="postcondition.content"/>
					</xs:choice>
					<xs:choice minOccurs="0">
						<xs:element ref="alternative"/>
						<xs:group ref="alternative.content"/>
					</xs:choice>
				</xs:sequence>				
			</xs:choice>
		</xs:sequence>
		-->
	</xs:group>
	<xs:complexType name="Reaction.type">
		<xs:group ref="Reaction.content"/>
		<xs:attributeGroup ref="Reaction.attlist"/>
	</xs:complexType>
	<xs:element name="Reaction" type="Reaction.type"/>

	<!--
		*** event ***
	-->
	<xs:attributeGroup name="event.attlist">
	</xs:attributeGroup>
	<xs:group name="event.content">
		<xs:choice>
			<xs:element ref="Atom"/>
			<xs:element ref="Reaction"/>
			<!--  etc. -->
		</xs:choice>
	</xs:group>
	<xs:complexType name="event.type">
		<xs:group ref="event.content"/>
		<xs:attributeGroup ref="event.attlist"/>
	</xs:complexType>
	<xs:element name="event" type="event.type"/>
	
	<!--
		*** action ***
	-->
	<xs:attributeGroup name="action.attlist">
	</xs:attributeGroup>
	<xs:group name="action.content">
		<xs:choice>
			<xs:element ref="Atom"/>
			<xs:element ref="Assert"/>
			<!--  etc. -->
		</xs:choice>
	</xs:group>
	<xs:complexType name="action.type">
		<xs:group ref="action.content"/>
		<xs:attributeGroup ref="action.attlist"/>
	</xs:complexType>
	<xs:element name="action" type="action.type"/>
	
	<!--
		*** postcondition ***
	-->
	<xs:attributeGroup name="postcondition.attlist">
	</xs:attributeGroup>
	<xs:group name="postcondition.content">
		<xs:choice>
			<xs:element ref="Atom"/>
			<!--  etc. -->
		</xs:choice>
	</xs:group>
	<xs:complexType name="postcondition.type">
		<xs:group ref="postcondition.content"/>
		<xs:attributeGroup ref="postcondition.attlist"/>
	</xs:complexType>
	<xs:element name="postcondition" type="postcondition.type"/>
	
	<!--
		*** alternative ***
	-->
	<xs:attributeGroup name="alternative.attlist">
	</xs:attributeGroup>
	<xs:group name="alternative.content">
		<xs:choice>
			<xs:element ref="Atom"/>
			<!--  etc. -->
		</xs:choice>
	</xs:group>
	<xs:complexType name="alternative.type">
		<xs:group ref="alternative.content"/>
		<xs:attributeGroup ref="alternative.attlist"/>
	</xs:complexType>
	<xs:element name="alternative" type="alternative.type"/>
	
	
	
	<!-- include this (simplified) Derivation RuleML stuff for now instead of referencing from another module -->
	
	<xs:attributeGroup name="body.attlist">
	</xs:attributeGroup>
	<xs:group name="body.content">
		<xs:choice>
			<xs:element ref="Atom"/>
			<!--  etc. -->
		</xs:choice>
	</xs:group>
	<xs:complexType name="body.type">
		<xs:group ref="body.content"/>
		<xs:attributeGroup ref="body.attlist"/>
	</xs:complexType>
	<xs:element name="body" type="body.type"/>
	
	
	<xs:attributeGroup name="Atom.attlist">
	</xs:attributeGroup>
	<xs:group name="Atom.content">
		<xs:sequence/>
	</xs:group>
	<xs:complexType name="Atom.type" mixed="true">
		<xs:group ref="Atom.content"/>
		<xs:attributeGroup ref="Atom.attlist"/>
	</xs:complexType>
	<xs:element name="Atom" type="Atom.type"/>
	
	<xs:attributeGroup name="RuleML.attlist"/>
	<xs:group name="RuleML.content">
		<xs:sequence>
			<!-- remove for now
			<xs:element ref="oid" minOccurs="0"/>
			-->
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="Assert"/>
				<!-- remove for now
				<xs:element ref="Retract"/>
				<xs:element ref="Query"/>
				-->
			</xs:choice>
		</xs:sequence>		
	</xs:group>
	<xs:complexType name="RuleML.type">
		<xs:group ref="RuleML.content"/>
		<xs:attributeGroup ref="RuleML.attlist"/>
	</xs:complexType>
	<xs:element name="RuleML" type="RuleML.type"/>
	
	<xs:attributeGroup name="Assert.attlist">
	</xs:attributeGroup>	
	<xs:group name="Assert.content">
		<xs:sequence>
			<xs:choice maxOccurs="unbounded">
				<xs:element ref="Reaction"/>
				<xs:element ref="Atom"/>
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Assert.type">
		<xs:group ref="Assert.content"/>
		<xs:attributeGroup ref="Assert.attlist"/>
	</xs:complexType>
	<xs:element name="Assert" type="Assert.type"/>

</xs:schema>