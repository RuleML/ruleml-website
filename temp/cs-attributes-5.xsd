<?xml version="1.0"?>

<xs:schema 
targetNamespace="http://www.ruleml.org/0.91/xsd"
xmlns="http://www.ruleml.org/0.91/xsd"
xmlns:xs="http://www.w3.org/2001/XMLSchema"
elementFormDefault="qualified"
>
	<!-- based on 2006-08-02 meeting with Harold -->

	<!--
	because of inability to skip head/body within Implies, freeze
	this version and create cs-attributes-6.xsd to experiment with Equals vs. DoubleEquals
	-->

	<!--
		*** RuleML ***
		The n-ary top-level of a RuleML document.
		
		See http://www.ruleml.org/0.91/glossary/#gloss-RuleML

		content model:
		( oid?, (Assert | Query | Protect)* )
	-->
	<xs:attributeGroup name="RuleML.attlist"/>
	<xs:group name="RuleML.content">
		<xs:sequence>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="Assert"/>
			</xs:choice>
		</xs:sequence>		
	</xs:group>
	<xs:complexType name="RuleML.type">
		<xs:group ref="RuleML.content"/>
		<xs:attributeGroup ref="RuleML.attlist"/>
	</xs:complexType>
	<xs:element name="RuleML" type="RuleML.type"/>

	<!--
		*** Assert ***
		A KQML-like performative acting as a wrapper specifying that its content is
		asserted, making an 'implicit <And>' assumption.

		See http://www.ruleml.org/0.91/glossary/#gloss-Assert 

		content model:
		( oid?, (formula | Atom | Implies | Equivalent | Forall)* )
	-->
	<xs:attributeGroup name="Assert.attlist">
	</xs:attributeGroup>	
	<xs:group name="Assert.content">
		<xs:sequence>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="Implies"/>
				<xs:element ref="Equivalent"/>
				<xs:element name="Equal" type="Equal-defining.type"/>
			</xs:choice>	
		</xs:sequence>			
	</xs:group>
	<xs:complexType name="Assert.type">
		<xs:group ref="Assert.content"/>
		<xs:attributeGroup ref="Assert.attlist"/>
	</xs:complexType>
	<xs:element name="Assert" type="Assert.type"/>
	
	
	<!--
		*** Implies ***
		An implication rule.

		See http://www.ruleml.org/0.91/glossary/#gloss-Implies

		content model:
		( oid?, (head, body) | (body, head) | ( (Atom | And | Or), Atom ) )
	-->
	<xs:attributeGroup name="Implies.attlist">
	</xs:attributeGroup>
	<xs:group name="Implies.content">
		<xs:sequence>
			<!-- @@@ <xs:element ref="oid" minOccurs="0"/> -->
			<xs:choice>
				<xs:sequence>
					<xs:element ref="head"/>
					<xs:element ref="body"/>
				</xs:sequence>
				<xs:sequence>
					<xs:element ref="body"/> 
					<xs:element ref="head"/> 
				</xs:sequence>
				
				<!-- role skipped versions -->
				<!--
				<xs:sequence>
					<xs:group ref="body.content"/>
					<xs:group ref="head.content"/>
				</xs:sequence>
				-->
<!-- 
  <schemaError char="2" line="121" phase="instance"
               resource="http://www.ruleml.org/temp/cs-attributes-5.xsd">illegal
 redeclaration of {http://www.ruleml.org/0.91/xsd}:Equal</schemaError>
 -->
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Implies.type">
		<xs:group ref="Implies.content"/>
		<xs:attributeGroup ref="Implies.attlist"/>
	</xs:complexType>
	<xs:element name="Implies" type="Implies.type"/>
	
	
	<!-- 
		*** body ***
		The body of an implication rule containing the premise(s),
		also known as the "antecedent" or "if" part of the rule.

		See http://www.ruleml.org/0.91/glossary/#gloss-body

		content model: (Atom | And | Or)
	-->
	<xs:attributeGroup name="body.attlist"/>
	<xs:group name="body.content">
		<xs:choice>
		<!--
			<xs:element name="Atom" type="Atom.type"/>
			<xs:element name="And" type="And-inner.type"/>
			<xs:element name="Or" type="Or-inner.type"/>
		-->
			<xs:element name="Equal" type="Equal-testing.type"/> <!-- added in hornlogeq -->
		</xs:choice>
	</xs:group>
	<xs:complexType name="body.type">
		<xs:group ref="body.content"/>
		<xs:attributeGroup ref="body.attlist"/>
	</xs:complexType>
	<xs:element name="body" type="body.type"/>
	
	<!--
		*** head ***
		The head of an implication rule containing the conclusion,
		also known as the "consequent" or "then" part of the rule.

		See http://www.ruleml.org/0.91/glossary/#gloss-head

		content model: (Atom)
	-->
	<xs:attributeGroup name="head.attlist"/>
	<xs:group name="head.content">
		<xs:choice>
		<!--
			<xs:element name="Atom" type="Atom.type"/>
		-->
			<xs:element name="Equal" type="Equal-defining.type"/> <!-- added in hornlogeq -->
		</xs:choice>
	</xs:group>
	<xs:complexType name="head.type">
		<xs:group ref="head.content"/>
		<xs:attributeGroup ref="head.attlist"/>
	</xs:complexType>
	<xs:element name="head" type="head.type"/>


	<xs:attributeGroup name="Equal.attlist"/>
	<xs:group name="Equal-testing.content">
		<xs:sequence>
			<xs:choice>
				<xs:element ref="lhs"/>
				<xs:group ref="lhs.content"/> <!-- role skipped -->
			</xs:choice>
			<xs:choice>
				<xs:element ref="rhs"/>
				<xs:group ref="rhs.content"/> <!-- role skipped -->
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:group name="Equal-defining.content">
		<xs:sequence>
			<xs:choice>
				<xs:element name="lhs" type="lhs-interpreted.type"/>
				<!-- role skipped -->
				<!--
				<xs:group ref="lhs-interpreted.content"/> 
				-->
			</xs:choice>
			<xs:choice>
				<xs:element ref="rhs"/>
				<!-- role skipped -->
				<!--
				<xs:group ref="rhs.content"/> 
				-->
			</xs:choice>
		</xs:sequence>
<!--
  <schemaError char="5" line="210" phase="instance"
               resource="http://www.ruleml.org/temp/cs-attributes-5.xsd">illegal
 redeclaration of {http://www.ruleml.org/0.91/xsd}:Expr</schemaError>
 -->
	</xs:group>
	<xs:complexType name="Equal-testing.type">
		<xs:group ref="Equal-testing.content"/>
		<xs:attributeGroup ref="Equal.attlist"/>
	</xs:complexType>
	<xs:complexType name="Equal-defining.type">
		<xs:group ref="Equal-defining.content"/>
		<xs:attributeGroup ref="Equal.attlist"/>
	</xs:complexType>
	<xs:element name="Equal" type="Equal-testing.type"/>
	
	
	<xs:attributeGroup name="lhs.attlist"/>
	<xs:group name="lhs.content">
		<xs:sequence>
			<xs:choice>
				<xs:element ref="Expr"/>
				<xs:element ref="Ind"/>
				<xs:element ref="Data"/>
				<!-- other terms omitted -->
			</xs:choice>			
		</xs:sequence>
	</xs:group>
	<xs:group name="lhs-interpreted.content">
		<xs:sequence>
			<xs:choice>
				<xs:element name="Expr" type="Expr-interpreted.type"/>
				<xs:element ref="Ind"/>
				<xs:element ref="Data"/>
				<!-- other terms omitted -->
			</xs:choice>			
		</xs:sequence>
	</xs:group>
	<xs:complexType name="lhs.type">
		<xs:group ref="lhs.content"/>
		<xs:attributeGroup ref="lhs.attlist"/>
	</xs:complexType>
	<xs:complexType name="lhs-interpreted.type">
		<xs:group ref="lhs-interpreted.content"/>
		<xs:attributeGroup ref="lhs.attlist"/>
	</xs:complexType>
	<xs:element name="lhs" type="lhs.type"/>
	
	<xs:attributeGroup name="rhs.attlist"/>
	<xs:group name="rhs.content">
		<xs:sequence>
			<xs:choice>
				<xs:element ref="Expr"/>
				<xs:element ref="Ind"/>
				<xs:element ref="Data"/>
				<!-- other terms omitted -->
			</xs:choice>			
		</xs:sequence>
	</xs:group>
	<xs:complexType name="rhs.type">
		<xs:group ref="rhs.content"/>
		<xs:attributeGroup ref="rhs.attlist"/>
	</xs:complexType>
	<xs:element name="rhs" type="rhs.type"/>
	

	<xs:attributeGroup name="Expr.attlist"/>
	<xs:group name="Expr.content">
		<xs:sequence>
			<xs:element ref="Fun"/>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="Expr"/>
				<xs:element ref="Ind"/>
				<xs:element ref="Data"/>
				<!-- other terms omitted -->
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:group name="Expr-interpreted.content">
		<xs:sequence>
			<xs:element name="Fun" type="Fun-interpreted.type"/>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="Expr"/>
				<xs:element ref="Ind"/>
				<xs:element ref="Data"/>
				<!-- other terms omitted -->
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Expr.type">
		<xs:group ref="Expr.content"/>
		<xs:attributeGroup ref="Expr.attlist"/>
	</xs:complexType>
	<!-- used in Equal-defining -->
	<xs:complexType name="Expr-interpreted.type">
		<xs:group ref="Expr-interpreted.content"/>
		<xs:attributeGroup ref="Expr.attlist"/>
	</xs:complexType>
	<xs:element name="Expr" type="Expr.type"/>
	
	
	<xs:attributeGroup name="Fun-interpreted.attlist">
		<xs:attributeGroup ref="in-interpreted.attrib"/>
	</xs:attributeGroup>	
	<xs:attributeGroup name="Fun.attlist">
		<xs:attributeGroup ref="in.attrib"/>
	</xs:attributeGroup>
	<xs:group name="Fun.content">
            <xs:sequence/>
      </xs:group>
	<xs:complexType name="Fun-interpreted.type" mixed="true">
		<xs:group ref="Fun.content"/>
		<xs:attributeGroup ref="Fun-interpreted.attlist"/>
	</xs:complexType>	
	<xs:complexType name="Fun.type" mixed="true">
		<xs:group ref="Fun.content"/>
		<xs:attributeGroup ref="Fun.attlist"/>
	</xs:complexType>
	<xs:element name="Fun" type="Fun.type"/>
	
	
	<xs:attributeGroup name="in-interpreted.attrib">
		<xs:attribute name="in" use="required" fixed="yes"> 
		<!--
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="yes"/>
				</xs:restriction>
			</xs:simpleType>
		-->
		</xs:attribute>
	</xs:attributeGroup>		
	<xs:attributeGroup name="in.attrib">
		<xs:attribute name="in" use="optional" default="semi">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="semi"/>				
					<xs:enumeration value="yes"/>
					<xs:enumeration value="no"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>

	<!-- ############################################################# -->
	
	<!--
		*** Equivalent ***
		An equivalence expression, which is "syntactic sugar" for a pair
		of conjoined converse implication rules.
		
		See http://www.ruleml.org/0.91/glossary/#gloss-Equivalent

		content model: ( oid?, ((torso, torso) | (Atom, Atom)) )
	-->
	<xs:attributeGroup name="Equivalent.attlist">
		<!--<xs:attributeGroup ref="closure.attrib"/>-->
	</xs:attributeGroup>
	<xs:group name="Equivalent.content">
		<xs:sequence>
			<!--<xs:element ref="oid" minOccurs="0"/>-->
			<xs:choice>
				<xs:element ref="torso" minOccurs="2" maxOccurs="2"/>
				<xs:group ref="torso.content" minOccurs="2" maxOccurs="2"/>
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Equivalent.type">
		<xs:group ref="Equivalent.content"/>
		<xs:attributeGroup ref="Equivalent.attlist"/>
	</xs:complexType>
	<xs:element name="Equivalent" type="Equivalent.type"/>
	
	<!--
		*** torso ***
		A symmetric role used in an equivalence expression combining
		the asymmetric <head> and <body>.

		See http://www.ruleml.org/0.91/glossary/#gloss-torso

		content model: (Atom)
	-->
	<xs:attributeGroup name="torso.attlist"/>
	<xs:group name="torso.content">
		<xs:choice>
			<!--<xs:element name="Atom" type="Atom.type"/>-->
			<xs:element ref="Ind"/>
			<!-- for 0.91, no special restrictions on equations within Equivalent -->
			<!-- (i.e. using the more tolerant Equal-testing -->
			<xs:element name="Equal" type="Equal-testing.type"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="torso.type">
		<xs:group ref="torso.content"/>
		<xs:attributeGroup ref="torso.attlist"/>
	</xs:complexType>
	<xs:element name="torso" type="torso.type"/>
	
	<!-- ############################################################# -->
	
	<!--
		*** Ind ***
		An individual constant, as in predicate logic, which can also be considered to
		be a fixed argument like RDF resources.

		See http://www.ruleml.org/0.91/glossary/#gloss-Ind
		
		content model: (#PCDATA)
	-->
       <xs:attributeGroup name="Ind.attlist">
       </xs:attributeGroup>
	<xs:group name="Ind.content">
		<xs:sequence/>
	</xs:group>	
	<xs:complexType name="Ind.type" mixed="true">
		<xs:group ref="Ind.content"/>
		<xs:attributeGroup ref="Ind.attlist"/>
	</xs:complexType>
	<xs:element name="Ind" type="Ind.type"/>

	<!--
		*** Data ***
		A fixed argument like RDF literals.  It may be optionally associated with an XML Schema
		built-in datatype (see http://www.w3.org/TR/xmlschema-2/#built-in-datatypes) using the
		xsi:type attribute.

		See http://www.ruleml.org/0.91/glossary/#gloss-Data
		
		content model: (#PCDATA) [optionally datatyped]
	-->
	<xs:element name="Data" type="xs:anySimpleType"/>
	
	
</xs:schema>