<?xml version="1.0"?>

<xs:schema 
targetNamespace="http://www.ruleml.org/0.91/xsd"
xmlns="http://www.ruleml.org/0.91/xsd"
xmlns:xs="http://www.w3.org/2001/XMLSchema"
elementFormDefault="qualified"
>


	<!--
		*** RuleML ***
		The n-ary top-level of a RuleML document.
		
		See http://www.ruleml.org/0.91/glossary/#gloss-RuleML

		content model:
		( oid?, (Assert | Query | Protect)* )
	-->
	<xs:attributeGroup name="RuleML.attlist"/>
	<xs:group name="RuleML.content">
		<xs:sequence>
			<!-- @@@ <xs:element ref="oid" minOccurs="0"/> -->
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="Assert"/>		
				<xs:element ref="Query"/>
				<!-- @@@ <xs:element ref="Protect"/> -->
			</xs:choice>
		</xs:sequence>		
	</xs:group>
	<xs:complexType name="RuleML.type">
		<xs:group ref="RuleML.content"/>
		<xs:attributeGroup ref="RuleML.attlist"/>
	</xs:complexType>
	<xs:element name="RuleML" type="RuleML.type"/>
	

	<xs:attributeGroup name="Equal.attlist"/>
	<!--
	<xs:group name="Equal.content">
		<xs:sequence>
			<!- @@@ <xs:element ref="oid" minOccurs="0"/> ->
			<xs:choice>
				<!- skip both ->
				<xs:sequence minOccurs="2" maxOccurs="2">
					<xs:group ref="lhs.content"/>
				</xs:sequence>
				<!- skip rhs or neither ->
				<xs:sequence>
					<xs:element ref="lhs"/>
					<xs:choice>
						<xs:element ref="rhs"/>
						<xs:group ref="rhs.content"/>
					</xs:choice>
				</xs:sequence>
				<!- skip lhs or neither ->
				<xs:sequence>
					<xs:element ref="rhs"/>
					<xs:choice>
						<xs:element ref="lhs"/>
						<xs:group ref="lhs.content"/>
					</xs:choice>
				</xs:sequence>
			</xs:choice>
		</xs:sequence>
	</xs:group>
	-->
	<xs:group name="Equal.content">
		<xs:sequence>
			<xs:element ref="lhs"/>
			<xs:element ref="rhs"/>
		</xs:sequence>
	</xs:group>
	<xs:group name="Equal-testing.content">
		<xs:sequence>
			<!-- enforce "only passive within passive" constraint -->
			<xs:element name="lhs" type="lhs-testing.type"/>
			<xs:element name="rhs" type="rhs-testing.type"/>
		</xs:sequence>
	</xs:group>
	<xs:group name="Equal-defining.content">
		<xs:sequence>
			<!-- no extra restrictions for now @@@ -->
			<xs:element ref="lhs"/>
			<xs:element ref="rhs"/>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Equal.type">
		<xs:group ref="Equal.content"/>
		<xs:attributeGroup ref="Equal.attlist"/>
	</xs:complexType>
	<!-- in body of an Implies or under Query -->
	<xs:complexType name="Equal-testing.type">
		<xs:group ref="Equal-testing.content"/>
		<xs:attributeGroup ref="Equal.attlist"/>
	</xs:complexType>
	<!-- in head of an Implies or under Assert -->
	<xs:complexType name="Equal-defining.type">
		<xs:group ref="Equal-defining.content"/>
		<xs:attributeGroup ref="Equal.attlist"/>
	</xs:complexType>
	<!--<xs:element name="Equal" type="Equal.type"/>-->

	
	<xs:attributeGroup name="lhs.attlist"/>
	<xs:group name="lhs.content">
		<xs:sequence>
			<xs:choice>
				<xs:element name="Expr" type="Expr-either.type"/>
				<xs:element ref="Ind"/>
				<xs:element ref="Data"/>
				<!-- other terms omitted -->
			</xs:choice>			
		</xs:sequence>
	</xs:group>
	<xs:group name="lhs-testing.content">
		<xs:sequence>
			<xs:choice>
				<xs:element name="Expr" type="Expr-testing.type"/>
				<xs:element ref="Ind"/>
				<xs:element ref="Data"/>
				<!-- other terms omitted -->
			</xs:choice>			
		</xs:sequence>
	</xs:group>
	<xs:group name="lhs-defining.content">
		<xs:sequence>
			<xs:choice>
				<xs:element name="Expr" type="Expr-defining.type"/>
				<xs:element ref="Ind"/>
				<xs:element ref="Data"/>
				<!-- other terms omitted -->
			</xs:choice>			
		</xs:sequence>
	</xs:group>
	<xs:complexType name="lhs.type">
		<xs:group ref="lhs.content"/>
		<xs:attributeGroup ref="lhs.attlist"/>
	</xs:complexType>
	<xs:complexType name="lhs-testing.type">
		<xs:group ref="lhs-testing.content"/>
		<xs:attributeGroup ref="lhs.attlist"/>
	</xs:complexType>
	<xs:complexType name="lhs-defining.type">
		<xs:group ref="lhs-defining.content"/>
		<xs:attributeGroup ref="lhs.attlist"/>
	</xs:complexType>
	<xs:element name="lhs" type="lhs.type"/>

	
	<xs:attributeGroup name="rhs.attlist"/>
	<xs:group name="rhs.content">
		<xs:sequence>
			<xs:choice>
				<xs:element name="Expr" type="Expr-either.type"/>
				<xs:element ref="Ind"/>
				<xs:element ref="Data"/>
				<!-- other terms omitted -->
			</xs:choice>			
		</xs:sequence>
	</xs:group>
	<xs:group name="rhs-testing.content">
		<xs:sequence>
			<xs:choice>
				<xs:element name="Expr" type="Expr-testing.type"/>
				<xs:element ref="Ind"/>
				<xs:element ref="Data"/>
				<!-- other terms omitted -->
			</xs:choice>			
		</xs:sequence>
	</xs:group>
	<xs:group name="rhs-defining.content">
		<xs:sequence>
			<xs:choice>
				<xs:element name="Expr" type="Expr-defining.type"/>
				<xs:element ref="Ind"/>
				<xs:element ref="Data"/>
				<!-- other terms omitted -->
			</xs:choice>			
		</xs:sequence>
	</xs:group>
	<xs:complexType name="rhs.type">
		<xs:group ref="rhs.content"/>
		<xs:attributeGroup ref="rhs.attlist"/>
	</xs:complexType>
	<xs:complexType name="rhs-testing.type">
		<xs:group ref="rhs-testing.content"/>
		<xs:attributeGroup ref="rhs.attlist"/>
	</xs:complexType>
	<xs:complexType name="rhs-defining.type">
		<xs:group ref="rhs-defining.content"/>
		<xs:attributeGroup ref="rhs.attlist"/>
	</xs:complexType>
	<xs:element name="rhs" type="rhs.type"/>

	
	<xs:attributeGroup name="Expr.attlist"/>
	<xs:group name="Expr-either.content">
		<xs:sequence>
			<xs:element name="Fun" type="Fun-either.type"/>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="Expr" type="Expr-either.type"/>
				<xs:element ref="Ind"/>
				<xs:element ref="Data"/>
				<!-- other terms omitted -->
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:group name="Expr-testing.content">
		<xs:sequence>
			<xs:choice>
				<xs:sequence>
					<xs:element name="Fun" type="Fun-interpreted.type"/>
					<xs:choice minOccurs="0" maxOccurs="unbounded">
						<xs:element name="Expr" type="Expr-testing.type"/>				
						<xs:element ref="Ind"/>
						<xs:element ref="Data"/>
						<!-- other terms omitted -->
					</xs:choice>
				</xs:sequence>
				<xs:sequence>
					<xs:element name="Fun" type="Fun-uninterpreted.type"/>
					<xs:choice minOccurs="0" maxOccurs="unbounded">
						<xs:element name="Expr" type="Expr-testing-passive.type"/>				
						<xs:element ref="Ind"/>
						<xs:element ref="Data"/>
						<!-- other terms omitted -->
					</xs:choice>
				</xs:sequence>
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:group name="Expr-testing-passive.content">
		<xs:sequence>
			<xs:element name="Fun" type="Fun-uninterpreted.type"/>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="Expr" type="Expr-testing-passive.type"/>
				<xs:element ref="Ind"/>
				<xs:element ref="Data"/>
				<!-- other terms omitted -->
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:group name="Expr-defining.content">
		<!-- no extra restrictions for now @@@ -->
		<xs:sequence>
			<xs:element name="Fun" type="Fun-either.type"/>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="Expr" type="Expr-either.type"/>
				<xs:element ref="Ind"/>
				<xs:element ref="Data"/>
				<!-- other terms omitted -->
			</xs:choice>
		</xs:sequence>
	</xs:group>	
	<xs:complexType name="Expr-defining.type">
		<xs:group ref="Expr-defining.content"/>
		<xs:attributeGroup ref="Expr.attlist"/>
	</xs:complexType>	
	<xs:complexType name="Expr-testing.type">
		<xs:group ref="Expr-testing.content"/>
		<xs:attributeGroup ref="Expr.attlist"/>
	</xs:complexType>
	<xs:complexType name="Expr-testing-passive.type">
		<xs:group ref="Expr-testing-passive.content"/>
		<xs:attributeGroup ref="Expr.attlist"/>
	</xs:complexType>	
	<xs:complexType name="Expr-either.type">
		<xs:group ref="Expr-either.content"/>
		<xs:attributeGroup ref="Expr.attlist"/>
	</xs:complexType>
	<!--<xs:element name="Expr" type="Expr-either.type"/>-->
	
	<xs:attributeGroup name="Fun-uninterpreted.attlist">
		<xs:attributeGroup ref="in-uninterpreted.attrib"/>
	</xs:attributeGroup>		
	<xs:attributeGroup name="Fun-interpreted.attlist">
		<xs:attributeGroup ref="in-interpreted.attrib"/>
	</xs:attributeGroup>	
	<xs:attributeGroup name="Fun-either.attlist">
		<xs:attributeGroup ref="in.attrib"/>
	</xs:attributeGroup>
	<xs:group name="Fun.content">
            <xs:sequence/>
      </xs:group>
	<xs:complexType name="Fun-uninterpreted.type" mixed="true">
		<xs:group ref="Fun.content"/>
		<xs:attributeGroup ref="Fun-uninterpreted.attlist"/>
	</xs:complexType>		
	<xs:complexType name="Fun-interpreted.type" mixed="true">
		<xs:group ref="Fun.content"/>
		<xs:attributeGroup ref="Fun-interpreted.attlist"/>
	</xs:complexType>	
	<xs:complexType name="Fun-either.type" mixed="true">
		<xs:group ref="Fun.content"/>
		<xs:attributeGroup ref="Fun-either.attlist"/>
	</xs:complexType>
	<!--<xs:element name="Fun" type="Fun-either.type"/>-->
	
	
	<xs:attributeGroup name="in-uninterpreted.attrib">
		<xs:attribute name="in" use="optional" default="no"> 
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="no"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>		
	<xs:attributeGroup name="in-interpreted.attrib">
		<xs:attribute name="in" use="optional" default="yes"> 
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="yes"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>		
	<xs:attributeGroup name="in.attrib">
		<xs:attribute name="in" use="optional" default="semi">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="semi"/>				
					<xs:enumeration value="yes"/>
					<xs:enumeration value="no"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	
	<!-- ############################################################# -->



	<!--
		*** Assert ***
		A KQML-like performative acting as a wrapper specifying that its content is
		asserted, making an 'implicit <And>' assumption.

		See http://www.ruleml.org/0.91/glossary/#gloss-Assert 

		content model:
		( oid?, (formula | Atom | Implies | Equivalent | Forall)* )
	-->
	<xs:attributeGroup name="Assert.attlist">
		<!-- @@@ <xs:attributeGroup ref="mapDirection.attrib"/>
		<xs:attributeGroup ref="mapClosure.attrib"/>
		<xs:attributeGroup ref="mapMaterial.attrib"/> -->
	</xs:attributeGroup>	
	<xs:group name="Assert.content">
		<xs:sequence>
			<!-- @@@ <xs:element ref="oid" minOccurs="0"/> -->
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="formula" type="formula-assert.type"/>
				<xs:group ref="formula-assert.content"/>
			</xs:choice>	
		</xs:sequence>			
	</xs:group>
	<xs:complexType name="Assert.type">
		<xs:group ref="Assert.content"/>
		<xs:attributeGroup ref="Assert.attlist"/>
	</xs:complexType>
	<xs:element name="Assert" type="Assert.type"/>
	
	<!--
		*** Query ***
		A KQML-like performative acting as a wrapper specifying that its content is
		queried, making an 'implicit <And>' assumption.
		
		See http://www.ruleml.org/0.91/glossary/#gloss-Query 

		content model:
		( oid?, (formula | Atom | And | Or | Exists)* )
	-->
	<xs:attributeGroup name="Query.attlist">
		<!-- @@@ <xs:attributeGroup ref="closure.attrib"/> -->
	</xs:attributeGroup>	
	<xs:group name="Query.content">
		<xs:sequence>
			<!-- @@@ <xs:element ref="oid" minOccurs="0"/> -->
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="formula" type="formula-query.type"/>		
				<xs:group ref="formula-query.content"/>
			</xs:choice>	
		</xs:sequence>	
	</xs:group>
	<xs:complexType name="Query.type">
		<xs:group ref="Query.content"/>
		<xs:attributeGroup ref="Query.attlist"/>
	</xs:complexType>
	<xs:element name="Query" type="Query.type"/>
	
	<!--
		*** formula ***
		The formula role of a performative (<Assert>, <Query> or <Protect>).

		See http://www.ruleml.org/0.91/glossary/#gloss-formula

		content model (below Assert): (Atom | Implies | Equivalent | Forall)
		content model (below Query): (Atom | And | Or | Exists)

		Other (context-sensitive) versions of <formula> are in the
		connective and quantifier modules.
	-->
	<!-- the (empty) attribute list is declared in the connective module -->
	<xs:group name="formula-assert.content">
		<xs:choice>
			<xs:element name="Atom" type="Atom.type"/>
			<xs:element ref="Implies"/>
			<!-- @@@ <xs:element ref="Equivalent"/> -->
			<!-- @@@ <xs:element ref="Forall"/> -->
			<xs:element name="Equal" type="Equal.type"/> <!-- added in hornlogeq -->
		</xs:choice>
	</xs:group>
	<xs:group name="formula-query.content">
		<xs:choice>
			<xs:element name="Atom" type="Atom.type"/>
			<xs:element name="And" type="And-query.type"/>
			<xs:element name="Or" type="Or-query.type"/>
			<!-- @@@ <xs:element ref="Exists"/> -->
			<xs:element name="Equal" type="Equal-testing.type"/> <!-- added in hornlogeq -->
		</xs:choice>
	</xs:group>
	<xs:complexType name="formula-assert.type">
		<xs:group ref="formula-assert.content"/>
		<xs:attributeGroup ref="formula.attlist"/>
	</xs:complexType>
	<xs:complexType name="formula-query.type">
		<xs:group ref="formula-query.content"/>
		<xs:attributeGroup ref="formula.attlist"/>
	</xs:complexType>
	
	<!-- ############################################################# -->

	<!--
        *** Atom ***
		A logical atom, i.e. an expression formed from a predicate
		applied to a collection of its (logical) arguments.

		See http://www.ruleml.org/0.91/glossary/#gloss-Atom
	
		content model (normally):
		( oid?, degree?, (op | Rel), (slot)*, (arg | Ind | Data | Skolem | Var | Reify)*, (slot)* )
		
		however, the above content model is non-deterministic, so it is (equivalently) restructured as follows:
		(
			oid?, degree?, (op | Rel), (slot)*,
			( (arg | Ind | Data | Skolem | Var | Reify)+, (slot)* )?
		)

		Another (context-sensitive) version of <Atom> is in the holog module.
		
		Note the 'positionalized' normal form where the oid and op roles
		are at the beginning of the atom.
	-->
	<xs:attributeGroup name="Atom.attlist">
		<!-- @@@ <xs:attributeGroup ref="closure.attrib"/> -->
	</xs:attributeGroup>
	<!-- necessary for redefinition to be binary in bindatalog -->
	<!-- and for redefinition to add rest variables in hornlog -->
	<xs:group name="Atom.extend.arg-repo">
		<xs:choice>
			<xs:group ref="Atom.extend.arg"/>
			<!-- (repo) added in hornlog -->
		</xs:choice>
	</xs:group>
	<xs:group name="Atom.extend.arg">
		<xs:sequence>
			<xs:choice maxOccurs="unbounded">
				<xs:element ref="arg"/>
				<xs:group ref="arg.content"/>
			</xs:choice>
			<!-- restricted to min=2 max=2 (i.e. binary) in bindatalog -->
			<!-- (repo?) added in hornlog -->
		</xs:sequence>
	</xs:group>
	<xs:group name="Atom.extend.slots">
		<xs:sequence>
			<xs:element name="slot" type="slot.type" minOccurs="0" maxOccurs="unbounded"/>
			<!-- (resl)? added in hornlog -->
		</xs:sequence>
	</xs:group>
	<xs:group name="Atom.content">
		<xs:sequence>
			<!-- @@@ <xs:element ref="oid" minOccurs="0"/> -->
			<!-- @@@ <xs:element ref="degree" minOccurs="0"/> -->
			<xs:choice>
				<xs:element name="op" type="op-atom.type"/>
				<xs:group ref="op-atom.content"/>
			</xs:choice>
			<xs:group ref="Atom.extend.slots"/>
			<xs:sequence minOccurs="0">
				<xs:group ref="Atom.extend.arg-repo"/>
				<xs:group ref="Atom.extend.slots"/>
			</xs:sequence>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Atom.type">
		<xs:group ref="Atom.content"/>
		<xs:attributeGroup ref="Atom.attlist"/>
	</xs:complexType>
	<xs:element name="Atom" type="Atom.type"/>
	
	<!--
		*** op ***
		An operator expression including the relation of an atom.
		
		See http://www.ruleml.org/0.91/glossary/#gloss-op

		content model (within Atom): (Rel)
		
		Other (context-sensitive) versions of <op> are in the expr and holog modules.
	-->
	<xs:attributeGroup name="op.attlist"/>
	<xs:group name="op-atom.content">
		<xs:sequence>
			<xs:element ref="Rel"/>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="op-atom.type">
		<xs:group ref="op-atom.content"/>
		<xs:attributeGroup ref="op.attlist"/>
	</xs:complexType>
	<xs:element name="op" type="op-atom.type"/>
	
	<!--
		*** Rel ***
		A relation, i.e. a logical predicate, of an atom.
		
		See http://www.ruleml.org/0.91/glossary/#gloss-Rel
		
		content model: (#PCDATA)
	-->
	<xs:attributeGroup name="Rel.attlist">
		<!-- @@@ <xs:attributeGroup ref="uri.attrib"/> -->
		<xs:attributeGroup ref="in.attrib"/>
	</xs:attributeGroup>
	<xs:group name="Rel.content">
		<xs:sequence/>
	</xs:group>
	<xs:complexType name="Rel.type" mixed="true">
		<xs:group ref="Rel.content"/>
		<xs:attributeGroup ref="Rel.attlist"/>
	</xs:complexType>
	<xs:element name="Rel" type="Rel.type"/>
	
	<!-- ############################################################# -->
	
	<!--
		*** Implies ***
		An implication rule.

		See http://www.ruleml.org/0.91/glossary/#gloss-Implies

		content model:
		( oid?, (head, body) | (body, head) | ( (Atom | And | Or), Atom ) )
	-->
	<xs:attributeGroup name="Implies.attlist">
		<!-- @@@ <xs:attributeGroup ref="closure.attrib"/>
		<xs:attributeGroup ref="direction.attrib"/>
		<xs:attributeGroup ref="material.attrib"/> -->
	</xs:attributeGroup>
	<xs:group name="Implies.content">
		<xs:sequence>
			<!-- @@@ <xs:element ref="oid" minOccurs="0"/> -->
			<xs:choice>
				<xs:sequence>
					<xs:element ref="head"/>
					<xs:element ref="body"/>
				</xs:sequence>
				<xs:sequence>
					<xs:element ref="body"/>
					<xs:element ref="head"/>
				</xs:sequence>
				<xs:sequence>
					<xs:group ref="body.content"/>
					<xs:group ref="head.content"/>
				</xs:sequence>
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Implies.type">
		<xs:group ref="Implies.content"/>
		<xs:attributeGroup ref="Implies.attlist"/>
	</xs:complexType>
	<xs:element name="Implies" type="Implies.type"/>
	
	<!-- 
		*** body ***
		The body of an implication rule containing the premise(s),
		also known as the "antecedent" or "if" part of the rule.

		See http://www.ruleml.org/0.91/glossary/#gloss-body

		content model: (Atom | And | Or)
	-->
	<xs:attributeGroup name="body.attlist"/>
	<xs:group name="body.content">
		<xs:choice>
			<xs:element name="Atom" type="Atom.type"/>
			<xs:element name="And" type="And-inner.type"/>
			<xs:element name="Or" type="Or-inner.type"/>
			<xs:element name="Equal" type="Equal-testing.type"/> <!-- added in hornlogeq -->
		</xs:choice>
	</xs:group>
	<xs:complexType name="body.type">
		<xs:group ref="body.content"/>
		<xs:attributeGroup ref="body.attlist"/>
	</xs:complexType>
	<xs:element name="body" type="body.type"/>
	
	<!--
		*** head ***
		The head of an implication rule containing the conclusion,
		also known as the "consequent" or "then" part of the rule.

		See http://www.ruleml.org/0.91/glossary/#gloss-head

		content model: (Atom)
	-->
	<xs:attributeGroup name="head.attlist"/>
	<xs:group name="head.content">
		<xs:choice>
			<xs:element name="Atom" type="Atom.type"/>
			<xs:element name="Equal" type="Equal-defining.type"/> <!-- added in hornlogeq -->
		</xs:choice>
	</xs:group>
	<xs:complexType name="head.type">
		<xs:group ref="head.content"/>
		<xs:attributeGroup ref="head.attlist"/>
	</xs:complexType>
	<xs:element name="head" type="head.type"/>
	
	<!--
		*** And ***
		A conjunctive expression, where <And>Atom</And> is equivalent to Atom.

		See http://www.ruleml.org/0.91/glossary/#gloss-And
		
		content model: ( oid?, (formula | Atom | And | Or)* )
		
		Note that in naffolog and naffologeq, Naf cannot be prevented from
		occurring within the head via And/Or due to XSD technical reasons:
		the two types of the context sensitive tag both being in the content
		model of Implies would violate the "Element Declarations Consistent" constraint
		(http://www.w3.org/TR/xmlschema-1/#cos-element-consistent).

		Under Query, And may have attribute closure="existential"; elsewhere, it may
		not have any attributes.
	-->
	<xs:attributeGroup name="And-inner.attlist"/>
	<xs:attributeGroup name="And-query.attlist">
		<!-- @@@ <xs:attributeGroup ref="closure.attrib"/> -->
	</xs:attributeGroup>
	<xs:group name="And.content">
		<xs:sequence>
			<!-- @@@ <xs:element ref="oid" minOccurs="0"/> -->
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="formula" type="formula-and-or.type"/>
				<xs:group ref="formula-and-or.content"/>
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="And-query.type">
		<xs:group ref="And.content"/>
		<xs:attributeGroup ref="And-query.attlist"/>
	</xs:complexType>
	<xs:complexType name="And-inner.type">
		<xs:group ref="And.content"/>
		<xs:attributeGroup ref="And-inner.attlist"/>
	</xs:complexType>
	<xs:element name="And" type="And-inner.type"/>
	
	<!--
		*** Or ***
		A disjunctive expression, where <Or>Atom</Or> is equivalent to Atom.
		
		See http://www.ruleml.org/0.91/glossary/#gloss-Or
		
		content model: ( oid?, (formula | Atom | And | Or)* )

		Note that in naffolog and naffologeq, Naf cannot be prevented from
		occurring within the head via And/Or due to XSD technical reasons:
		the two types of the context sensitive tag both being in the content
		model of Implies would violate the "Element Declarations Consistent" constraint
		(http://www.w3.org/TR/xmlschema-1/#cos-element-consistent).

		Under Query, Or may have attribute closure="existential"; elsewhere, it may not
		have any attributes.
	-->
	<xs:attributeGroup name="Or-query.attlist">
		<!-- @@@ <xs:attributeGroup ref="closure.attrib"/> -->
	</xs:attributeGroup>
	<xs:attributeGroup name="Or-inner.attlist"/>
	<xs:group name="Or.content">
		<xs:sequence>
			<!-- @@@ <xs:element ref="oid" minOccurs="0"/> -->
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="formula" type="formula-and-or.type"/>
				<xs:group ref="formula-and-or.content"/>
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Or-query.type">
		<xs:group ref="Or.content"/>
		<xs:attributeGroup ref="Or-query.attlist"/>
	</xs:complexType>
	<xs:complexType name="Or-inner.type">
		<xs:group ref="Or.content"/>
		<xs:attributeGroup ref="Or-inner.attlist"/>
	</xs:complexType>
	<xs:element name="Or" type="Or-inner.type"/>
	
	<!--
		*** formula ***
		The formula role of a conjunctive or disjunctive expression.

		See http://www.ruleml.org/0.91/glossary/#gloss-formula

		content model (below And/Or): (Atom | And | Or)
		
		Other (context-sensitive) versions of <formula> are in the
		performative and quantifier modules.
	-->
	<xs:attributeGroup name="formula.attlist"/>
	<xs:group name="formula-and-or.content">
		<xs:choice>
			<xs:element name="Atom" type="Atom.type"/>
			<xs:element name="And" type="And-inner.type"/>
			<xs:element name="Or" type="Or-inner.type"/>
			<xs:element ref="Equal"/> <!-- added in hornlogeq -->
		</xs:choice>
	</xs:group>
	<xs:complexType name="formula-and-or.type">
		<xs:group ref="formula-and-or.content"/>
		<xs:attributeGroup ref="formula.attlist"/>
	</xs:complexType>

	<!-- ############################################################# -->
	
	<!--
		*** arg ***
		A role used for the positional arguments of a logical atom.
		
		See http://www.ruleml.org/0.91/glossary/#gloss-arg

		content model: (Ind | Data | Var | Skolem | Reify)
	-->
	<xs:attributeGroup name="arg.attlist">
		<!-- @@@ <xs:attributeGroup ref="index.attrib"/> -->
	</xs:attributeGroup>
	<xs:group name="arg.content">
		<xs:choice>
			<xs:element ref="Ind"/>
			<xs:element ref="Data"/>
			<!-- @@@ <xs:element ref="Var"/>
			<xs:element ref="Skolem"/>
			<xs:element ref="Reify"/>	-->		
		</xs:choice>
	</xs:group>
	<xs:complexType name="arg.type">
		<xs:group ref="arg.content"/>
		<xs:attributeGroup ref="arg.attlist"/>
	</xs:complexType>
	<xs:element name="arg" type="arg.type"/>

	<!--
		*** Ind ***
		An individual constant, as in predicate logic, which can also be considered to
		be a fixed argument like RDF resources.

		See http://www.ruleml.org/0.91/glossary/#gloss-Ind
		
		content model: (#PCDATA)
	-->
       <xs:attributeGroup name="Ind.attlist">
               <!-- @@@ <xs:attributeGroup ref="type.attrib"/>
               <xs:attributeGroup ref="uri.attrib"/> -->
       </xs:attributeGroup>
	<xs:group name="Ind.content">
		<xs:sequence/>
	</xs:group>	
	<xs:complexType name="Ind.type" mixed="true">
		<xs:group ref="Ind.content"/>
		<xs:attributeGroup ref="Ind.attlist"/>
	</xs:complexType>
	<xs:element name="Ind" type="Ind.type"/>

	<!--
		*** Data ***
		A fixed argument like RDF literals.  It may be optionally associated with an XML Schema
		built-in datatype (see http://www.w3.org/TR/xmlschema-2/#built-in-datatypes) using the
		xsi:type attribute.

		See http://www.ruleml.org/0.91/glossary/#gloss-Data
		
		content model: (#PCDATA) [optionally datatyped]
	-->
	<xs:element name="Data" type="xs:anySimpleType"/>
	
	<!-- ############################################################# -->
	
	<!--
		*** op ***
		An operator expression including the function name of an expression.
		
		See http://www.ruleml.org/0.91/glossary/#gloss-op
				
		content model (within Expr): (Fun)
		
		Other (context-sensitive) versions of <op> are in the atom and holog modules.
	-->
	<!-- the (empty) attribute list is declared in the atom module -->
	<xs:group name="op-Expr.content">
		<xs:sequence>
			<xs:element ref="Fun"/>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="op-Expr.type">
		<xs:group ref="op-Expr.content"/>
		<xs:attributeGroup ref="op.attlist"/>
	</xs:complexType>
	
	
</xs:schema>